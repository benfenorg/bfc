
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

type {:datatype} Vec _;

function {:constructor} Vec<T>(v: [int]T, l: int): Vec T;

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := l#Vec(v);
    Vec(v#Vec(v)[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v#Vec(v)[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    l#Vec(v)
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    l#Vec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(v#Vec(v)[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v#Vec(v)[j] else v#Vec(v)[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} InsertAtVec<T>(v: Vec T, i: int, elem: T): Vec T {
    (var l := l#Vec(v) + 1;
    Vec(
        (lambda j: int ::
         if j >= 0 && j < l then
           if j < i then v#Vec(v)[j]
           else if j > i then v#Vec(v)[j-1] else elem
         else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := l#Vec(v1), v#Vec(v1), l#Vec(v2), v#Vec(v2);
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v);
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v#Vec(v)[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v#Vec(v)[i := elem], l#Vec(v))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(m[i := m[j]][j := m[i]], l#Vec(v)))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := l#Vec(v);
    (exists i: int :: InRangeVec(v, i) && v#Vec(v)[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

type {:datatype} Table _ _;

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
function {:constructor} Table<K, V>(v: [K]V, e: [K]bool, l: int): Table K V;

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    v#Table(t)[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    l#Table(t)
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    e#Table(t)[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(v#Table(t)[k := v], e#Table(t), l#Table(t))
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(v#Table(t)[k := v], e#Table(t)[k := true], l#Table(t) + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(v#Table(t), e#Table(t)[k := false], l#Table(t) - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native address


procedure {:inline 1} $2_address_from_bytes(bytes: Vec (int)) returns (res: int);

procedure {:inline 1} $2_address_to_u256(addr: int) returns (res: int);

procedure {:inline 1} $2_address_from_u256(num: int) returns (res: int);

// ==================================================================================
// Native object


procedure {:inline 1} $2_object_delete_impl(id: int);

procedure {:inline 1} $2_object_record_new_uid(id: int);// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_counter_Counter`

procedure {:inline 1} $2_object_borrow_uid'$0_counter_Counter'(obj: $0_counter_Counter) returns (res: $2_object_UID) {
    res := $id#$0_counter_Counter(obj);
}

function $2_object_$borrow_uid'$0_counter_Counter'(obj: $0_counter_Counter): $2_object_UID {
    $id#$0_counter_Counter(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_game_Game`

procedure {:inline 1} $2_object_borrow_uid'$0_game_Game'(obj: $0_game_Game) returns (res: $2_object_UID) {
    res := $id#$0_game_Game(obj);
}

function $2_object_$borrow_uid'$0_game_Game'(obj: $0_game_Game): $2_object_UID {
    $id#$0_game_Game(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_obc_dao_Dao`

procedure {:inline 1} $2_object_borrow_uid'$0_obc_dao_Dao'(obj: $0_obc_dao_Dao) returns (res: $2_object_UID) {
    res := $id#$0_obc_dao_Dao(obj);
}

function $2_object_$borrow_uid'$0_obc_dao_Dao'(obj: $0_obc_dao_Dao): $2_object_UID {
    $id#$0_obc_dao_Dao(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_obc_dao_Proposal`

procedure {:inline 1} $2_object_borrow_uid'$0_obc_dao_Proposal'(obj: $0_obc_dao_Proposal) returns (res: $2_object_UID) {
    res := $id#$0_obc_dao_Proposal(obj);
}

function $2_object_$borrow_uid'$0_obc_dao_Proposal'(obj: $0_obc_dao_Proposal): $2_object_UID {
    $id#$0_obc_dao_Proposal(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_obc_dao_Vote`

procedure {:inline 1} $2_object_borrow_uid'$0_obc_dao_Vote'(obj: $0_obc_dao_Vote) returns (res: $2_object_UID) {
    res := $id#$0_obc_dao_Vote(obj);
}

function $2_object_$borrow_uid'$0_obc_dao_Vote'(obj: $0_obc_dao_Vote): $2_object_UID {
    $id#$0_obc_dao_Vote(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_obc_dao_manager_OBCDaoManageKey`

procedure {:inline 1} $2_object_borrow_uid'$0_obc_dao_manager_OBCDaoManageKey'(obj: $0_obc_dao_manager_OBCDaoManageKey) returns (res: $2_object_UID) {
    res := $id#$0_obc_dao_manager_OBCDaoManageKey(obj);
}

function $2_object_$borrow_uid'$0_obc_dao_manager_OBCDaoManageKey'(obj: $0_obc_dao_manager_OBCDaoManageKey): $2_object_UID {
    $id#$0_obc_dao_manager_OBCDaoManageKey(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_voting_pool_VotingObc`

procedure {:inline 1} $2_object_borrow_uid'$0_voting_pool_VotingObc'(obj: $0_voting_pool_VotingObc) returns (res: $2_object_UID) {
    res := $id#$0_voting_pool_VotingObc(obj);
}

function $2_object_$borrow_uid'$0_voting_pool_VotingObc'(obj: $0_voting_pool_VotingObc): $2_object_UID {
    $id#$0_voting_pool_VotingObc(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$0_voting_pool_VotingPool`

procedure {:inline 1} $2_object_borrow_uid'$0_voting_pool_VotingPool'(obj: $0_voting_pool_VotingPool) returns (res: $2_object_UID) {
    res := $id#$0_voting_pool_VotingPool(obj);
}

function $2_object_$borrow_uid'$0_voting_pool_VotingPool'(obj: $0_voting_pool_VotingPool): $2_object_UID {
    $id#$0_voting_pool_VotingPool(obj)
}// ----------------------------------------------------------------------------------
// Native object implementation for object type `$2_coin_Coin'$2_obc_OBC'`

procedure {:inline 1} $2_object_borrow_uid'$2_coin_Coin'$2_obc_OBC''(obj: $2_coin_Coin'$2_obc_OBC') returns (res: $2_object_UID) {
    res := $id#$2_coin_Coin'$2_obc_OBC'(obj);
}

function $2_object_$borrow_uid'$2_coin_Coin'$2_obc_OBC''(obj: $2_coin_Coin'$2_obc_OBC'): $2_object_UID {
    $id#$2_coin_Coin'$2_obc_OBC'(obj)
}

// ==================================================================================
// Native tx_context

procedure {:inline 1} $2_tx_context_derive_id(tx_hash: Vec (int), ids_created: int) returns (res: int);

// ==================================================================================
// Native event// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_game_ChessEvent`

procedure {:inline 1} $2_event_emit'$0_game_ChessEvent'(event: $0_game_ChessEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_ActionCreateEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_ActionCreateEvent'(event: $0_obc_dao_ActionCreateEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_BooleanEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_BooleanEvent'(event: $0_obc_dao_BooleanEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_DaoManagerEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_DaoManagerEvent'(event: $0_obc_dao_DaoManagerEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_ProposalCreatedEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_ProposalCreatedEvent'(event: $0_obc_dao_ProposalCreatedEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_ProposalInfoEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_ProposalInfoEvent'(event: $0_obc_dao_ProposalInfoEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_ProposalStateEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_ProposalStateEvent'(event: $0_obc_dao_ProposalStateEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_VoteChangedEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_VoteChangedEvent'(event: $0_obc_dao_VoteChangedEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$0_obc_dao_VoteInfoEvent`

procedure {:inline 1} $2_event_emit'$0_obc_dao_VoteInfoEvent'(event: $0_obc_dao_VoteInfoEvent);

// ==================================================================================
// Native types

// ==================================================================================
// Native dynamic_field

procedure {:inline 1} $2_dynamic_field_has_child_object(parent: int, id: int) returns (res: bool);

// ==================================================================================
// Native prover


// ==================================================================================
// Reads and writes to dynamic fields (skeletons)

function GetDynField<T, V>(o: T, addr: int): V;

function UpdateDynField<T, V>(o: T, addr: int, v: V): T;


// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;

// The location of an uninitialized mutation. Using this to make sure that the location
// will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
function {:constructor} $Uninitialized(): $Location;

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) && p#$Mutation(parent) == p#$Mutation(child)
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$0_game_Node`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$0_game_Node''(v1: Vec ($0_game_Node), v2: Vec ($0_game_Node)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$0_game_Node'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$0_game_Node''(v: Vec ($0_game_Node), prefix: Vec ($0_game_Node)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$0_game_Node'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$0_game_Node''(v: Vec ($0_game_Node), suffix: Vec ($0_game_Node)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$0_game_Node'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$0_game_Node''(v: Vec ($0_game_Node)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$0_game_Node'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$0_game_Node'(v: Vec ($0_game_Node), e: $0_game_Node): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$0_game_Node'(ReadVec(v, i), e))
}

function $IndexOfVec'$0_game_Node'(v: Vec ($0_game_Node), e: $0_game_Node): int;
axiom (forall v: Vec ($0_game_Node), e: $0_game_Node:: {$IndexOfVec'$0_game_Node'(v, e)}
    (var i := $IndexOfVec'$0_game_Node'(v, e);
     if (!$ContainsVec'$0_game_Node'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$0_game_Node'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$0_game_Node'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$0_game_Node'(v: Vec ($0_game_Node)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$0_game_Node'(): Vec ($0_game_Node) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$0_game_Node'() returns (v: Vec ($0_game_Node)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$0_game_Node'(): Vec ($0_game_Node) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$0_game_Node'(v: Vec ($0_game_Node)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), val: $0_game_Node) returns (m': $Mutation (Vec ($0_game_Node))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$0_game_Node'(v: Vec ($0_game_Node), val: $0_game_Node): Vec ($0_game_Node) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$0_game_Node'(m: $Mutation (Vec ($0_game_Node))) returns (e: $0_game_Node, m': $Mutation (Vec ($0_game_Node))) {
    var v: Vec ($0_game_Node);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), other: Vec ($0_game_Node)) returns (m': $Mutation (Vec ($0_game_Node))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$0_game_Node'(m: $Mutation (Vec ($0_game_Node))) returns (m': $Mutation (Vec ($0_game_Node))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$0_game_Node'(v: Vec ($0_game_Node)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$0_game_Node'(v: Vec ($0_game_Node)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$0_game_Node'(v: Vec ($0_game_Node), i: int) returns (dst: $0_game_Node) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$0_game_Node'(v: Vec ($0_game_Node), i: int): $0_game_Node {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), index: int)
returns (dst: $Mutation ($0_game_Node), m': $Mutation (Vec ($0_game_Node)))
{
    var v: Vec ($0_game_Node);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$0_game_Node'(v: Vec ($0_game_Node), i: int): $0_game_Node {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$0_game_Node'(v: Vec ($0_game_Node)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), i: int, j: int) returns (m': $Mutation (Vec ($0_game_Node)))
{
    var v: Vec ($0_game_Node);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$0_game_Node'(v: Vec ($0_game_Node), i: int, j: int): Vec ($0_game_Node) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), i: int) returns (e: $0_game_Node, m': $Mutation (Vec ($0_game_Node)))
{
    var v: Vec ($0_game_Node);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), val: $0_game_Node, i: int) returns (m': $Mutation (Vec ($0_game_Node))) {

    var len: int;
    var v: Vec ($0_game_Node);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'$0_game_Node'(m: $Mutation (Vec ($0_game_Node)), i: int) returns (e: $0_game_Node, m': $Mutation (Vec ($0_game_Node)))
{
    var len: int;
    var v: Vec ($0_game_Node);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$0_game_Node'(v: Vec ($0_game_Node), e: $0_game_Node) returns (res: bool)  {
    res := $ContainsVec'$0_game_Node'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$0_game_Node'(v: Vec ($0_game_Node), e: $0_game_Node) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$0_game_Node'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''(v1: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), v2: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), prefix: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), suffix: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'): int;
axiom (forall v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction':: {$IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v, e)}
    (var i := $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v, e);
     if (!$ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(): Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''() returns (v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(): Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), val: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), val: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'): Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) {
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), other: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), i: int) returns (dst: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), i: int): $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), index: int)
returns (dst: $Mutation ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), i: int): $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), i: int, j: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), i: int, j: int): Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), i: int) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), val: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', i: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'))) {

    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')), i: int) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')))
{
    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') returns (res: bool)  {
    res := $ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'), e: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''(v1: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), v2: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), prefix: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), suffix: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'): int;
axiom (forall v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo':: {$IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v, e)}
    (var i := $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v, e);
     if (!$ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(): Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''() returns (v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(): Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), val: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), val: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'): Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) {
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), other: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), i: int) returns (dst: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), i: int): $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), index: int)
returns (dst: $Mutation ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), i: int): $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), i: int, j: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), i: int, j: int): Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), i: int) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')))
{
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), val: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', i: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'))) {

    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(m: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')), i: int) returns (e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', m': $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')))
{
    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') returns (res: bool)  {
    res := $ContainsVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'), e: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_vec_map_Entry'u64_u64'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_vec_map_Entry'u64_u64'''(v1: Vec ($2_vec_map_Entry'u64_u64'), v2: Vec ($2_vec_map_Entry'u64_u64')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$2_vec_map_Entry'u64_u64'''(v: Vec ($2_vec_map_Entry'u64_u64'), prefix: Vec ($2_vec_map_Entry'u64_u64')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$2_vec_map_Entry'u64_u64'''(v: Vec ($2_vec_map_Entry'u64_u64'), suffix: Vec ($2_vec_map_Entry'u64_u64')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$2_vec_map_Entry'u64_u64'''(v: Vec ($2_vec_map_Entry'u64_u64')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_vec_map_Entry'u64_u64''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), e: $2_vec_map_Entry'u64_u64'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), e: $2_vec_map_Entry'u64_u64'): int;
axiom (forall v: Vec ($2_vec_map_Entry'u64_u64'), e: $2_vec_map_Entry'u64_u64':: {$IndexOfVec'$2_vec_map_Entry'u64_u64''(v, e)}
    (var i := $IndexOfVec'$2_vec_map_Entry'u64_u64''(v, e);
     if (!$ContainsVec'$2_vec_map_Entry'u64_u64''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_vec_map_Entry'u64_u64''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_vec_map_Entry'u64_u64''(): Vec ($2_vec_map_Entry'u64_u64') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_vec_map_Entry'u64_u64''() returns (v: Vec ($2_vec_map_Entry'u64_u64')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_vec_map_Entry'u64_u64''(): Vec ($2_vec_map_Entry'u64_u64') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), val: $2_vec_map_Entry'u64_u64') returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), val: $2_vec_map_Entry'u64_u64'): Vec ($2_vec_map_Entry'u64_u64') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) returns (e: $2_vec_map_Entry'u64_u64', m': $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) {
    var v: Vec ($2_vec_map_Entry'u64_u64');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), other: Vec ($2_vec_map_Entry'u64_u64')) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), i: int) returns (dst: $2_vec_map_Entry'u64_u64') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), i: int): $2_vec_map_Entry'u64_u64' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), index: int)
returns (dst: $Mutation ($2_vec_map_Entry'u64_u64'), m': $Mutation (Vec ($2_vec_map_Entry'u64_u64')))
{
    var v: Vec ($2_vec_map_Entry'u64_u64');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), i: int): $2_vec_map_Entry'u64_u64' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), i: int, j: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_u64')))
{
    var v: Vec ($2_vec_map_Entry'u64_u64');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), i: int, j: int): Vec ($2_vec_map_Entry'u64_u64') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), i: int) returns (e: $2_vec_map_Entry'u64_u64', m': $Mutation (Vec ($2_vec_map_Entry'u64_u64')))
{
    var v: Vec ($2_vec_map_Entry'u64_u64');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), val: $2_vec_map_Entry'u64_u64', i: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'u64_u64'))) {

    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_u64');

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'$2_vec_map_Entry'u64_u64''(m: $Mutation (Vec ($2_vec_map_Entry'u64_u64')), i: int) returns (e: $2_vec_map_Entry'u64_u64', m': $Mutation (Vec ($2_vec_map_Entry'u64_u64')))
{
    var len: int;
    var v: Vec ($2_vec_map_Entry'u64_u64');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), e: $2_vec_map_Entry'u64_u64') returns (res: bool)  {
    res := $ContainsVec'$2_vec_map_Entry'u64_u64''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_vec_map_Entry'u64_u64''(v: Vec ($2_vec_map_Entry'u64_u64'), e: $2_vec_map_Entry'u64_u64') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_vec_map_Entry'u64_u64''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'$0_game_Node'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'$0_game_Node'''(v1: Vec (Vec ($0_game_Node)), v2: Vec (Vec ($0_game_Node))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'$0_game_Node''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'vec'$0_game_Node'''(v: Vec (Vec ($0_game_Node)), prefix: Vec (Vec ($0_game_Node))): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'vec'$0_game_Node''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'vec'$0_game_Node'''(v: Vec (Vec ($0_game_Node)), suffix: Vec (Vec ($0_game_Node))): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'vec'$0_game_Node''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'vec'$0_game_Node'''(v: Vec (Vec ($0_game_Node))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'$0_game_Node''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), e: Vec ($0_game_Node)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'$0_game_Node''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), e: Vec ($0_game_Node)): int;
axiom (forall v: Vec (Vec ($0_game_Node)), e: Vec ($0_game_Node):: {$IndexOfVec'vec'$0_game_Node''(v, e)}
    (var i := $IndexOfVec'vec'$0_game_Node''(v, e);
     if (!$ContainsVec'vec'$0_game_Node''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'$0_game_Node''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'$0_game_Node''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'$0_game_Node''(): Vec (Vec ($0_game_Node)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'vec'$0_game_Node''() returns (v: Vec (Vec ($0_game_Node))) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'vec'$0_game_Node''(): Vec (Vec ($0_game_Node)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), val: Vec ($0_game_Node)) returns (m': $Mutation (Vec (Vec ($0_game_Node)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), val: Vec ($0_game_Node)): Vec (Vec ($0_game_Node)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node)))) returns (e: Vec ($0_game_Node), m': $Mutation (Vec (Vec ($0_game_Node)))) {
    var v: Vec (Vec ($0_game_Node));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), other: Vec (Vec ($0_game_Node))) returns (m': $Mutation (Vec (Vec ($0_game_Node)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node)))) returns (m': $Mutation (Vec (Vec ($0_game_Node)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node))): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), i: int) returns (dst: Vec ($0_game_Node)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), i: int): Vec ($0_game_Node) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), index: int)
returns (dst: $Mutation (Vec ($0_game_Node)), m': $Mutation (Vec (Vec ($0_game_Node))))
{
    var v: Vec (Vec ($0_game_Node));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), i: int): Vec ($0_game_Node) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), i: int, j: int) returns (m': $Mutation (Vec (Vec ($0_game_Node))))
{
    var v: Vec (Vec ($0_game_Node));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), i: int, j: int): Vec (Vec ($0_game_Node)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), i: int) returns (e: Vec ($0_game_Node), m': $Mutation (Vec (Vec ($0_game_Node))))
{
    var v: Vec (Vec ($0_game_Node));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), val: Vec ($0_game_Node), i: int) returns (m': $Mutation (Vec (Vec ($0_game_Node)))) {

    var len: int;
    var v: Vec (Vec ($0_game_Node));

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'vec'$0_game_Node''(m: $Mutation (Vec (Vec ($0_game_Node))), i: int) returns (e: Vec ($0_game_Node), m': $Mutation (Vec (Vec ($0_game_Node))))
{
    var len: int;
    var v: Vec (Vec ($0_game_Node));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), e: Vec ($0_game_Node)) returns (res: bool)  {
    res := $ContainsVec'vec'$0_game_Node''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'vec'$0_game_Node''(v: Vec (Vec ($0_game_Node)), e: Vec ($0_game_Node)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'$0_game_Node''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), val: int, i: int) returns (m': $Mutation (Vec (int))) {

    var len: int;
    var v: Vec (int);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), val: int, i: int) returns (m': $Mutation (Vec (int))) {

    var len: int;
    var v: Vec (int);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), val: int, i: int) returns (m': $Mutation (Vec (int))) {

    var len: int;
    var v: Vec (int);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), val: bv64, i: int) returns (m': $Mutation (Vec (bv64))) {

    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), val: bv8, i: int) returns (m': $Mutation (Vec (bv8))) {

    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);

    len := LenVec(v);
    if (i < 0 || i > len) {
        call $ExecFailureAbort();
        return;
    }
    if (i == len) {
        m' := $UpdateMutation(m, ExtendVec(v, val));
    } else {
        m' := $UpdateMutation(m, InsertAtVec(v, i, val));
    }
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize


// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

type {:datatype} $TypeParamInfo;

function {:constructor} $TypeParamBool(): $TypeParamInfo;
function {:constructor} $TypeParamU8(): $TypeParamInfo;
function {:constructor} $TypeParamU16(): $TypeParamInfo;
function {:constructor} $TypeParamU32(): $TypeParamInfo;
function {:constructor} $TypeParamU64(): $TypeParamInfo;
function {:constructor} $TypeParamU128(): $TypeParamInfo;
function {:constructor} $TypeParamU256(): $TypeParamInfo;
function {:constructor} $TypeParamAddress(): $TypeParamInfo;
function {:constructor} $TypeParamSigner(): $TypeParamInfo;
function {:constructor} $TypeParamVector(e: $TypeParamInfo): $TypeParamInfo;
function {:constructor} $TypeParamStruct(a: int, m: Vec int, s: Vec int): $TypeParamInfo;



//==================================
// Begin Translation



// Given Types for Type Parameters


// struct tx_context::TxContext at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:22:5+514
type {:datatype} $2_tx_context_TxContext;
function {:constructor} $2_tx_context_TxContext($sender: int, $tx_hash: Vec (int), $epoch: int, $epoch_timestamp_ms: int, $ids_created: int): $2_tx_context_TxContext;
function {:inline} $Update'$2_tx_context_TxContext'_sender(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext(x, $tx_hash#$2_tx_context_TxContext(s), $epoch#$2_tx_context_TxContext(s), $epoch_timestamp_ms#$2_tx_context_TxContext(s), $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_tx_hash(s: $2_tx_context_TxContext, x: Vec (int)): $2_tx_context_TxContext {
    $2_tx_context_TxContext($sender#$2_tx_context_TxContext(s), x, $epoch#$2_tx_context_TxContext(s), $epoch_timestamp_ms#$2_tx_context_TxContext(s), $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_epoch(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext($sender#$2_tx_context_TxContext(s), $tx_hash#$2_tx_context_TxContext(s), x, $epoch_timestamp_ms#$2_tx_context_TxContext(s), $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_epoch_timestamp_ms(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext($sender#$2_tx_context_TxContext(s), $tx_hash#$2_tx_context_TxContext(s), $epoch#$2_tx_context_TxContext(s), x, $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_ids_created(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext($sender#$2_tx_context_TxContext(s), $tx_hash#$2_tx_context_TxContext(s), $epoch#$2_tx_context_TxContext(s), $epoch_timestamp_ms#$2_tx_context_TxContext(s), x)
}
function $IsValid'$2_tx_context_TxContext'(s: $2_tx_context_TxContext): bool {
    $IsValid'address'($sender#$2_tx_context_TxContext(s))
      && $IsValid'vec'u8''($tx_hash#$2_tx_context_TxContext(s))
      && $IsValid'u64'($epoch#$2_tx_context_TxContext(s))
      && $IsValid'u64'($epoch_timestamp_ms#$2_tx_context_TxContext(s))
      && $IsValid'u64'($ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $IsEqual'$2_tx_context_TxContext'(s1: $2_tx_context_TxContext, s2: $2_tx_context_TxContext): bool {
    $IsEqual'address'($sender#$2_tx_context_TxContext(s1), $sender#$2_tx_context_TxContext(s2))
    && $IsEqual'vec'u8''($tx_hash#$2_tx_context_TxContext(s1), $tx_hash#$2_tx_context_TxContext(s2))
    && $IsEqual'u64'($epoch#$2_tx_context_TxContext(s1), $epoch#$2_tx_context_TxContext(s2))
    && $IsEqual'u64'($epoch_timestamp_ms#$2_tx_context_TxContext(s1), $epoch_timestamp_ms#$2_tx_context_TxContext(s2))
    && $IsEqual'u64'($ids_created#$2_tx_context_TxContext(s1), $ids_created#$2_tx_context_TxContext(s2))}

// fun tx_context::fresh_object_address [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:61:5+222
procedure {:inline 1} $2_tx_context_fresh_object_address(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: int, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: Vec (int);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:61:5+1
    assume {:print "$at(79,2123,2124)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(2,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := get_field<tx_context::TxContext>.ids_created($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:62:27+15
    assume {:print "$at(79,2213,2228)"} true;
    $t3 := $ids_created#$2_tx_context_TxContext($Dereference($t0));

    // trace_local[ids_created#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:62:13+11
    assume {:print "$track_local(2,4,2):", $t3} $t3 == $t3;

    // $t4 := get_field<tx_context::TxContext>.tx_hash($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:63:29+12
    assume {:print "$at(79,2258,2270)"} true;
    $t4 := $tx_hash#$2_tx_context_TxContext($Dereference($t0));

    // $t5 := opaque begin: tx_context::derive_id($t4, $t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:63:18+37

    // assume WellFormed($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:63:18+37
    assume $IsValid'address'($t5);

    // $t5 := opaque end: tx_context::derive_id($t4, $t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:63:18+37

    // trace_local[id#1#0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:63:13+2
    assume {:print "$track_local(2,4,1):", $t5} $t5 == $t5;

    // $t6 := 1 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:41+1
    assume {:print "$at(79,2326,2327)"} true;
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := +($t3, $t6) on_abort goto L2 with $t8 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:39+1
    call $t7 := $AddU64($t3, $t6);
    if ($abort_flag) {
        assume {:print "$at(79,2324,2325)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(2,4):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t9 := borrow_field<tx_context::TxContext>.ids_created($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:9+15
    $t9 := $ChildMutation($t0, 4, $ids_created#$2_tx_context_TxContext($Dereference($t0)));

    // write_ref($t9, $t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:9+33
    $t9 := $UpdateMutation($t9, $t7);

    // write_back[Reference($t0).ids_created (u64)]($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:9+33
    $t0 := $UpdateMutation($t0, $Update'$2_tx_context_TxContext'_ids_created($Dereference($t0), $Dereference($t9)));

    // trace_local[ctx]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:64:9+33
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(2,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_return[0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:65:9+2
    assume {:print "$at(79,2337,2339)"} true;
    assume {:print "$track_return(2,4,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:65:9+2
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(2,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:66:5+1
    assume {:print "$at(79,2344,2345)"} true;
L1:

    // return $t5 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:66:5+1
    assume {:print "$at(79,2344,2345)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:66:5+1
L2:

    // abort($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:66:5+1
    assume {:print "$at(79,2344,2345)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun tx_context::sender [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:38:5+72
procedure {:inline 1} $2_tx_context_sender(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:38:5+1
    assume {:print "$at(79,1352,1353)"} true;
    assume {:print "$track_local(2,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.sender($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:39:9+11
    assume {:print "$at(79,1407,1418)"} true;
    $t1 := $sender#$2_tx_context_TxContext($t0);

    // trace_return[0]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:39:9+11
    assume {:print "$track_return(2,0,0):", $t1} $t1 == $t1;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:40:5+1
    assume {:print "$at(79,1423,1424)"} true;
L1:

    // return $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/tx_context.move:40:5+1
    assume {:print "$at(79,1423,1424)"} true;
    $ret0 := $t1;
    return;

}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/vector.move:102:5+86
function {:inline} $1_vector_$is_empty'u64'(v: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u64'(v), 0)
}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:91:5+145
function {:inline} $1_option_$borrow'u64'(t: $1_option_Option'u64'): int {
    $1_vector_$borrow'u64'($vec#$1_option_Option'u64'(t), 0)
}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:56:5+95
function {:inline} $1_option_$is_none'u64'(t: $1_option_Option'u64'): bool {
    $1_vector_$is_empty'u64'($vec#$1_option_Option'u64'(t))
}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:66:5+96
function {:inline} $1_option_$is_some'u64'(t: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'($vec#$1_option_Option'u64'(t))
}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:38:10+78
function {:inline} $1_option_spec_none'u64'(): $1_option_Option'u64' {
    $1_option_Option'u64'($EmptyVec'u64'())
}

// spec fun at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:51:10+89
function {:inline} $1_option_spec_some'u64'(e: int): $1_option_Option'u64' {
    $1_option_Option'u64'(MakeVec1(e))
}

// struct option::Option<u64> at ./../../../crates/sui-framework/packages/move-stdlib/sources/option.move:10:5+81
type {:datatype} $1_option_Option'u64';
function {:constructor} $1_option_Option'u64'($vec: Vec (int)): $1_option_Option'u64';
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''($vec#$1_option_Option'u64'(s))
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''($vec#$1_option_Option'u64'(s1), $vec#$1_option_Option'u64'(s2))}

// struct string::String at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:17:5+70
type {:datatype} $1_string_String;
function {:constructor} $1_string_String($bytes: Vec (int)): $1_string_String;
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''($bytes#$1_string_String(s))
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''($bytes#$1_string_String(s1), $bytes#$1_string_String(s2))}

// fun string::utf8 [baseline] at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:22:5+133
procedure {:inline 1} $1_string_utf8(_$t0: Vec (int)) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_string_String;
    var $t0: Vec (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:22:5+1
    assume {:print "$at(18,668,669)"} true;
    assume {:print "$track_local(7,0,0):", $t0} $t0 == $t0;

    // $t1 := string::internal_check_utf8($t0) on_abort goto L4 with $t2 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:17+27
    assume {:print "$at(18,729,756)"} true;
    call $t1 := $1_string_internal_check_utf8($t0);
    if ($abort_flag) {
        assume {:print "$at(18,729,756)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(7,0):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
    assume {:print "$at(18,721,772)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:46+13
L0:

    // $t3 := 1 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:46+13
    assume {:print "$at(18,758,771)"} true;
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
    assume {:print "$at(18,721,772)"} true;
    assume {:print "$track_abort(7,0):", $t3} $t3 == $t3;

    // $t2 := move($t3) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
    $t2 := $t3;

    // goto L4 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:23:9+51
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:24:16+5
    assume {:print "$at(18,789,794)"} true;
L2:

    // $t4 := pack string::String($t0) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:24:9+13
    assume {:print "$at(18,782,795)"} true;
    $t4 := $1_string_String($t0);

    // trace_return[0]($t4) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:24:9+13
    assume {:print "$track_return(7,0,0):", $t4} $t4 == $t4;

    // label L3 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:25:5+1
    assume {:print "$at(18,800,801)"} true;
L3:

    // return $t4 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:25:5+1
    assume {:print "$at(18,800,801)"} true;
    $ret0 := $t4;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:25:5+1
L4:

    // abort($t2) at ./../../../crates/sui-framework/packages/move-stdlib/sources/string.move:25:5+1
    assume {:print "$at(18,800,801)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_counter_Counter'(obj: $0_counter_Counter): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_counter_Counter'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_game_Game'(obj: $0_game_Game): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_game_Game'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$2_coin_Coin'$2_obc_OBC''(obj: $2_coin_Coin'$2_obc_OBC'): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$2_coin_Coin'$2_obc_OBC''(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'(obj: $0_obc_dao_manager_OBCDaoManageKey): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_obc_dao_manager_OBCDaoManageKey'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_voting_pool_VotingObc'(obj: $0_voting_pool_VotingObc): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_voting_pool_VotingObc'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_obc_dao_Dao'(obj: $0_obc_dao_Dao): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_obc_dao_Dao'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_obc_dao_Proposal'(obj: $0_obc_dao_Proposal): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_obc_dao_Proposal'(obj))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
function {:inline} $2_object_$id'$0_obc_dao_Vote'(obj: $0_obc_dao_Vote): $2_object_ID {
    $id#$2_object_UID($2_object_$borrow_uid'$0_obc_dao_Vote'(obj))
}

// struct object::ID at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:35:5+406
type {:datatype} $2_object_ID;
function {:constructor} $2_object_ID($bytes: int): $2_object_ID;
function {:inline} $Update'$2_object_ID'_bytes(s: $2_object_ID, x: int): $2_object_ID {
    $2_object_ID(x)
}
function $IsValid'$2_object_ID'(s: $2_object_ID): bool {
    $IsValid'address'($bytes#$2_object_ID(s))
}
function {:inline} $IsEqual'$2_object_ID'(s1: $2_object_ID, s2: $2_object_ID): bool {
    s1 == s2
}

// struct object::Ownership at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:210:5+112
type {:datatype} $2_object_Ownership;
function {:constructor} $2_object_Ownership($owner: int, $status: int): $2_object_Ownership;
function {:inline} $Update'$2_object_Ownership'_owner(s: $2_object_Ownership, x: int): $2_object_Ownership {
    $2_object_Ownership(x, $status#$2_object_Ownership(s))
}
function {:inline} $Update'$2_object_Ownership'_status(s: $2_object_Ownership, x: int): $2_object_Ownership {
    $2_object_Ownership($owner#$2_object_Ownership(s), x)
}
function $IsValid'$2_object_Ownership'(s: $2_object_Ownership): bool {
    $IsValid'address'($owner#$2_object_Ownership(s))
      && $IsValid'u64'($status#$2_object_Ownership(s))
}
function {:inline} $IsEqual'$2_object_Ownership'(s1: $2_object_Ownership, s2: $2_object_Ownership): bool {
    s1 == s2
}
var $2_object_Ownership_$memory: $Memory $2_object_Ownership;

// struct object::UID at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:49:5+44
type {:datatype} $2_object_UID;
function {:constructor} $2_object_UID($id: $2_object_ID): $2_object_UID;
function {:inline} $Update'$2_object_UID'_id(s: $2_object_UID, x: $2_object_ID): $2_object_UID {
    $2_object_UID(x)
}
function $IsValid'$2_object_UID'(s: $2_object_UID): bool {
    $IsValid'$2_object_ID'($id#$2_object_UID(s))
}
function {:inline} $IsEqual'$2_object_UID'(s1: $2_object_UID, s2: $2_object_UID): bool {
    s1 == s2
}

// fun object::id<voting_pool::VotingPool> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+69
procedure {:inline 1} $2_object_id'$0_voting_pool_VotingPool'(_$t0: $0_voting_pool_VotingPool) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: $0_voting_pool_VotingPool;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:146:5+1
    assume {:print "$at(65,5067,5068)"} true;
    assume {:print "$track_local(10,13,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:147:9+15
    assume {:print "$at(65,5112,5127)"} true;
    call $t1 := $2_object_borrow_uid'$0_voting_pool_VotingPool'($t0);
    if ($abort_flag) {
        assume {:print "$at(65,5112,5127)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(10,13):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:147:9+18
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:147:9+18
    assume {:print "$track_return(10,13,0):", $t3} $t3 == $t3;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:148:5+1
    assume {:print "$at(65,5135,5136)"} true;
L1:

    // return $t3 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:148:5+1
    assume {:print "$at(65,5135,5136)"} true;
    $ret0 := $t3;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:148:5+1
L2:

    // abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:148:5+1
    assume {:print "$at(65,5135,5136)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::delete [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:140:5+104
procedure {:inline 1} $2_object_delete(_$t0: $2_object_UID) returns ()
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[id]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:140:5+1
    assume {:print "$at(65,4916,4917)"} true;
    assume {:print "$track_local(10,12,0):", $t0} $t0 == $t0;

    // $t1 := unpack object::UID($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:141:13+24
    assume {:print "$at(65,4957,4981)"} true;
    $t1 := $id#$2_object_UID($t0);

    // $t2 := unpack object::ID($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:141:23+12
    $t2 := $bytes#$2_object_ID($t1);

    // opaque begin: object::delete_impl($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:142:9+18
    assume {:print "$at(65,4996,5014)"} true;

    // assume Not(exists<object::Ownership>($t2)) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:142:9+18
    assume !$ResourceExists($2_object_Ownership_$memory, $t2);

    // opaque end: object::delete_impl($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:142:9+18

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:143:5+1
    assume {:print "$at(65,5019,5020)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:143:5+1
    assume {:print "$at(65,5019,5020)"} true;
    return;

}

// fun object::new [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:129:5+141
procedure {:inline 1} $2_object_new(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_object_UID, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: $2_object_UID;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:129:5+1
    assume {:print "$at(65,4413,4414)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(10,11,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := tx_context::fresh_object_address($t0) on_abort goto L2 with $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:131:29+37
    assume {:print "$at(65,4498,4535)"} true;
    call $t1,$t0 := $2_tx_context_fresh_object_address($t0);
    if ($abort_flag) {
        assume {:print "$at(65,4498,4535)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(10,11):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack object::ID($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:131:17+51
    $t3 := $2_object_ID($t1);

    // $t4 := pack object::UID($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:130:9+84
    assume {:print "$at(65,4464,4548)"} true;
    $t4 := $2_object_UID($t3);

    // trace_return[0]($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:130:9+84
    assume {:print "$track_return(10,11,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:130:9+84
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(10,11,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:133:5+1
    assume {:print "$at(65,4553,4554)"} true;
L1:

    // return $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:133:5+1
    assume {:print "$at(65,4553,4554)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:133:5+1
L2:

    // abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:133:5+1
    assume {:print "$at(65,4553,4554)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::uid_to_address [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:121:5+74
procedure {:inline 1} $2_object_uid_to_address(_$t0: $2_object_UID) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[uid]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:121:5+1
    assume {:print "$at(65,4175,4176)"} true;
    assume {:print "$track_local(10,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:122:9+6
    assume {:print "$at(65,4231,4237)"} true;
    $t1 := $id#$2_object_UID($t0);

    // $t2 := get_field<object::ID>.bytes($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:122:9+12
    $t2 := $bytes#$2_object_ID($t1);

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:122:9+12
    assume {:print "$track_return(10,10,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:123:5+1
    assume {:print "$at(65,4248,4249)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/object.move:123:5+1
    assume {:print "$at(65,4248,4249)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/prover.move:14:10+180
function {:inline} $2_prover_owned'$0_obc_dao_Dao'($2_object_Ownership_$memory: $Memory $2_object_Ownership, obj: $0_obc_dao_Dao): bool {
    (var addr := $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Dao'(obj)); ($ResourceExists($2_object_Ownership_$memory, addr) && $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, addr)), 1)))
}

// spec fun at ./../../../crates/sui-framework/packages/sui-framework/sources/prover.move:14:10+180
function {:inline} $2_prover_owned'$0_obc_dao_Proposal'($2_object_Ownership_$memory: $Memory $2_object_Ownership, obj: $0_obc_dao_Proposal): bool {
    (var addr := $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'(obj)); ($ResourceExists($2_object_Ownership_$memory, addr) && $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, addr)), 1)))
}

// fun transfer::transfer<counter::Counter> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_counter_Counter'(_$t0: $0_counter_Counter, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_counter_Counter;
    var $t1: int;
    var $temp_0'$0_counter_Counter': $0_counter_Counter;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_counter_Counter'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_counter_Counter'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_counter_Counter'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_counter_Counter'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_counter_Counter'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::transfer<game::Game> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_game_Game'(_$t0: $0_game_Game, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_game_Game;
    var $t1: int;
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_game_Game'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_game_Game'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_game_Game'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_game_Game'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_game_Game'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::transfer<obc_dao_manager::OBCDaoManageKey> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_obc_dao_manager_OBCDaoManageKey'(_$t0: $0_obc_dao_manager_OBCDaoManageKey, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $t1: int;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_manager_OBCDaoManageKey'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::transfer<voting_pool::VotingObc> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_voting_pool_VotingObc'(_$t0: $0_voting_pool_VotingObc, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_voting_pool_VotingObc;
    var $t1: int;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::transfer<obc_dao::Proposal> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_obc_dao_Proposal'(_$t0: $0_obc_dao_Proposal, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_obc_dao_Proposal;
    var $t1: int;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::transfer<obc_dao::Vote> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+101
procedure {:inline 1} $2_transfer_transfer'$0_obc_dao_Vote'(_$t0: $0_obc_dao_Vote, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_obc_dao_Vote;
    var $t1: int;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$at(78,1015,1016)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:24:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume {:print "$at(78,1081,1110)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Vote'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Vote'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Vote'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Vote'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Vote'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:25:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:26:5+1
    assume {:print "$at(78,1115,1116)"} true;
    return;

}

// fun transfer::public_transfer<coin::Coin<obc::OBC>> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+116
procedure {:inline 1} $2_transfer_public_transfer'$2_coin_Coin'$2_obc_OBC''(_$t0: $2_coin_Coin'$2_obc_OBC', _$t1: int) returns ()
{
    // declare local variables
    var $t0: $2_coin_Coin'$2_obc_OBC';
    var $t1: int;
    var $temp_0'$2_coin_Coin'$2_obc_OBC'': $2_coin_Coin'$2_obc_OBC';
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+1
    assume {:print "$at(78,1569,1570)"} true;
    assume {:print "$track_local(12,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+1
    assume {:print "$track_local(12,1,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume {:print "$at(78,1650,1679)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$2_coin_Coin'$2_obc_OBC''($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$2_coin_Coin'$2_obc_OBC''($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$2_coin_Coin'$2_obc_OBC''($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$2_coin_Coin'$2_obc_OBC''($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$2_coin_Coin'$2_obc_OBC''($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:35:5+1
    assume {:print "$at(78,1684,1685)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:35:5+1
    assume {:print "$at(78,1684,1685)"} true;
    return;

}

// fun transfer::public_transfer<voting_pool::VotingObc> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+116
procedure {:inline 1} $2_transfer_public_transfer'$0_voting_pool_VotingObc'(_$t0: $0_voting_pool_VotingObc, _$t1: int) returns ()
{
    // declare local variables
    var $t0: $0_voting_pool_VotingObc;
    var $t1: int;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+1
    assume {:print "$at(78,1569,1570)"} true;
    assume {:print "$track_local(12,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:33:5+1
    assume {:print "$track_local(12,1,1):", $t1} $t1 == $t1;

    // opaque begin: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume {:print "$at(78,1650,1679)"} true;

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)));

    // assume Eq<address>(select object::Ownership.owner(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $IsEqual'address'($owner#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)))), $t1);

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_voting_pool_VotingObc'($t0)))), 1);

    // opaque end: transfer::transfer_impl<#0>($t0, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:34:9+29

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:35:5+1
    assume {:print "$at(78,1684,1685)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:35:5+1
    assume {:print "$at(78,1684,1685)"} true;
    return;

}

// fun transfer::share_object<obc_dao::Dao> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:60:5+78
procedure {:inline 1} $2_transfer_share_object'$0_obc_dao_Dao'(_$t0: $0_obc_dao_Dao) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t0: $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:60:5+1
    assume {:print "$at(78,3069,3070)"} true;
    assume {:print "$track_local(12,4,0):", $t0} $t0 == $t0;

    // opaque begin: transfer::share_object_impl<#0>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;

    // assume Identical($t1, prover::owned<#0>($t0)) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume ($t1 == $2_prover_owned'$0_obc_dao_Dao'($2_object_Ownership_$memory, $t0));

    // if ($t1) goto L4 else goto L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
L4:

    // trace_abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;
    assume {:print "$track_abort(12,4):", $t2} $t2 == $t2;

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    goto L2;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
L3:

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Dao'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Dao'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Dao'($t0)));

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Dao'($t0)))), 2);

    // opaque end: transfer::share_object_impl<#0>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
L2:

    // abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun transfer::share_object<obc_dao::Proposal> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:60:5+78
procedure {:inline 1} $2_transfer_share_object'$0_obc_dao_Proposal'(_$t0: $0_obc_dao_Proposal) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t0: $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_object_Ownership': $2_object_Ownership;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:60:5+1
    assume {:print "$at(78,3069,3070)"} true;
    assume {:print "$track_local(12,4,0):", $t0} $t0 == $t0;

    // opaque begin: transfer::share_object_impl<#0>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;

    // assume Identical($t1, prover::owned<#0>($t0)) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume ($t1 == $2_prover_owned'$0_obc_dao_Proposal'($2_object_Ownership_$memory, $t0));

    // if ($t1) goto L4 else goto L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
L4:

    // trace_abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;
    assume {:print "$track_abort(12,4):", $t2} $t2 == $t2;

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    goto L2;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
L3:

    // modifies global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume {:print "$at(78,3119,3141)"} true;
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$2_object_Ownership';
        $2_object_Ownership_$memory := $ResourceUpdate($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)), $temp_0'$2_object_Ownership');
    } else {
        $2_object_Ownership_$memory := $ResourceRemove($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)));
    }

    // assume exists<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0))) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume $ResourceExists($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)));

    // assume Eq<u64>(select object::Ownership.status(global<object::Ownership>(select object::ID.bytes(object::$id<#0>($t0)))), 2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22
    assume $IsEqual'u64'($status#$2_object_Ownership($ResourceValue($2_object_Ownership_$memory, $bytes#$2_object_ID($2_object_$id'$0_obc_dao_Proposal'($t0)))), 2);

    // opaque end: transfer::share_object_impl<#0>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:61:9+22

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
L1:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
L2:

    // abort($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/transfer.move:62:5+1
    assume {:print "$at(78,3146,3147)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct counter::Counter at ./sources/my_module.move:12:5+67
type {:datatype} $0_counter_Counter;
function {:constructor} $0_counter_Counter($id: $2_object_UID, $value: int): $0_counter_Counter;
function {:inline} $Update'$0_counter_Counter'_id(s: $0_counter_Counter, x: $2_object_UID): $0_counter_Counter {
    $0_counter_Counter(x, $value#$0_counter_Counter(s))
}
function {:inline} $Update'$0_counter_Counter'_value(s: $0_counter_Counter, x: int): $0_counter_Counter {
    $0_counter_Counter($id#$0_counter_Counter(s), x)
}
function $IsValid'$0_counter_Counter'(s: $0_counter_Counter): bool {
    $IsValid'$2_object_UID'($id#$0_counter_Counter(s))
      && $IsValid'u64'($value#$0_counter_Counter(s))
}
function {:inline} $IsEqual'$0_counter_Counter'(s1: $0_counter_Counter, s2: $0_counter_Counter): bool {
    s1 == s2
}
var $0_counter_Counter_$memory: $Memory $0_counter_Counter;

// fun counter::getCounter [verification] at ./sources/my_module.move:18:5+279
procedure {:timeLimit 40} $0_counter_getCounter$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: $2_tx_context_TxContext;
    var $t3: int;
    var $t4: int;
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $0_counter_Counter;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/my_module.move:18:5+1
    assume {:print "$at(3,365,366)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/my_module.move:18:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(13,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := read_ref($t0) at ./sources/my_module.move:20:41+3
    assume {:print "$at(3,482,485)"} true;
    $t2 := $Dereference($t0);

    // $t3 := tx_context::sender($t2) on_abort goto L2 with $t4 at ./sources/my_module.move:20:22+23
    call $t3 := $2_tx_context_sender($t2);
    if ($abort_flag) {
        assume {:print "$at(3,463,486)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[sender#1#0]($t3) at ./sources/my_module.move:20:13+6
    assume {:print "$track_local(13,0,1):", $t3} $t3 == $t3;

    // $t5 := object::new($t0) on_abort goto L2 with $t4 at ./sources/my_module.move:22:17+16
    assume {:print "$at(3,540,556)"} true;
    call $t5,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(3,540,556)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := 0 at ./sources/my_module.move:23:20+1
    assume {:print "$at(3,577,578)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := pack counter::Counter($t5, $t6) at ./sources/my_module.move:21:27+74
    assume {:print "$at(3,514,588)"} true;
    $t7 := $0_counter_Counter($t5, $t6);

    // transfer::transfer<counter::Counter>($t7, $t3) on_abort goto L2 with $t4 at ./sources/my_module.move:25:9+39
    assume {:print "$at(3,598,637)"} true;
    call $2_transfer_transfer'$0_counter_Counter'($t7, $t3);
    if ($abort_flag) {
        assume {:print "$at(3,598,637)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[ctx]($t0) at ./sources/my_module.move:25:48+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(13,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/my_module.move:26:5+1
    assume {:print "$at(3,643,644)"} true;
L1:

    // return () at ./sources/my_module.move:26:5+1
    assume {:print "$at(3,643,644)"} true;
    $ret0 := $t0;
    return;

    // label L2 at ./sources/my_module.move:26:5+1
L2:

    // abort($t4) at ./sources/my_module.move:26:5+1
    assume {:print "$at(3,643,644)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun counter::incr [verification] at ./sources/my_module.move:29:5+95
procedure {:timeLimit 40} $0_counter_incr$verify(_$t0: $Mutation ($0_counter_Counter)) returns ($ret0: $Mutation ($0_counter_Counter))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (int);
    var $t0: $Mutation ($0_counter_Counter);
    var $temp_0'$0_counter_Counter': $0_counter_Counter;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/my_module.move:29:5+1
    assume {:print "$at(3,689,690)"} true;
    assume $IsValid'$0_counter_Counter'($Dereference($t0));

    // trace_local[counter]($t0) at ./sources/my_module.move:29:5+1
    $temp_0'$0_counter_Counter' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$0_counter_Counter'} $temp_0'$0_counter_Counter' == $temp_0'$0_counter_Counter';

    // $t1 := get_field<counter::Counter>.value($t0) at ./sources/my_module.move:30:25+13
    assume {:print "$at(3,760,773)"} true;
    $t1 := $value#$0_counter_Counter($Dereference($t0));

    // $t2 := 1 at ./sources/my_module.move:30:41+1
    $t2 := 1;
    assume $IsValid'u64'($t2);

    // $t3 := +($t1, $t2) on_abort goto L2 with $t4 at ./sources/my_module.move:30:39+1
    call $t3 := $AddU64($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,774,775)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<counter::Counter>.value($t0) at ./sources/my_module.move:30:9+13
    $t5 := $ChildMutation($t0, 1, $value#$0_counter_Counter($Dereference($t0)));

    // write_ref($t5, $t3) at ./sources/my_module.move:30:9+33
    $t5 := $UpdateMutation($t5, $t3);

    // write_back[Reference($t0).value (u64)]($t5) at ./sources/my_module.move:30:9+33
    $t0 := $UpdateMutation($t0, $Update'$0_counter_Counter'_value($Dereference($t0), $Dereference($t5)));

    // trace_local[counter]($t0) at ./sources/my_module.move:30:9+33
    $temp_0'$0_counter_Counter' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$0_counter_Counter'} $temp_0'$0_counter_Counter' == $temp_0'$0_counter_Counter';

    // trace_local[counter]($t0) at ./sources/my_module.move:30:42+1
    $temp_0'$0_counter_Counter' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$0_counter_Counter'} $temp_0'$0_counter_Counter' == $temp_0'$0_counter_Counter';

    // label L1 at ./sources/my_module.move:31:5+1
    assume {:print "$at(3,783,784)"} true;
L1:

    // return () at ./sources/my_module.move:31:5+1
    assume {:print "$at(3,783,784)"} true;
    $ret0 := $t0;
    return;

    // label L2 at ./sources/my_module.move:31:5+1
L2:

    // abort($t4) at ./sources/my_module.move:31:5+1
    assume {:print "$at(3,783,784)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct game::Board at ./sources/chess.move:15:5+65
type {:datatype} $0_game_Board;
function {:constructor} $0_game_Board($board: Vec (Vec ($0_game_Node))): $0_game_Board;
function {:inline} $Update'$0_game_Board'_board(s: $0_game_Board, x: Vec (Vec ($0_game_Node))): $0_game_Board {
    $0_game_Board(x)
}
function $IsValid'$0_game_Board'(s: $0_game_Board): bool {
    $IsValid'vec'vec'$0_game_Node'''($board#$0_game_Board(s))
}
function {:inline} $IsEqual'$0_game_Board'(s1: $0_game_Board, s2: $0_game_Board): bool {
    $IsEqual'vec'vec'$0_game_Node'''($board#$0_game_Board(s1), $board#$0_game_Board(s2))}

// struct game::ChessEvent at ./sources/chess.move:38:5+70
type {:datatype} $0_game_ChessEvent;
function {:constructor} $0_game_ChessEvent($name: $1_string_String): $0_game_ChessEvent;
function {:inline} $Update'$0_game_ChessEvent'_name(s: $0_game_ChessEvent, x: $1_string_String): $0_game_ChessEvent {
    $0_game_ChessEvent(x)
}
function $IsValid'$0_game_ChessEvent'(s: $0_game_ChessEvent): bool {
    $IsValid'$1_string_String'($name#$0_game_ChessEvent(s))
}
function {:inline} $IsEqual'$0_game_ChessEvent'(s1: $0_game_ChessEvent, s2: $0_game_ChessEvent): bool {
    $IsEqual'$1_string_String'($name#$0_game_ChessEvent(s1), $name#$0_game_ChessEvent(s2))}

// struct game::Game at ./sources/chess.move:26:5+179
type {:datatype} $0_game_Game;
function {:constructor} $0_game_Game($id: $2_object_UID, $admin: int, $chessBoard: $0_game_Board, $stepsCount: int, $player1: int, $player2: int): $0_game_Game;
function {:inline} $Update'$0_game_Game'_id(s: $0_game_Game, x: $2_object_UID): $0_game_Game {
    $0_game_Game(x, $admin#$0_game_Game(s), $chessBoard#$0_game_Game(s), $stepsCount#$0_game_Game(s), $player1#$0_game_Game(s), $player2#$0_game_Game(s))
}
function {:inline} $Update'$0_game_Game'_admin(s: $0_game_Game, x: int): $0_game_Game {
    $0_game_Game($id#$0_game_Game(s), x, $chessBoard#$0_game_Game(s), $stepsCount#$0_game_Game(s), $player1#$0_game_Game(s), $player2#$0_game_Game(s))
}
function {:inline} $Update'$0_game_Game'_chessBoard(s: $0_game_Game, x: $0_game_Board): $0_game_Game {
    $0_game_Game($id#$0_game_Game(s), $admin#$0_game_Game(s), x, $stepsCount#$0_game_Game(s), $player1#$0_game_Game(s), $player2#$0_game_Game(s))
}
function {:inline} $Update'$0_game_Game'_stepsCount(s: $0_game_Game, x: int): $0_game_Game {
    $0_game_Game($id#$0_game_Game(s), $admin#$0_game_Game(s), $chessBoard#$0_game_Game(s), x, $player1#$0_game_Game(s), $player2#$0_game_Game(s))
}
function {:inline} $Update'$0_game_Game'_player1(s: $0_game_Game, x: int): $0_game_Game {
    $0_game_Game($id#$0_game_Game(s), $admin#$0_game_Game(s), $chessBoard#$0_game_Game(s), $stepsCount#$0_game_Game(s), x, $player2#$0_game_Game(s))
}
function {:inline} $Update'$0_game_Game'_player2(s: $0_game_Game, x: int): $0_game_Game {
    $0_game_Game($id#$0_game_Game(s), $admin#$0_game_Game(s), $chessBoard#$0_game_Game(s), $stepsCount#$0_game_Game(s), $player1#$0_game_Game(s), x)
}
function $IsValid'$0_game_Game'(s: $0_game_Game): bool {
    $IsValid'$2_object_UID'($id#$0_game_Game(s))
      && $IsValid'address'($admin#$0_game_Game(s))
      && $IsValid'$0_game_Board'($chessBoard#$0_game_Game(s))
      && $IsValid'u64'($stepsCount#$0_game_Game(s))
      && $IsValid'address'($player1#$0_game_Game(s))
      && $IsValid'address'($player2#$0_game_Game(s))
}
function {:inline} $IsEqual'$0_game_Game'(s1: $0_game_Game, s2: $0_game_Game): bool {
    $IsEqual'$2_object_UID'($id#$0_game_Game(s1), $id#$0_game_Game(s2))
    && $IsEqual'address'($admin#$0_game_Game(s1), $admin#$0_game_Game(s2))
    && $IsEqual'$0_game_Board'($chessBoard#$0_game_Game(s1), $chessBoard#$0_game_Game(s2))
    && $IsEqual'u64'($stepsCount#$0_game_Game(s1), $stepsCount#$0_game_Game(s2))
    && $IsEqual'address'($player1#$0_game_Game(s1), $player1#$0_game_Game(s2))
    && $IsEqual'address'($player2#$0_game_Game(s1), $player2#$0_game_Game(s2))}
var $0_game_Game_$memory: $Memory $0_game_Game;

// struct game::Node at ./sources/chess.move:34:5+47
type {:datatype} $0_game_Node;
function {:constructor} $0_game_Node($value: int): $0_game_Node;
function {:inline} $Update'$0_game_Node'_value(s: $0_game_Node, x: int): $0_game_Node {
    $0_game_Node(x)
}
function $IsValid'$0_game_Node'(s: $0_game_Node): bool {
    $IsValid'u8'($value#$0_game_Node(s))
}
function {:inline} $IsEqual'$0_game_Node'(s1: $0_game_Node, s2: $0_game_Node): bool {
    s1 == s2
}

// fun game::Horizontal [baseline] at ./sources/chess.move:149:5+1239
procedure {:inline 1} $0_game_Horizontal(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($0_game_Board);
    var $t7: $Mutation (Vec (Vec ($0_game_Node)));
    var $t8: $Mutation (Vec ($0_game_Node));
    var $t9: int;
    var $t10: $Mutation ($0_game_Node);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation ($0_game_Board);
    var $t31: $Mutation (Vec (Vec ($0_game_Node)));
    var $t32: $Mutation (Vec ($0_game_Node));
    var $t33: $Mutation ($0_game_Node);
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: $Mutation ($0_game_Board);
    var $t46: $Mutation (Vec (Vec ($0_game_Node)));
    var $t47: $Mutation (Vec ($0_game_Node));
    var $t48: $Mutation ($0_game_Node);
    var $t49: int;
    var $t50: bool;
    var $t51: bool;
    var $t52: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[a]($t0) at ./sources/chess.move:149:5+1
    assume {:print "$at(2,4031,4032)"} true;
    assume {:print "$track_local(16,5,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:149:5+1
    assume {:print "$track_local(16,5,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:149:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t6 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:150:43+15
    assume {:print "$at(2,4127,4142)"} true;
    $t6 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t7 := borrow_field<game::Board>.board($t6) at ./sources/chess.move:150:38+26
    $t7 := $ChildMutation($t6, 0, $board#$0_game_Board($Dereference($t6)));

    // $t8 := vector::borrow_mut<vector<game::Node>>($t7, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:150:19+49
    call $t8,$t7 := $1_vector_borrow_mut'vec'$0_game_Node''($t7, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4103,4152)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t10 := vector::borrow_mut<game::Node>($t8, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:151:20+26
    assume {:print "$at(2,4173,4199)"} true;
    call $t10,$t8 := $1_vector_borrow_mut'$0_game_Node'($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,4173,4199)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t11 := get_field<game::Node>.value($t10) at ./sources/chess.move:152:18+10
    assume {:print "$at(2,4218,4228)"} true;
    $t11 := $value#$0_game_Node($Dereference($t10));

    // trace_local[game]($t2) at ./sources/chess.move:152:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t11) at ./sources/chess.move:152:13+2
    assume {:print "$track_local(16,5,5):", $t11} $t11 == $t11;

    // $t12 := 0 at ./sources/chess.move:153:19+1
    assume {:print "$at(2,4248,4249)"} true;
    $t12 := 0;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t11, $t12) at ./sources/chess.move:153:16+2
    $t13 := $IsEqual'u8'($t11, $t12);

    // if ($t13) goto L1 else goto L0 at ./sources/chess.move:153:9+49
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:154:13+12
    assume {:print "$at(2,4265,4277)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:154:13+12
    assume {:print "$at(2,4265,4277)"} true;

    // $t14 := false at ./sources/chess.move:154:20+5
    $t14 := false;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ./sources/chess.move:154:13+12
    assume {:print "$track_return(16,5,0):", $t14} $t14 == $t14;

    // trace_local[game]($t2) at ./sources/chess.move:154:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t14) at ./sources/chess.move:154:13+12
    $t15 := $t14;

    // goto L22 at ./sources/chess.move:154:13+12
    goto L22;

    // label L0 at ./sources/chess.move:157:28+1
    assume {:print "$at(2,4317,4318)"} true;
L0:

    // $t16 := 1 at ./sources/chess.move:157:28+1
    assume {:print "$at(2,4317,4318)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // trace_local[length#1#0]($t16) at ./sources/chess.move:157:13+6
    assume {:print "$track_local(16,5,4):", $t16} $t16 == $t16;

    // $t17 := 1 at ./sources/chess.move:158:23+1
    assume {:print "$at(2,4342,4343)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // trace_local[i#1#0]($t17) at ./sources/chess.move:158:13+1
    assume {:print "$track_local(16,5,3):", $t17} $t17 == $t17;

    // label L9 at ./sources/chess.move:159:16+1
    assume {:print "$at(2,4360,4361)"} true;
L9:

    // $t3 := havoc[val]() at ./sources/chess.move:159:16+1
    assume {:print "$at(2,4360,4361)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t4);

    // $t18 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:159:16+1
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:159:16+1
    assume $IsValid'$0_game_Board'($Dereference($t30));

    // $t31 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:159:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t31));

    // $t32 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:159:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t32));

    // $t33 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:159:16+1
    assume $IsValid'$0_game_Node'($Dereference($t33));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:159:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,5,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:159:16+1
    assume {:print "$track_local(16,5,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:159:16+1
    assume !$abort_flag;

    // $t18 := 4 at ./sources/chess.move:159:21+1
    $t18 := 4;
    assume $IsValid'u64'($t18);

    // $t19 := <=($t3, $t18) at ./sources/chess.move:159:18+2
    call $t19 := $Le($t3, $t18);

    // if ($t19) goto L3 else goto L2 at ./sources/chess.move:159:9+410
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:159:9+410
L3:

    // label L4 at ./sources/chess.move:160:17+1
    assume {:print "$at(2,4386,4387)"} true;
L4:

    // $t20 := +($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:160:19+1
    assume {:print "$at(2,4388,4389)"} true;
    call $t20 := $AddU64($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4388,4389)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t21 := 20 at ./sources/chess.move:160:25+14
    $t21 := 20;
    assume $IsValid'u64'($t21);

    // $t22 := <($t20, $t21) at ./sources/chess.move:160:23+1
    call $t22 := $Lt($t20, $t21);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:160:13+371
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:161:51+4
    assume {:print "$at(2,4462,4466)"} true;
L6:

    // $t30 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:161:51+15
    assume {:print "$at(2,4462,4477)"} true;
    $t30 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t31 := borrow_field<game::Board>.board($t30) at ./sources/chess.move:161:46+26
    $t31 := $ChildMutation($t30, 0, $board#$0_game_Board($Dereference($t30)));

    // $t32 := vector::borrow_mut<vector<game::Node>>($t31, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:161:27+49
    call $t32,$t31 := $1_vector_borrow_mut'vec'$0_game_Node''($t31, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4438,4487)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t23 := +($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:162:54+1
    assume {:print "$at(2,4542,4543)"} true;
    call $t23 := $AddU64($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4542,4543)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t33 := vector::borrow_mut<game::Node>($t32, $t23) on_abort goto L23 with $t9 at ./sources/chess.move:162:28+30
    call $t33,$t32 := $1_vector_borrow_mut'$0_game_Node'($t32, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,4516,4546)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t24 := get_field<game::Node>.value($t33) at ./sources/chess.move:163:21+10
    assume {:print "$at(2,4568,4578)"} true;
    $t24 := $value#$0_game_Node($Dereference($t33));

    // trace_local[game]($t2) at ./sources/chess.move:163:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t25 := !=($t24, $t11) at ./sources/chess.move:163:32+2
    $t25 := !$IsEqual'u8'($t24, $t11);

    // if ($t25) goto L8 else goto L24 at ./sources/chess.move:163:17+67
    if ($t25) { goto L8; } else { goto L24; }

    // label L8 at ./sources/chess.move:164:21+5
    assume {:print "$at(2,4608,4613)"} true;
L8:

    // goto L2 at ./sources/chess.move:164:21+5
    assume {:print "$at(2,4608,4613)"} true;
    goto L2;

    // label L5 at ./sources/chess.move:169:17+5
    assume {:print "$at(2,4734,4739)"} true;
L5:

    // goto L2 at ./sources/chess.move:169:17+5
    assume {:print "$at(2,4734,4739)"} true;
    goto L2;

    // label L7 at ./sources/chess.move:166:21+1
    assume {:print "$at(2,4653,4654)"} true;
L7:

    // $t26 := 1 at ./sources/chess.move:166:25+1
    assume {:print "$at(2,4657,4658)"} true;
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := +($t3, $t26) on_abort goto L23 with $t9 at ./sources/chess.move:166:23+1
    call $t27 := $AddU64($t3, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,4655,4656)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t27) at ./sources/chess.move:166:17+1
    assume {:print "$track_local(16,5,3):", $t27} $t27 == $t27;

    // $t28 := 1 at ./sources/chess.move:167:35+1
    assume {:print "$at(2,4694,4695)"} true;
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t4, $t28) on_abort goto L23 with $t9 at ./sources/chess.move:167:33+1
    call $t29 := $AddU64($t4, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,4692,4693)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t29) at ./sources/chess.move:167:17+6
    assume {:print "$track_local(16,5,4):", $t29} $t29 == $t29;

    // goto L20 at ./sources/chess.move:160:13+371
    assume {:print "$at(2,4382,4753)"} true;
    goto L20;

    // label L2 at ./sources/chess.move:173:13+1
    assume {:print "$at(2,4778,4779)"} true;
L2:

    // $t34 := 1 at ./sources/chess.move:173:13+1
    assume {:print "$at(2,4778,4779)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // trace_local[i#1#0]($t34) at ./sources/chess.move:173:9+1
    assume {:print "$track_local(16,5,3):", $t34} $t34 == $t34;

    // label L17 at ./sources/chess.move:174:16+1
    assume {:print "$at(2,4796,4797)"} true;
L17:

    // $t3 := havoc[val]() at ./sources/chess.move:174:16+1
    assume {:print "$at(2,4796,4797)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t4);

    // $t35 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t35);

    // $t36 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t36);

    // $t37 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t37);

    // $t38 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t38);

    // $t39 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:174:16+1
    assume $IsValid'u8'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t44);

    // $t45 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:174:16+1
    assume $IsValid'$0_game_Board'($Dereference($t45));

    // $t46 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:174:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t46));

    // $t47 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:174:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t47));

    // $t48 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:174:16+1
    assume $IsValid'$0_game_Node'($Dereference($t48));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:174:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,5,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:174:16+1
    assume {:print "$track_local(16,5,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:174:16+1
    assume !$abort_flag;

    // $t35 := 4 at ./sources/chess.move:174:21+1
    $t35 := 4;
    assume $IsValid'u64'($t35);

    // $t36 := <=($t3, $t35) at ./sources/chess.move:174:18+2
    call $t36 := $Le($t3, $t35);

    // if ($t36) goto L11 else goto L10 at ./sources/chess.move:174:9+397
    if ($t36) { goto L11; } else { goto L10; }

    // label L11 at ./sources/chess.move:174:9+397
L11:

    // label L12 at ./sources/chess.move:175:17+1
    assume {:print "$at(2,4822,4823)"} true;
L12:

    // $t37 := >=($t1, $t3) at ./sources/chess.move:175:20+2
    assume {:print "$at(2,4825,4827)"} true;
    call $t37 := $Ge($t1, $t3);

    // if ($t37) goto L14 else goto L13 at ./sources/chess.move:175:13+358
    if ($t37) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:176:51+4
    assume {:print "$at(2,4884,4888)"} true;
L14:

    // $t45 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:176:51+15
    assume {:print "$at(2,4884,4899)"} true;
    $t45 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t46 := borrow_field<game::Board>.board($t45) at ./sources/chess.move:176:46+26
    $t46 := $ChildMutation($t45, 0, $board#$0_game_Board($Dereference($t45)));

    // $t47 := vector::borrow_mut<vector<game::Node>>($t46, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:176:27+49
    call $t47,$t46 := $1_vector_borrow_mut'vec'$0_game_Node''($t46, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4860,4909)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t38 := -($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:177:54+1
    assume {:print "$at(2,4964,4965)"} true;
    call $t38 := $Sub($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4964,4965)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t48 := vector::borrow_mut<game::Node>($t47, $t38) on_abort goto L23 with $t9 at ./sources/chess.move:177:28+30
    call $t48,$t47 := $1_vector_borrow_mut'$0_game_Node'($t47, $t38);
    if ($abort_flag) {
        assume {:print "$at(2,4938,4968)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t39 := get_field<game::Node>.value($t48) at ./sources/chess.move:179:21+10
    assume {:print "$at(2,4991,5001)"} true;
    $t39 := $value#$0_game_Node($Dereference($t48));

    // trace_local[game]($t2) at ./sources/chess.move:179:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t40 := !=($t39, $t11) at ./sources/chess.move:179:32+2
    $t40 := !$IsEqual'u8'($t39, $t11);

    // if ($t40) goto L16 else goto L25 at ./sources/chess.move:179:17+67
    if ($t40) { goto L16; } else { goto L25; }

    // label L16 at ./sources/chess.move:180:21+5
    assume {:print "$at(2,5031,5036)"} true;
L16:

    // destroy($t2) at ./sources/chess.move:180:21+5
    assume {:print "$at(2,5031,5036)"} true;

    // goto L10 at ./sources/chess.move:180:21+5
    goto L10;

    // label L13 at ./sources/chess.move:185:17+5
    assume {:print "$at(2,5157,5162)"} true;
L13:

    // destroy($t2) at ./sources/chess.move:185:17+5
    assume {:print "$at(2,5157,5162)"} true;

    // goto L10 at ./sources/chess.move:185:17+5
    goto L10;

    // label L15 at ./sources/chess.move:182:21+1
    assume {:print "$at(2,5076,5077)"} true;
L15:

    // $t41 := 1 at ./sources/chess.move:182:25+1
    assume {:print "$at(2,5080,5081)"} true;
    $t41 := 1;
    assume $IsValid'u64'($t41);

    // $t42 := +($t3, $t41) on_abort goto L23 with $t9 at ./sources/chess.move:182:23+1
    call $t42 := $AddU64($t3, $t41);
    if ($abort_flag) {
        assume {:print "$at(2,5078,5079)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t42) at ./sources/chess.move:182:17+1
    assume {:print "$track_local(16,5,3):", $t42} $t42 == $t42;

    // $t43 := 1 at ./sources/chess.move:183:35+1
    assume {:print "$at(2,5117,5118)"} true;
    $t43 := 1;
    assume $IsValid'u64'($t43);

    // $t44 := +($t4, $t43) on_abort goto L23 with $t9 at ./sources/chess.move:183:33+1
    call $t44 := $AddU64($t4, $t43);
    if ($abort_flag) {
        assume {:print "$at(2,5115,5116)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t44) at ./sources/chess.move:183:17+6
    assume {:print "$track_local(16,5,4):", $t44} $t44 == $t44;

    // goto L21 at ./sources/chess.move:175:13+358
    assume {:print "$at(2,4818,5176)"} true;
    goto L21;

    // label L10 at ./sources/chess.move:189:13+6
    assume {:print "$at(2,5201,5207)"} true;
L10:

    // $t49 := 5 at ./sources/chess.move:189:23+1
    assume {:print "$at(2,5211,5212)"} true;
    $t49 := 5;
    assume $IsValid'u64'($t49);

    // $t50 := >=($t4, $t49) at ./sources/chess.move:189:20+2
    call $t50 := $Ge($t4, $t49);

    // if ($t50) goto L19 else goto L18 at ./sources/chess.move:189:9+52
    if ($t50) { goto L19; } else { goto L18; }

    // label L19 at ./sources/chess.move:190:20+4
    assume {:print "$at(2,5235,5239)"} true;
L19:

    // $t51 := true at ./sources/chess.move:190:20+4
    assume {:print "$at(2,5235,5239)"} true;
    $t51 := true;
    assume $IsValid'bool'($t51);

    // trace_return[0]($t51) at ./sources/chess.move:190:13+11
    assume {:print "$track_return(16,5,0):", $t51} $t51 == $t51;

    // trace_local[game]($t2) at ./sources/chess.move:190:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t51) at ./sources/chess.move:190:13+11
    $t15 := $t51;

    // goto L22 at ./sources/chess.move:190:13+11
    goto L22;

    // label L18 at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
L18:

    // $t52 := false at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    $t52 := false;
    assume $IsValid'bool'($t52);

    // trace_return[0]($t52) at ./sources/chess.move:192:9+5
    assume {:print "$track_return(16,5,0):", $t52} $t52 == $t52;

    // trace_local[game]($t2) at ./sources/chess.move:192:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t52) at ./sources/chess.move:192:9+5
    $t15 := $t52;

    // goto L22 at ./sources/chess.move:192:9+5
    goto L22;

    // label L20 at ./sources/chess.move:192:9+5
    // Loop invariant checking block for the loop started with header: L9
L20:

    // stop() at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    assume false;
    return;

    // label L21 at ./sources/chess.move:192:9+5
    // Loop invariant checking block for the loop started with header: L17
L21:

    // stop() at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    assume false;
    return;

    // label L22 at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
L22:

    // return $t15 at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
    $ret0 := $t15;
    $ret1 := $t2;
    return;

    // label L23 at ./sources/chess.move:193:5+1
L23:

    // abort($t9) at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

    // label L24 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L24:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L7 at <internal>:1:1+10
    goto L7;

    // label L25 at <internal>:1:1+10
L25:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L15 at <internal>:1:1+10
    goto L15;

}

// fun game::Horizontal [verification] at ./sources/chess.move:149:5+1239
procedure {:timeLimit 40} $0_game_Horizontal$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($0_game_Board);
    var $t7: $Mutation (Vec (Vec ($0_game_Node)));
    var $t8: $Mutation (Vec ($0_game_Node));
    var $t9: int;
    var $t10: $Mutation ($0_game_Node);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation ($0_game_Board);
    var $t31: $Mutation (Vec (Vec ($0_game_Node)));
    var $t32: $Mutation (Vec ($0_game_Node));
    var $t33: $Mutation ($0_game_Node);
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: $Mutation ($0_game_Board);
    var $t46: $Mutation (Vec (Vec ($0_game_Node)));
    var $t47: $Mutation (Vec ($0_game_Node));
    var $t48: $Mutation ($0_game_Node);
    var $t49: int;
    var $t50: bool;
    var $t51: bool;
    var $t52: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:149:5+1
    assume {:print "$at(2,4031,4032)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/chess.move:149:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:149:5+1
    assume $IsValid'$0_game_Game'($Dereference($t2));

    // trace_local[a]($t0) at ./sources/chess.move:149:5+1
    assume {:print "$track_local(16,5,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:149:5+1
    assume {:print "$track_local(16,5,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:149:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t6 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:150:43+15
    assume {:print "$at(2,4127,4142)"} true;
    $t6 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t7 := borrow_field<game::Board>.board($t6) at ./sources/chess.move:150:38+26
    $t7 := $ChildMutation($t6, 0, $board#$0_game_Board($Dereference($t6)));

    // $t8 := vector::borrow_mut<vector<game::Node>>($t7, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:150:19+49
    call $t8,$t7 := $1_vector_borrow_mut'vec'$0_game_Node''($t7, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4103,4152)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t10 := vector::borrow_mut<game::Node>($t8, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:151:20+26
    assume {:print "$at(2,4173,4199)"} true;
    call $t10,$t8 := $1_vector_borrow_mut'$0_game_Node'($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,4173,4199)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t11 := get_field<game::Node>.value($t10) at ./sources/chess.move:152:18+10
    assume {:print "$at(2,4218,4228)"} true;
    $t11 := $value#$0_game_Node($Dereference($t10));

    // trace_local[game]($t2) at ./sources/chess.move:152:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t11) at ./sources/chess.move:152:13+2
    assume {:print "$track_local(16,5,5):", $t11} $t11 == $t11;

    // $t12 := 0 at ./sources/chess.move:153:19+1
    assume {:print "$at(2,4248,4249)"} true;
    $t12 := 0;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t11, $t12) at ./sources/chess.move:153:16+2
    $t13 := $IsEqual'u8'($t11, $t12);

    // if ($t13) goto L1 else goto L0 at ./sources/chess.move:153:9+49
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:154:13+12
    assume {:print "$at(2,4265,4277)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:154:13+12
    assume {:print "$at(2,4265,4277)"} true;

    // $t14 := false at ./sources/chess.move:154:20+5
    $t14 := false;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ./sources/chess.move:154:13+12
    assume {:print "$track_return(16,5,0):", $t14} $t14 == $t14;

    // trace_local[game]($t2) at ./sources/chess.move:154:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t14) at ./sources/chess.move:154:13+12
    $t15 := $t14;

    // goto L22 at ./sources/chess.move:154:13+12
    goto L22;

    // label L0 at ./sources/chess.move:157:28+1
    assume {:print "$at(2,4317,4318)"} true;
L0:

    // $t16 := 1 at ./sources/chess.move:157:28+1
    assume {:print "$at(2,4317,4318)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // trace_local[length#1#0]($t16) at ./sources/chess.move:157:13+6
    assume {:print "$track_local(16,5,4):", $t16} $t16 == $t16;

    // $t17 := 1 at ./sources/chess.move:158:23+1
    assume {:print "$at(2,4342,4343)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // trace_local[i#1#0]($t17) at ./sources/chess.move:158:13+1
    assume {:print "$track_local(16,5,3):", $t17} $t17 == $t17;

    // label L9 at ./sources/chess.move:159:16+1
    assume {:print "$at(2,4360,4361)"} true;
L9:

    // $t3 := havoc[val]() at ./sources/chess.move:159:16+1
    assume {:print "$at(2,4360,4361)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t4);

    // $t18 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:159:16+1
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:159:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:159:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:159:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:159:16+1
    assume $IsValid'$0_game_Board'($Dereference($t30));

    // $t31 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:159:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t31));

    // $t32 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:159:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t32));

    // $t33 := havoc[mut_all]() at ./sources/chess.move:159:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:159:16+1
    assume $IsValid'$0_game_Node'($Dereference($t33));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:159:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,5,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:159:16+1
    assume {:print "$track_local(16,5,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:159:16+1
    assume !$abort_flag;

    // $t18 := 4 at ./sources/chess.move:159:21+1
    $t18 := 4;
    assume $IsValid'u64'($t18);

    // $t19 := <=($t3, $t18) at ./sources/chess.move:159:18+2
    call $t19 := $Le($t3, $t18);

    // if ($t19) goto L3 else goto L2 at ./sources/chess.move:159:9+410
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:159:9+410
L3:

    // label L4 at ./sources/chess.move:160:17+1
    assume {:print "$at(2,4386,4387)"} true;
L4:

    // $t20 := +($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:160:19+1
    assume {:print "$at(2,4388,4389)"} true;
    call $t20 := $AddU64($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4388,4389)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t21 := 20 at ./sources/chess.move:160:25+14
    $t21 := 20;
    assume $IsValid'u64'($t21);

    // $t22 := <($t20, $t21) at ./sources/chess.move:160:23+1
    call $t22 := $Lt($t20, $t21);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:160:13+371
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:161:51+4
    assume {:print "$at(2,4462,4466)"} true;
L6:

    // $t30 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:161:51+15
    assume {:print "$at(2,4462,4477)"} true;
    $t30 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t31 := borrow_field<game::Board>.board($t30) at ./sources/chess.move:161:46+26
    $t31 := $ChildMutation($t30, 0, $board#$0_game_Board($Dereference($t30)));

    // $t32 := vector::borrow_mut<vector<game::Node>>($t31, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:161:27+49
    call $t32,$t31 := $1_vector_borrow_mut'vec'$0_game_Node''($t31, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4438,4487)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t23 := +($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:162:54+1
    assume {:print "$at(2,4542,4543)"} true;
    call $t23 := $AddU64($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4542,4543)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t33 := vector::borrow_mut<game::Node>($t32, $t23) on_abort goto L23 with $t9 at ./sources/chess.move:162:28+30
    call $t33,$t32 := $1_vector_borrow_mut'$0_game_Node'($t32, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,4516,4546)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t24 := get_field<game::Node>.value($t33) at ./sources/chess.move:163:21+10
    assume {:print "$at(2,4568,4578)"} true;
    $t24 := $value#$0_game_Node($Dereference($t33));

    // trace_local[game]($t2) at ./sources/chess.move:163:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t25 := !=($t24, $t11) at ./sources/chess.move:163:32+2
    $t25 := !$IsEqual'u8'($t24, $t11);

    // if ($t25) goto L8 else goto L24 at ./sources/chess.move:163:17+67
    if ($t25) { goto L8; } else { goto L24; }

    // label L8 at ./sources/chess.move:164:21+5
    assume {:print "$at(2,4608,4613)"} true;
L8:

    // goto L2 at ./sources/chess.move:164:21+5
    assume {:print "$at(2,4608,4613)"} true;
    goto L2;

    // label L5 at ./sources/chess.move:169:17+5
    assume {:print "$at(2,4734,4739)"} true;
L5:

    // goto L2 at ./sources/chess.move:169:17+5
    assume {:print "$at(2,4734,4739)"} true;
    goto L2;

    // label L7 at ./sources/chess.move:166:21+1
    assume {:print "$at(2,4653,4654)"} true;
L7:

    // $t26 := 1 at ./sources/chess.move:166:25+1
    assume {:print "$at(2,4657,4658)"} true;
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := +($t3, $t26) on_abort goto L23 with $t9 at ./sources/chess.move:166:23+1
    call $t27 := $AddU64($t3, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,4655,4656)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t27) at ./sources/chess.move:166:17+1
    assume {:print "$track_local(16,5,3):", $t27} $t27 == $t27;

    // $t28 := 1 at ./sources/chess.move:167:35+1
    assume {:print "$at(2,4694,4695)"} true;
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t4, $t28) on_abort goto L23 with $t9 at ./sources/chess.move:167:33+1
    call $t29 := $AddU64($t4, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,4692,4693)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t29) at ./sources/chess.move:167:17+6
    assume {:print "$track_local(16,5,4):", $t29} $t29 == $t29;

    // goto L20 at ./sources/chess.move:160:13+371
    assume {:print "$at(2,4382,4753)"} true;
    goto L20;

    // label L2 at ./sources/chess.move:173:13+1
    assume {:print "$at(2,4778,4779)"} true;
L2:

    // $t34 := 1 at ./sources/chess.move:173:13+1
    assume {:print "$at(2,4778,4779)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // trace_local[i#1#0]($t34) at ./sources/chess.move:173:9+1
    assume {:print "$track_local(16,5,3):", $t34} $t34 == $t34;

    // label L17 at ./sources/chess.move:174:16+1
    assume {:print "$at(2,4796,4797)"} true;
L17:

    // $t3 := havoc[val]() at ./sources/chess.move:174:16+1
    assume {:print "$at(2,4796,4797)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t4);

    // $t35 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t35);

    // $t36 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t36);

    // $t37 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t37);

    // $t38 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t38);

    // $t39 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:174:16+1
    assume $IsValid'u8'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:174:16+1
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:174:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:174:16+1
    assume $IsValid'u64'($t44);

    // $t45 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:174:16+1
    assume $IsValid'$0_game_Board'($Dereference($t45));

    // $t46 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:174:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t46));

    // $t47 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:174:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t47));

    // $t48 := havoc[mut_all]() at ./sources/chess.move:174:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:174:16+1
    assume $IsValid'$0_game_Node'($Dereference($t48));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:174:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,5,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:174:16+1
    assume {:print "$track_local(16,5,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:174:16+1
    assume !$abort_flag;

    // $t35 := 4 at ./sources/chess.move:174:21+1
    $t35 := 4;
    assume $IsValid'u64'($t35);

    // $t36 := <=($t3, $t35) at ./sources/chess.move:174:18+2
    call $t36 := $Le($t3, $t35);

    // if ($t36) goto L11 else goto L10 at ./sources/chess.move:174:9+397
    if ($t36) { goto L11; } else { goto L10; }

    // label L11 at ./sources/chess.move:174:9+397
L11:

    // label L12 at ./sources/chess.move:175:17+1
    assume {:print "$at(2,4822,4823)"} true;
L12:

    // $t37 := >=($t1, $t3) at ./sources/chess.move:175:20+2
    assume {:print "$at(2,4825,4827)"} true;
    call $t37 := $Ge($t1, $t3);

    // if ($t37) goto L14 else goto L13 at ./sources/chess.move:175:13+358
    if ($t37) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:176:51+4
    assume {:print "$at(2,4884,4888)"} true;
L14:

    // $t45 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:176:51+15
    assume {:print "$at(2,4884,4899)"} true;
    $t45 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t46 := borrow_field<game::Board>.board($t45) at ./sources/chess.move:176:46+26
    $t46 := $ChildMutation($t45, 0, $board#$0_game_Board($Dereference($t45)));

    // $t47 := vector::borrow_mut<vector<game::Node>>($t46, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:176:27+49
    call $t47,$t46 := $1_vector_borrow_mut'vec'$0_game_Node''($t46, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,4860,4909)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t38 := -($t1, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:177:54+1
    assume {:print "$at(2,4964,4965)"} true;
    call $t38 := $Sub($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,4964,4965)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t48 := vector::borrow_mut<game::Node>($t47, $t38) on_abort goto L23 with $t9 at ./sources/chess.move:177:28+30
    call $t48,$t47 := $1_vector_borrow_mut'$0_game_Node'($t47, $t38);
    if ($abort_flag) {
        assume {:print "$at(2,4938,4968)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t39 := get_field<game::Node>.value($t48) at ./sources/chess.move:179:21+10
    assume {:print "$at(2,4991,5001)"} true;
    $t39 := $value#$0_game_Node($Dereference($t48));

    // trace_local[game]($t2) at ./sources/chess.move:179:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t40 := !=($t39, $t11) at ./sources/chess.move:179:32+2
    $t40 := !$IsEqual'u8'($t39, $t11);

    // if ($t40) goto L16 else goto L25 at ./sources/chess.move:179:17+67
    if ($t40) { goto L16; } else { goto L25; }

    // label L16 at ./sources/chess.move:180:21+5
    assume {:print "$at(2,5031,5036)"} true;
L16:

    // destroy($t2) at ./sources/chess.move:180:21+5
    assume {:print "$at(2,5031,5036)"} true;

    // goto L10 at ./sources/chess.move:180:21+5
    goto L10;

    // label L13 at ./sources/chess.move:185:17+5
    assume {:print "$at(2,5157,5162)"} true;
L13:

    // destroy($t2) at ./sources/chess.move:185:17+5
    assume {:print "$at(2,5157,5162)"} true;

    // goto L10 at ./sources/chess.move:185:17+5
    goto L10;

    // label L15 at ./sources/chess.move:182:21+1
    assume {:print "$at(2,5076,5077)"} true;
L15:

    // $t41 := 1 at ./sources/chess.move:182:25+1
    assume {:print "$at(2,5080,5081)"} true;
    $t41 := 1;
    assume $IsValid'u64'($t41);

    // $t42 := +($t3, $t41) on_abort goto L23 with $t9 at ./sources/chess.move:182:23+1
    call $t42 := $AddU64($t3, $t41);
    if ($abort_flag) {
        assume {:print "$at(2,5078,5079)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t42) at ./sources/chess.move:182:17+1
    assume {:print "$track_local(16,5,3):", $t42} $t42 == $t42;

    // $t43 := 1 at ./sources/chess.move:183:35+1
    assume {:print "$at(2,5117,5118)"} true;
    $t43 := 1;
    assume $IsValid'u64'($t43);

    // $t44 := +($t4, $t43) on_abort goto L23 with $t9 at ./sources/chess.move:183:33+1
    call $t44 := $AddU64($t4, $t43);
    if ($abort_flag) {
        assume {:print "$at(2,5115,5116)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,5):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t44) at ./sources/chess.move:183:17+6
    assume {:print "$track_local(16,5,4):", $t44} $t44 == $t44;

    // goto L21 at ./sources/chess.move:175:13+358
    assume {:print "$at(2,4818,5176)"} true;
    goto L21;

    // label L10 at ./sources/chess.move:189:13+6
    assume {:print "$at(2,5201,5207)"} true;
L10:

    // $t49 := 5 at ./sources/chess.move:189:23+1
    assume {:print "$at(2,5211,5212)"} true;
    $t49 := 5;
    assume $IsValid'u64'($t49);

    // $t50 := >=($t4, $t49) at ./sources/chess.move:189:20+2
    call $t50 := $Ge($t4, $t49);

    // if ($t50) goto L19 else goto L18 at ./sources/chess.move:189:9+52
    if ($t50) { goto L19; } else { goto L18; }

    // label L19 at ./sources/chess.move:190:20+4
    assume {:print "$at(2,5235,5239)"} true;
L19:

    // $t51 := true at ./sources/chess.move:190:20+4
    assume {:print "$at(2,5235,5239)"} true;
    $t51 := true;
    assume $IsValid'bool'($t51);

    // trace_return[0]($t51) at ./sources/chess.move:190:13+11
    assume {:print "$track_return(16,5,0):", $t51} $t51 == $t51;

    // trace_local[game]($t2) at ./sources/chess.move:190:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t51) at ./sources/chess.move:190:13+11
    $t15 := $t51;

    // goto L22 at ./sources/chess.move:190:13+11
    goto L22;

    // label L18 at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
L18:

    // $t52 := false at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    $t52 := false;
    assume $IsValid'bool'($t52);

    // trace_return[0]($t52) at ./sources/chess.move:192:9+5
    assume {:print "$track_return(16,5,0):", $t52} $t52 == $t52;

    // trace_local[game]($t2) at ./sources/chess.move:192:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,5,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t52) at ./sources/chess.move:192:9+5
    $t15 := $t52;

    // goto L22 at ./sources/chess.move:192:9+5
    goto L22;

    // label L20 at ./sources/chess.move:192:9+5
    // Loop invariant checking block for the loop started with header: L9
L20:

    // stop() at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    assume false;
    return;

    // label L21 at ./sources/chess.move:192:9+5
    // Loop invariant checking block for the loop started with header: L17
L21:

    // stop() at ./sources/chess.move:192:9+5
    assume {:print "$at(2,5259,5264)"} true;
    assume false;
    return;

    // label L22 at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
L22:

    // return $t15 at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
    $ret0 := $t15;
    $ret1 := $t2;
    return;

    // label L23 at ./sources/chess.move:193:5+1
L23:

    // abort($t9) at ./sources/chess.move:193:5+1
    assume {:print "$at(2,5269,5270)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

    // label L24 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L24:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L7 at <internal>:1:1+10
    goto L7;

    // label L25 at <internal>:1:1+10
L25:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L15 at <internal>:1:1+10
    goto L15;

}

// fun game::LeftTwill [baseline] at ./sources/chess.move:285:5+1280
procedure {:inline 1} $0_game_LeftTwill(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_game_Board);
    var $t9: $Mutation (Vec (Vec ($0_game_Node)));
    var $t10: $Mutation (Vec ($0_game_Node));
    var $t11: int;
    var $t12: $Mutation ($0_game_Node);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation ($0_game_Board);
    var $t35: $Mutation (Vec (Vec ($0_game_Node)));
    var $t36: $Mutation (Vec ($0_game_Node));
    var $t37: $Mutation ($0_game_Node);
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation ($0_game_Board);
    var $t54: $Mutation (Vec (Vec ($0_game_Node)));
    var $t55: $Mutation (Vec ($0_game_Node));
    var $t56: $Mutation ($0_game_Node);
    var $t57: int;
    var $t58: bool;
    var $t59: bool;
    var $t60: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[a]($t0) at ./sources/chess.move:285:5+1
    assume {:print "$at(2,7821,7822)"} true;
    assume {:print "$track_local(16,8,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:285:5+1
    assume {:print "$track_local(16,8,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:285:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t8 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:286:43+15
    assume {:print "$at(2,7916,7931)"} true;
    $t8 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t9 := borrow_field<game::Board>.board($t8) at ./sources/chess.move:286:38+26
    $t9 := $ChildMutation($t8, 0, $board#$0_game_Board($Dereference($t8)));

    // $t10 := vector::borrow_mut<vector<game::Node>>($t9, $t0) on_abort goto L29 with $t11 at ./sources/chess.move:286:19+49
    call $t10,$t9 := $1_vector_borrow_mut'vec'$0_game_Node''($t9, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,7892,7941)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t12 := vector::borrow_mut<game::Node>($t10, $t1) on_abort goto L29 with $t11 at ./sources/chess.move:287:20+26
    assume {:print "$at(2,7962,7988)"} true;
    call $t12,$t10 := $1_vector_borrow_mut'$0_game_Node'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,7962,7988)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t13 := get_field<game::Node>.value($t12) at ./sources/chess.move:288:18+10
    assume {:print "$at(2,8007,8017)"} true;
    $t13 := $value#$0_game_Node($Dereference($t12));

    // trace_local[game]($t2) at ./sources/chess.move:288:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t13) at ./sources/chess.move:288:13+2
    assume {:print "$track_local(16,8,7):", $t13} $t13 == $t13;

    // $t14 := 0 at ./sources/chess.move:289:19+1
    assume {:print "$at(2,8037,8038)"} true;
    $t14 := 0;
    assume $IsValid'u8'($t14);

    // $t15 := ==($t13, $t14) at ./sources/chess.move:289:16+2
    $t15 := $IsEqual'u8'($t13, $t14);

    // if ($t15) goto L1 else goto L0 at ./sources/chess.move:289:9+50
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:290:13+12
    assume {:print "$at(2,8055,8067)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:290:13+12
    assume {:print "$at(2,8055,8067)"} true;

    // $t16 := false at ./sources/chess.move:290:20+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at ./sources/chess.move:290:13+12
    assume {:print "$track_return(16,8,0):", $t16} $t16 == $t16;

    // trace_local[game]($t2) at ./sources/chess.move:290:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t16) at ./sources/chess.move:290:13+12
    $t17 := $t16;

    // goto L28 at ./sources/chess.move:290:13+12
    goto L28;

    // label L0 at ./sources/chess.move:293:23+1
    assume {:print "$at(2,8102,8103)"} true;
L0:

    // $t18 := 1 at ./sources/chess.move:293:23+1
    assume {:print "$at(2,8102,8103)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // trace_local[i#1#0]($t18) at ./sources/chess.move:293:13+1
    assume {:print "$track_local(16,8,5):", $t18} $t18 == $t18;

    // $t19 := 1 at ./sources/chess.move:294:28+1
    assume {:print "$at(2,8132,8133)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // trace_local[length#1#0]($t19) at ./sources/chess.move:294:13+6
    assume {:print "$track_local(16,8,6):", $t19} $t19 == $t19;

    // label L12 at ./sources/chess.move:295:16+1
    assume {:print "$at(2,8150,8151)"} true;
L12:

    // $t3 := havoc[val]() at ./sources/chess.move:295:16+1
    assume {:print "$at(2,8150,8151)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t3);

    // $t5 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t6);

    // $t20 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:295:16+1
    assume $IsValid'u8'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t29);

    // $t30 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t30);

    // $t31 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t31);

    // $t32 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t33);

    // $t34 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t34;

    // assume WellFormed($t34) at ./sources/chess.move:295:16+1
    assume $IsValid'$0_game_Board'($Dereference($t34));

    // $t35 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:295:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t35));

    // $t36 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:295:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t36));

    // $t37 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:295:16+1
    assume $IsValid'$0_game_Node'($Dereference($t37));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:295:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,8,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:295:16+1
    assume {:print "$track_local(16,8,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:295:16+1
    assume !$abort_flag;

    // $t20 := 4 at ./sources/chess.move:295:21+1
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := <=($t5, $t20) at ./sources/chess.move:295:18+2
    call $t21 := $Le($t5, $t20);

    // if ($t21) goto L3 else goto L2 at ./sources/chess.move:295:9+424
    if ($t21) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:295:9+424
L3:

    // label L4 at ./sources/chess.move:296:17+1
    assume {:print "$at(2,8176,8177)"} true;
L4:

    // $t22 := >=($t1, $t5) at ./sources/chess.move:296:19+2
    assume {:print "$at(2,8178,8180)"} true;
    call $t22 := $Ge($t1, $t5);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:296:17+32
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:296:27+1
L6:

    // $t23 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:296:29+1
    assume {:print "$at(2,8188,8189)"} true;
    call $t23 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8188,8189)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t24 := 20 at ./sources/chess.move:296:35+14
    $t24 := 20;
    assume $IsValid'u64'($t24);

    // $t3 := <($t23, $t24) at ./sources/chess.move:296:33+1
    call $t3 := $Lt($t23, $t24);

    // goto L7 at ./sources/chess.move:296:17+32
    goto L7;

    // label L5 at ./sources/chess.move:296:17+32
L5:

    // $t25 := false at ./sources/chess.move:296:17+32
    assume {:print "$at(2,8176,8208)"} true;
    $t25 := false;
    assume $IsValid'bool'($t25);

    // $t3 := $t25 at ./sources/chess.move:296:17+32
    $t3 := $t25;

    // label L7 at ./sources/chess.move:296:17+32
L7:

    // if ($t3) goto L9 else goto L8 at ./sources/chess.move:296:13+385
    assume {:print "$at(2,8172,8557)"} true;
    if ($t3) { goto L9; } else { goto L8; }

    // label L9 at ./sources/chess.move:297:51+4
    assume {:print "$at(2,8262,8266)"} true;
L9:

    // $t34 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:297:51+15
    assume {:print "$at(2,8262,8277)"} true;
    $t34 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t35 := borrow_field<game::Board>.board($t34) at ./sources/chess.move:297:46+26
    $t35 := $ChildMutation($t34, 0, $board#$0_game_Board($Dereference($t34)));

    // $t26 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:297:76+1
    call $t26 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8287,8288)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t36 := vector::borrow_mut<vector<game::Node>>($t35, $t26) on_abort goto L29 with $t11 at ./sources/chess.move:297:27+53
    call $t36,$t35 := $1_vector_borrow_mut'vec'$0_game_Node''($t35, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,8238,8291)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t27 := -($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:298:54+1
    assume {:print "$at(2,8346,8347)"} true;
    call $t27 := $Sub($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8346,8347)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t37 := vector::borrow_mut<game::Node>($t36, $t27) on_abort goto L29 with $t11 at ./sources/chess.move:298:28+30
    call $t37,$t36 := $1_vector_borrow_mut'$0_game_Node'($t36, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,8320,8350)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t28 := get_field<game::Node>.value($t37) at ./sources/chess.move:299:21+10
    assume {:print "$at(2,8372,8382)"} true;
    $t28 := $value#$0_game_Node($Dereference($t37));

    // trace_local[game]($t2) at ./sources/chess.move:299:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t29 := !=($t28, $t13) at ./sources/chess.move:299:32+2
    $t29 := !$IsEqual'u8'($t28, $t13);

    // if ($t29) goto L11 else goto L30 at ./sources/chess.move:299:17+67
    if ($t29) { goto L11; } else { goto L30; }

    // label L11 at ./sources/chess.move:300:21+5
    assume {:print "$at(2,8412,8417)"} true;
L11:

    // goto L2 at ./sources/chess.move:300:21+5
    assume {:print "$at(2,8412,8417)"} true;
    goto L2;

    // label L8 at ./sources/chess.move:305:17+5
    assume {:print "$at(2,8538,8543)"} true;
L8:

    // goto L2 at ./sources/chess.move:305:17+5
    assume {:print "$at(2,8538,8543)"} true;
    goto L2;

    // label L10 at ./sources/chess.move:302:21+1
    assume {:print "$at(2,8457,8458)"} true;
L10:

    // $t30 := 1 at ./sources/chess.move:302:25+1
    assume {:print "$at(2,8461,8462)"} true;
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := +($t5, $t30) on_abort goto L29 with $t11 at ./sources/chess.move:302:23+1
    call $t31 := $AddU64($t5, $t30);
    if ($abort_flag) {
        assume {:print "$at(2,8459,8460)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t31) at ./sources/chess.move:302:17+1
    assume {:print "$track_local(16,8,5):", $t31} $t31 == $t31;

    // $t32 := 1 at ./sources/chess.move:303:35+1
    assume {:print "$at(2,8498,8499)"} true;
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // $t33 := +($t6, $t32) on_abort goto L29 with $t11 at ./sources/chess.move:303:33+1
    call $t33 := $AddU64($t6, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,8496,8497)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t33) at ./sources/chess.move:303:17+6
    assume {:print "$track_local(16,8,6):", $t33} $t33 == $t33;

    // goto L26 at ./sources/chess.move:296:13+385
    assume {:print "$at(2,8172,8557)"} true;
    goto L26;

    // label L2 at ./sources/chess.move:309:13+1
    assume {:print "$at(2,8582,8583)"} true;
L2:

    // $t38 := 1 at ./sources/chess.move:309:13+1
    assume {:print "$at(2,8582,8583)"} true;
    $t38 := 1;
    assume $IsValid'u64'($t38);

    // trace_local[i#1#0]($t38) at ./sources/chess.move:309:9+1
    assume {:print "$track_local(16,8,5):", $t38} $t38 == $t38;

    // label L23 at ./sources/chess.move:310:16+1
    assume {:print "$at(2,8600,8601)"} true;
L23:

    // $t4 := havoc[val]() at ./sources/chess.move:310:16+1
    assume {:print "$at(2,8600,8601)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t6);

    // $t39 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t46);

    // $t47 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:310:16+1
    assume $IsValid'u8'($t47);

    // $t48 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t48);

    // $t49 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t49);

    // $t50 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t50;

    // assume WellFormed($t50) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t50);

    // $t51 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t51;

    // assume WellFormed($t51) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t51);

    // $t52 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t52;

    // assume WellFormed($t52) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t52);

    // $t53 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t53;

    // assume WellFormed($t53) at ./sources/chess.move:310:16+1
    assume $IsValid'$0_game_Board'($Dereference($t53));

    // $t54 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t54;

    // assume WellFormed($t54) at ./sources/chess.move:310:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t54));

    // $t55 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t55;

    // assume WellFormed($t55) at ./sources/chess.move:310:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t55));

    // $t56 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t56;

    // assume WellFormed($t56) at ./sources/chess.move:310:16+1
    assume $IsValid'$0_game_Node'($Dereference($t56));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:310:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,8,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:310:16+1
    assume {:print "$track_local(16,8,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:310:16+1
    assume !$abort_flag;

    // $t39 := 4 at ./sources/chess.move:310:21+1
    $t39 := 4;
    assume $IsValid'u64'($t39);

    // $t40 := <=($t5, $t39) at ./sources/chess.move:310:18+2
    call $t40 := $Le($t5, $t39);

    // if ($t40) goto L14 else goto L13 at ./sources/chess.move:310:9+424
    if ($t40) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:310:9+424
L14:

    // label L15 at ./sources/chess.move:311:17+1
    assume {:print "$at(2,8626,8627)"} true;
L15:

    // $t41 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:311:19+1
    assume {:print "$at(2,8628,8629)"} true;
    call $t41 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8628,8629)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t42 := 20 at ./sources/chess.move:311:25+14
    $t42 := 20;
    assume $IsValid'u64'($t42);

    // $t43 := <($t41, $t42) at ./sources/chess.move:311:23+1
    call $t43 := $Lt($t41, $t42);

    // if ($t43) goto L17 else goto L16 at ./sources/chess.move:311:17+32
    if ($t43) { goto L17; } else { goto L16; }

    // label L17 at ./sources/chess.move:311:43+1
L17:

    // $t4 := >=($t0, $t5) at ./sources/chess.move:311:45+2
    assume {:print "$at(2,8654,8656)"} true;
    call $t4 := $Ge($t0, $t5);

    // goto L18 at ./sources/chess.move:311:17+32
    goto L18;

    // label L16 at ./sources/chess.move:311:17+32
L16:

    // $t44 := false at ./sources/chess.move:311:17+32
    assume {:print "$at(2,8626,8658)"} true;
    $t44 := false;
    assume $IsValid'bool'($t44);

    // $t4 := $t44 at ./sources/chess.move:311:17+32
    $t4 := $t44;

    // label L18 at ./sources/chess.move:311:17+32
L18:

    // if ($t4) goto L20 else goto L19 at ./sources/chess.move:311:13+385
    assume {:print "$at(2,8622,9007)"} true;
    if ($t4) { goto L20; } else { goto L19; }

    // label L20 at ./sources/chess.move:312:51+4
    assume {:print "$at(2,8712,8716)"} true;
L20:

    // $t53 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:312:51+15
    assume {:print "$at(2,8712,8727)"} true;
    $t53 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t54 := borrow_field<game::Board>.board($t53) at ./sources/chess.move:312:46+26
    $t54 := $ChildMutation($t53, 0, $board#$0_game_Board($Dereference($t53)));

    // $t45 := -($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:312:76+1
    call $t45 := $Sub($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8737,8738)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t55 := vector::borrow_mut<vector<game::Node>>($t54, $t45) on_abort goto L29 with $t11 at ./sources/chess.move:312:27+53
    call $t55,$t54 := $1_vector_borrow_mut'vec'$0_game_Node''($t54, $t45);
    if ($abort_flag) {
        assume {:print "$at(2,8688,8741)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t46 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:313:54+1
    assume {:print "$at(2,8796,8797)"} true;
    call $t46 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8796,8797)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t56 := vector::borrow_mut<game::Node>($t55, $t46) on_abort goto L29 with $t11 at ./sources/chess.move:313:28+30
    call $t56,$t55 := $1_vector_borrow_mut'$0_game_Node'($t55, $t46);
    if ($abort_flag) {
        assume {:print "$at(2,8770,8800)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t47 := get_field<game::Node>.value($t56) at ./sources/chess.move:314:21+10
    assume {:print "$at(2,8822,8832)"} true;
    $t47 := $value#$0_game_Node($Dereference($t56));

    // trace_local[game]($t2) at ./sources/chess.move:314:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t48 := !=($t47, $t13) at ./sources/chess.move:314:32+2
    $t48 := !$IsEqual'u8'($t47, $t13);

    // if ($t48) goto L22 else goto L31 at ./sources/chess.move:314:17+67
    if ($t48) { goto L22; } else { goto L31; }

    // label L22 at ./sources/chess.move:315:21+5
    assume {:print "$at(2,8862,8867)"} true;
L22:

    // destroy($t2) at ./sources/chess.move:315:21+5
    assume {:print "$at(2,8862,8867)"} true;

    // goto L13 at ./sources/chess.move:315:21+5
    goto L13;

    // label L19 at ./sources/chess.move:320:17+5
    assume {:print "$at(2,8988,8993)"} true;
L19:

    // destroy($t2) at ./sources/chess.move:320:17+5
    assume {:print "$at(2,8988,8993)"} true;

    // goto L13 at ./sources/chess.move:320:17+5
    goto L13;

    // label L21 at ./sources/chess.move:317:21+1
    assume {:print "$at(2,8907,8908)"} true;
L21:

    // $t49 := 1 at ./sources/chess.move:317:25+1
    assume {:print "$at(2,8911,8912)"} true;
    $t49 := 1;
    assume $IsValid'u64'($t49);

    // $t50 := +($t5, $t49) on_abort goto L29 with $t11 at ./sources/chess.move:317:23+1
    call $t50 := $AddU64($t5, $t49);
    if ($abort_flag) {
        assume {:print "$at(2,8909,8910)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t50) at ./sources/chess.move:317:17+1
    assume {:print "$track_local(16,8,5):", $t50} $t50 == $t50;

    // $t51 := 1 at ./sources/chess.move:318:35+1
    assume {:print "$at(2,8948,8949)"} true;
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t6, $t51) on_abort goto L29 with $t11 at ./sources/chess.move:318:33+1
    call $t52 := $AddU64($t6, $t51);
    if ($abort_flag) {
        assume {:print "$at(2,8946,8947)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t52) at ./sources/chess.move:318:17+6
    assume {:print "$track_local(16,8,6):", $t52} $t52 == $t52;

    // goto L27 at ./sources/chess.move:311:13+385
    assume {:print "$at(2,8622,9007)"} true;
    goto L27;

    // label L13 at ./sources/chess.move:324:13+6
    assume {:print "$at(2,9032,9038)"} true;
L13:

    // $t57 := 5 at ./sources/chess.move:324:23+1
    assume {:print "$at(2,9042,9043)"} true;
    $t57 := 5;
    assume $IsValid'u64'($t57);

    // $t58 := >=($t6, $t57) at ./sources/chess.move:324:20+2
    call $t58 := $Ge($t6, $t57);

    // if ($t58) goto L25 else goto L24 at ./sources/chess.move:324:9+52
    if ($t58) { goto L25; } else { goto L24; }

    // label L25 at ./sources/chess.move:325:20+4
    assume {:print "$at(2,9066,9070)"} true;
L25:

    // $t59 := true at ./sources/chess.move:325:20+4
    assume {:print "$at(2,9066,9070)"} true;
    $t59 := true;
    assume $IsValid'bool'($t59);

    // trace_return[0]($t59) at ./sources/chess.move:325:13+11
    assume {:print "$track_return(16,8,0):", $t59} $t59 == $t59;

    // trace_local[game]($t2) at ./sources/chess.move:325:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t59) at ./sources/chess.move:325:13+11
    $t17 := $t59;

    // goto L28 at ./sources/chess.move:325:13+11
    goto L28;

    // label L24 at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
L24:

    // $t60 := false at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    $t60 := false;
    assume $IsValid'bool'($t60);

    // trace_return[0]($t60) at ./sources/chess.move:327:9+5
    assume {:print "$track_return(16,8,0):", $t60} $t60 == $t60;

    // trace_local[game]($t2) at ./sources/chess.move:327:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t60) at ./sources/chess.move:327:9+5
    $t17 := $t60;

    // goto L28 at ./sources/chess.move:327:9+5
    goto L28;

    // label L26 at ./sources/chess.move:327:9+5
    // Loop invariant checking block for the loop started with header: L12
L26:

    // stop() at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    assume false;
    return;

    // label L27 at ./sources/chess.move:327:9+5
    // Loop invariant checking block for the loop started with header: L23
L27:

    // stop() at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    assume false;
    return;

    // label L28 at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
L28:

    // return $t17 at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
    $ret0 := $t17;
    $ret1 := $t2;
    return;

    // label L29 at ./sources/chess.move:328:5+1
L29:

    // abort($t11) at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L30 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L30:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L31 at <internal>:1:1+10
L31:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

}

// fun game::LeftTwill [verification] at ./sources/chess.move:285:5+1280
procedure {:timeLimit 40} $0_game_LeftTwill$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_game_Board);
    var $t9: $Mutation (Vec (Vec ($0_game_Node)));
    var $t10: $Mutation (Vec ($0_game_Node));
    var $t11: int;
    var $t12: $Mutation ($0_game_Node);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation ($0_game_Board);
    var $t35: $Mutation (Vec (Vec ($0_game_Node)));
    var $t36: $Mutation (Vec ($0_game_Node));
    var $t37: $Mutation ($0_game_Node);
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation ($0_game_Board);
    var $t54: $Mutation (Vec (Vec ($0_game_Node)));
    var $t55: $Mutation (Vec ($0_game_Node));
    var $t56: $Mutation ($0_game_Node);
    var $t57: int;
    var $t58: bool;
    var $t59: bool;
    var $t60: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:285:5+1
    assume {:print "$at(2,7821,7822)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/chess.move:285:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:285:5+1
    assume $IsValid'$0_game_Game'($Dereference($t2));

    // trace_local[a]($t0) at ./sources/chess.move:285:5+1
    assume {:print "$track_local(16,8,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:285:5+1
    assume {:print "$track_local(16,8,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:285:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t8 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:286:43+15
    assume {:print "$at(2,7916,7931)"} true;
    $t8 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t9 := borrow_field<game::Board>.board($t8) at ./sources/chess.move:286:38+26
    $t9 := $ChildMutation($t8, 0, $board#$0_game_Board($Dereference($t8)));

    // $t10 := vector::borrow_mut<vector<game::Node>>($t9, $t0) on_abort goto L29 with $t11 at ./sources/chess.move:286:19+49
    call $t10,$t9 := $1_vector_borrow_mut'vec'$0_game_Node''($t9, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,7892,7941)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t12 := vector::borrow_mut<game::Node>($t10, $t1) on_abort goto L29 with $t11 at ./sources/chess.move:287:20+26
    assume {:print "$at(2,7962,7988)"} true;
    call $t12,$t10 := $1_vector_borrow_mut'$0_game_Node'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,7962,7988)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t13 := get_field<game::Node>.value($t12) at ./sources/chess.move:288:18+10
    assume {:print "$at(2,8007,8017)"} true;
    $t13 := $value#$0_game_Node($Dereference($t12));

    // trace_local[game]($t2) at ./sources/chess.move:288:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t13) at ./sources/chess.move:288:13+2
    assume {:print "$track_local(16,8,7):", $t13} $t13 == $t13;

    // $t14 := 0 at ./sources/chess.move:289:19+1
    assume {:print "$at(2,8037,8038)"} true;
    $t14 := 0;
    assume $IsValid'u8'($t14);

    // $t15 := ==($t13, $t14) at ./sources/chess.move:289:16+2
    $t15 := $IsEqual'u8'($t13, $t14);

    // if ($t15) goto L1 else goto L0 at ./sources/chess.move:289:9+50
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:290:13+12
    assume {:print "$at(2,8055,8067)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:290:13+12
    assume {:print "$at(2,8055,8067)"} true;

    // $t16 := false at ./sources/chess.move:290:20+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at ./sources/chess.move:290:13+12
    assume {:print "$track_return(16,8,0):", $t16} $t16 == $t16;

    // trace_local[game]($t2) at ./sources/chess.move:290:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t16) at ./sources/chess.move:290:13+12
    $t17 := $t16;

    // goto L28 at ./sources/chess.move:290:13+12
    goto L28;

    // label L0 at ./sources/chess.move:293:23+1
    assume {:print "$at(2,8102,8103)"} true;
L0:

    // $t18 := 1 at ./sources/chess.move:293:23+1
    assume {:print "$at(2,8102,8103)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // trace_local[i#1#0]($t18) at ./sources/chess.move:293:13+1
    assume {:print "$track_local(16,8,5):", $t18} $t18 == $t18;

    // $t19 := 1 at ./sources/chess.move:294:28+1
    assume {:print "$at(2,8132,8133)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // trace_local[length#1#0]($t19) at ./sources/chess.move:294:13+6
    assume {:print "$track_local(16,8,6):", $t19} $t19 == $t19;

    // label L12 at ./sources/chess.move:295:16+1
    assume {:print "$at(2,8150,8151)"} true;
L12:

    // $t3 := havoc[val]() at ./sources/chess.move:295:16+1
    assume {:print "$at(2,8150,8151)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t3);

    // $t5 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t6);

    // $t20 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:295:16+1
    assume $IsValid'u8'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:295:16+1
    assume $IsValid'bool'($t29);

    // $t30 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t30);

    // $t31 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t31);

    // $t32 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at ./sources/chess.move:295:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:295:16+1
    assume $IsValid'u64'($t33);

    // $t34 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t34;

    // assume WellFormed($t34) at ./sources/chess.move:295:16+1
    assume $IsValid'$0_game_Board'($Dereference($t34));

    // $t35 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:295:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t35));

    // $t36 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:295:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t36));

    // $t37 := havoc[mut_all]() at ./sources/chess.move:295:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:295:16+1
    assume $IsValid'$0_game_Node'($Dereference($t37));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:295:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,8,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:295:16+1
    assume {:print "$track_local(16,8,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:295:16+1
    assume !$abort_flag;

    // $t20 := 4 at ./sources/chess.move:295:21+1
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := <=($t5, $t20) at ./sources/chess.move:295:18+2
    call $t21 := $Le($t5, $t20);

    // if ($t21) goto L3 else goto L2 at ./sources/chess.move:295:9+424
    if ($t21) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:295:9+424
L3:

    // label L4 at ./sources/chess.move:296:17+1
    assume {:print "$at(2,8176,8177)"} true;
L4:

    // $t22 := >=($t1, $t5) at ./sources/chess.move:296:19+2
    assume {:print "$at(2,8178,8180)"} true;
    call $t22 := $Ge($t1, $t5);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:296:17+32
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:296:27+1
L6:

    // $t23 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:296:29+1
    assume {:print "$at(2,8188,8189)"} true;
    call $t23 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8188,8189)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t24 := 20 at ./sources/chess.move:296:35+14
    $t24 := 20;
    assume $IsValid'u64'($t24);

    // $t3 := <($t23, $t24) at ./sources/chess.move:296:33+1
    call $t3 := $Lt($t23, $t24);

    // goto L7 at ./sources/chess.move:296:17+32
    goto L7;

    // label L5 at ./sources/chess.move:296:17+32
L5:

    // $t25 := false at ./sources/chess.move:296:17+32
    assume {:print "$at(2,8176,8208)"} true;
    $t25 := false;
    assume $IsValid'bool'($t25);

    // $t3 := $t25 at ./sources/chess.move:296:17+32
    $t3 := $t25;

    // label L7 at ./sources/chess.move:296:17+32
L7:

    // if ($t3) goto L9 else goto L8 at ./sources/chess.move:296:13+385
    assume {:print "$at(2,8172,8557)"} true;
    if ($t3) { goto L9; } else { goto L8; }

    // label L9 at ./sources/chess.move:297:51+4
    assume {:print "$at(2,8262,8266)"} true;
L9:

    // $t34 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:297:51+15
    assume {:print "$at(2,8262,8277)"} true;
    $t34 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t35 := borrow_field<game::Board>.board($t34) at ./sources/chess.move:297:46+26
    $t35 := $ChildMutation($t34, 0, $board#$0_game_Board($Dereference($t34)));

    // $t26 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:297:76+1
    call $t26 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8287,8288)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t36 := vector::borrow_mut<vector<game::Node>>($t35, $t26) on_abort goto L29 with $t11 at ./sources/chess.move:297:27+53
    call $t36,$t35 := $1_vector_borrow_mut'vec'$0_game_Node''($t35, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,8238,8291)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t27 := -($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:298:54+1
    assume {:print "$at(2,8346,8347)"} true;
    call $t27 := $Sub($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8346,8347)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t37 := vector::borrow_mut<game::Node>($t36, $t27) on_abort goto L29 with $t11 at ./sources/chess.move:298:28+30
    call $t37,$t36 := $1_vector_borrow_mut'$0_game_Node'($t36, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,8320,8350)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t28 := get_field<game::Node>.value($t37) at ./sources/chess.move:299:21+10
    assume {:print "$at(2,8372,8382)"} true;
    $t28 := $value#$0_game_Node($Dereference($t37));

    // trace_local[game]($t2) at ./sources/chess.move:299:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t29 := !=($t28, $t13) at ./sources/chess.move:299:32+2
    $t29 := !$IsEqual'u8'($t28, $t13);

    // if ($t29) goto L11 else goto L30 at ./sources/chess.move:299:17+67
    if ($t29) { goto L11; } else { goto L30; }

    // label L11 at ./sources/chess.move:300:21+5
    assume {:print "$at(2,8412,8417)"} true;
L11:

    // goto L2 at ./sources/chess.move:300:21+5
    assume {:print "$at(2,8412,8417)"} true;
    goto L2;

    // label L8 at ./sources/chess.move:305:17+5
    assume {:print "$at(2,8538,8543)"} true;
L8:

    // goto L2 at ./sources/chess.move:305:17+5
    assume {:print "$at(2,8538,8543)"} true;
    goto L2;

    // label L10 at ./sources/chess.move:302:21+1
    assume {:print "$at(2,8457,8458)"} true;
L10:

    // $t30 := 1 at ./sources/chess.move:302:25+1
    assume {:print "$at(2,8461,8462)"} true;
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := +($t5, $t30) on_abort goto L29 with $t11 at ./sources/chess.move:302:23+1
    call $t31 := $AddU64($t5, $t30);
    if ($abort_flag) {
        assume {:print "$at(2,8459,8460)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t31) at ./sources/chess.move:302:17+1
    assume {:print "$track_local(16,8,5):", $t31} $t31 == $t31;

    // $t32 := 1 at ./sources/chess.move:303:35+1
    assume {:print "$at(2,8498,8499)"} true;
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // $t33 := +($t6, $t32) on_abort goto L29 with $t11 at ./sources/chess.move:303:33+1
    call $t33 := $AddU64($t6, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,8496,8497)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t33) at ./sources/chess.move:303:17+6
    assume {:print "$track_local(16,8,6):", $t33} $t33 == $t33;

    // goto L26 at ./sources/chess.move:296:13+385
    assume {:print "$at(2,8172,8557)"} true;
    goto L26;

    // label L2 at ./sources/chess.move:309:13+1
    assume {:print "$at(2,8582,8583)"} true;
L2:

    // $t38 := 1 at ./sources/chess.move:309:13+1
    assume {:print "$at(2,8582,8583)"} true;
    $t38 := 1;
    assume $IsValid'u64'($t38);

    // trace_local[i#1#0]($t38) at ./sources/chess.move:309:9+1
    assume {:print "$track_local(16,8,5):", $t38} $t38 == $t38;

    // label L23 at ./sources/chess.move:310:16+1
    assume {:print "$at(2,8600,8601)"} true;
L23:

    // $t4 := havoc[val]() at ./sources/chess.move:310:16+1
    assume {:print "$at(2,8600,8601)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t6);

    // $t39 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t46);

    // $t47 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:310:16+1
    assume $IsValid'u8'($t47);

    // $t48 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:310:16+1
    assume $IsValid'bool'($t48);

    // $t49 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t49);

    // $t50 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t50;

    // assume WellFormed($t50) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t50);

    // $t51 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t51;

    // assume WellFormed($t51) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t51);

    // $t52 := havoc[val]() at ./sources/chess.move:310:16+1
    havoc $t52;

    // assume WellFormed($t52) at ./sources/chess.move:310:16+1
    assume $IsValid'u64'($t52);

    // $t53 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t53;

    // assume WellFormed($t53) at ./sources/chess.move:310:16+1
    assume $IsValid'$0_game_Board'($Dereference($t53));

    // $t54 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t54;

    // assume WellFormed($t54) at ./sources/chess.move:310:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t54));

    // $t55 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t55;

    // assume WellFormed($t55) at ./sources/chess.move:310:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t55));

    // $t56 := havoc[mut_all]() at ./sources/chess.move:310:16+1
    havoc $t56;

    // assume WellFormed($t56) at ./sources/chess.move:310:16+1
    assume $IsValid'$0_game_Node'($Dereference($t56));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:310:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,8,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:310:16+1
    assume {:print "$track_local(16,8,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:310:16+1
    assume !$abort_flag;

    // $t39 := 4 at ./sources/chess.move:310:21+1
    $t39 := 4;
    assume $IsValid'u64'($t39);

    // $t40 := <=($t5, $t39) at ./sources/chess.move:310:18+2
    call $t40 := $Le($t5, $t39);

    // if ($t40) goto L14 else goto L13 at ./sources/chess.move:310:9+424
    if ($t40) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:310:9+424
L14:

    // label L15 at ./sources/chess.move:311:17+1
    assume {:print "$at(2,8626,8627)"} true;
L15:

    // $t41 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:311:19+1
    assume {:print "$at(2,8628,8629)"} true;
    call $t41 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8628,8629)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t42 := 20 at ./sources/chess.move:311:25+14
    $t42 := 20;
    assume $IsValid'u64'($t42);

    // $t43 := <($t41, $t42) at ./sources/chess.move:311:23+1
    call $t43 := $Lt($t41, $t42);

    // if ($t43) goto L17 else goto L16 at ./sources/chess.move:311:17+32
    if ($t43) { goto L17; } else { goto L16; }

    // label L17 at ./sources/chess.move:311:43+1
L17:

    // $t4 := >=($t0, $t5) at ./sources/chess.move:311:45+2
    assume {:print "$at(2,8654,8656)"} true;
    call $t4 := $Ge($t0, $t5);

    // goto L18 at ./sources/chess.move:311:17+32
    goto L18;

    // label L16 at ./sources/chess.move:311:17+32
L16:

    // $t44 := false at ./sources/chess.move:311:17+32
    assume {:print "$at(2,8626,8658)"} true;
    $t44 := false;
    assume $IsValid'bool'($t44);

    // $t4 := $t44 at ./sources/chess.move:311:17+32
    $t4 := $t44;

    // label L18 at ./sources/chess.move:311:17+32
L18:

    // if ($t4) goto L20 else goto L19 at ./sources/chess.move:311:13+385
    assume {:print "$at(2,8622,9007)"} true;
    if ($t4) { goto L20; } else { goto L19; }

    // label L20 at ./sources/chess.move:312:51+4
    assume {:print "$at(2,8712,8716)"} true;
L20:

    // $t53 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:312:51+15
    assume {:print "$at(2,8712,8727)"} true;
    $t53 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t54 := borrow_field<game::Board>.board($t53) at ./sources/chess.move:312:46+26
    $t54 := $ChildMutation($t53, 0, $board#$0_game_Board($Dereference($t53)));

    // $t45 := -($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:312:76+1
    call $t45 := $Sub($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8737,8738)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t55 := vector::borrow_mut<vector<game::Node>>($t54, $t45) on_abort goto L29 with $t11 at ./sources/chess.move:312:27+53
    call $t55,$t54 := $1_vector_borrow_mut'vec'$0_game_Node''($t54, $t45);
    if ($abort_flag) {
        assume {:print "$at(2,8688,8741)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t46 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:313:54+1
    assume {:print "$at(2,8796,8797)"} true;
    call $t46 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,8796,8797)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t56 := vector::borrow_mut<game::Node>($t55, $t46) on_abort goto L29 with $t11 at ./sources/chess.move:313:28+30
    call $t56,$t55 := $1_vector_borrow_mut'$0_game_Node'($t55, $t46);
    if ($abort_flag) {
        assume {:print "$at(2,8770,8800)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t47 := get_field<game::Node>.value($t56) at ./sources/chess.move:314:21+10
    assume {:print "$at(2,8822,8832)"} true;
    $t47 := $value#$0_game_Node($Dereference($t56));

    // trace_local[game]($t2) at ./sources/chess.move:314:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t48 := !=($t47, $t13) at ./sources/chess.move:314:32+2
    $t48 := !$IsEqual'u8'($t47, $t13);

    // if ($t48) goto L22 else goto L31 at ./sources/chess.move:314:17+67
    if ($t48) { goto L22; } else { goto L31; }

    // label L22 at ./sources/chess.move:315:21+5
    assume {:print "$at(2,8862,8867)"} true;
L22:

    // destroy($t2) at ./sources/chess.move:315:21+5
    assume {:print "$at(2,8862,8867)"} true;

    // goto L13 at ./sources/chess.move:315:21+5
    goto L13;

    // label L19 at ./sources/chess.move:320:17+5
    assume {:print "$at(2,8988,8993)"} true;
L19:

    // destroy($t2) at ./sources/chess.move:320:17+5
    assume {:print "$at(2,8988,8993)"} true;

    // goto L13 at ./sources/chess.move:320:17+5
    goto L13;

    // label L21 at ./sources/chess.move:317:21+1
    assume {:print "$at(2,8907,8908)"} true;
L21:

    // $t49 := 1 at ./sources/chess.move:317:25+1
    assume {:print "$at(2,8911,8912)"} true;
    $t49 := 1;
    assume $IsValid'u64'($t49);

    // $t50 := +($t5, $t49) on_abort goto L29 with $t11 at ./sources/chess.move:317:23+1
    call $t50 := $AddU64($t5, $t49);
    if ($abort_flag) {
        assume {:print "$at(2,8909,8910)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t50) at ./sources/chess.move:317:17+1
    assume {:print "$track_local(16,8,5):", $t50} $t50 == $t50;

    // $t51 := 1 at ./sources/chess.move:318:35+1
    assume {:print "$at(2,8948,8949)"} true;
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t6, $t51) on_abort goto L29 with $t11 at ./sources/chess.move:318:33+1
    call $t52 := $AddU64($t6, $t51);
    if ($abort_flag) {
        assume {:print "$at(2,8946,8947)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,8):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t52) at ./sources/chess.move:318:17+6
    assume {:print "$track_local(16,8,6):", $t52} $t52 == $t52;

    // goto L27 at ./sources/chess.move:311:13+385
    assume {:print "$at(2,8622,9007)"} true;
    goto L27;

    // label L13 at ./sources/chess.move:324:13+6
    assume {:print "$at(2,9032,9038)"} true;
L13:

    // $t57 := 5 at ./sources/chess.move:324:23+1
    assume {:print "$at(2,9042,9043)"} true;
    $t57 := 5;
    assume $IsValid'u64'($t57);

    // $t58 := >=($t6, $t57) at ./sources/chess.move:324:20+2
    call $t58 := $Ge($t6, $t57);

    // if ($t58) goto L25 else goto L24 at ./sources/chess.move:324:9+52
    if ($t58) { goto L25; } else { goto L24; }

    // label L25 at ./sources/chess.move:325:20+4
    assume {:print "$at(2,9066,9070)"} true;
L25:

    // $t59 := true at ./sources/chess.move:325:20+4
    assume {:print "$at(2,9066,9070)"} true;
    $t59 := true;
    assume $IsValid'bool'($t59);

    // trace_return[0]($t59) at ./sources/chess.move:325:13+11
    assume {:print "$track_return(16,8,0):", $t59} $t59 == $t59;

    // trace_local[game]($t2) at ./sources/chess.move:325:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t59) at ./sources/chess.move:325:13+11
    $t17 := $t59;

    // goto L28 at ./sources/chess.move:325:13+11
    goto L28;

    // label L24 at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
L24:

    // $t60 := false at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    $t60 := false;
    assume $IsValid'bool'($t60);

    // trace_return[0]($t60) at ./sources/chess.move:327:9+5
    assume {:print "$track_return(16,8,0):", $t60} $t60 == $t60;

    // trace_local[game]($t2) at ./sources/chess.move:327:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,8,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t60) at ./sources/chess.move:327:9+5
    $t17 := $t60;

    // goto L28 at ./sources/chess.move:327:9+5
    goto L28;

    // label L26 at ./sources/chess.move:327:9+5
    // Loop invariant checking block for the loop started with header: L12
L26:

    // stop() at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    assume false;
    return;

    // label L27 at ./sources/chess.move:327:9+5
    // Loop invariant checking block for the loop started with header: L23
L27:

    // stop() at ./sources/chess.move:327:9+5
    assume {:print "$at(2,9090,9095)"} true;
    assume false;
    return;

    // label L28 at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
L28:

    // return $t17 at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
    $ret0 := $t17;
    $ret1 := $t2;
    return;

    // label L29 at ./sources/chess.move:328:5+1
L29:

    // abort($t11) at ./sources/chess.move:328:5+1
    assume {:print "$at(2,9100,9101)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L30 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L30:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L31 at <internal>:1:1+10
L31:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

}

// fun game::RightTwill [baseline] at ./sources/chess.move:240:5+1281
procedure {:inline 1} $0_game_RightTwill(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_game_Board);
    var $t9: $Mutation (Vec (Vec ($0_game_Node)));
    var $t10: $Mutation (Vec ($0_game_Node));
    var $t11: int;
    var $t12: $Mutation ($0_game_Node);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation ($0_game_Board);
    var $t37: $Mutation (Vec (Vec ($0_game_Node)));
    var $t38: $Mutation (Vec ($0_game_Node));
    var $t39: $Mutation ($0_game_Node);
    var $t40: int;
    var $t41: int;
    var $t42: bool;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation ($0_game_Board);
    var $t54: $Mutation (Vec (Vec ($0_game_Node)));
    var $t55: $Mutation (Vec ($0_game_Node));
    var $t56: $Mutation ($0_game_Node);
    var $t57: int;
    var $t58: bool;
    var $t59: bool;
    var $t60: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[a]($t0) at ./sources/chess.move:240:5+1
    assume {:print "$at(2,6534,6535)"} true;
    assume {:print "$track_local(16,7,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:240:5+1
    assume {:print "$track_local(16,7,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:240:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t8 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:241:43+15
    assume {:print "$at(2,6630,6645)"} true;
    $t8 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t9 := borrow_field<game::Board>.board($t8) at ./sources/chess.move:241:38+26
    $t9 := $ChildMutation($t8, 0, $board#$0_game_Board($Dereference($t8)));

    // $t10 := vector::borrow_mut<vector<game::Node>>($t9, $t0) on_abort goto L29 with $t11 at ./sources/chess.move:241:19+49
    call $t10,$t9 := $1_vector_borrow_mut'vec'$0_game_Node''($t9, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,6606,6655)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t12 := vector::borrow_mut<game::Node>($t10, $t1) on_abort goto L29 with $t11 at ./sources/chess.move:242:20+26
    assume {:print "$at(2,6676,6702)"} true;
    call $t12,$t10 := $1_vector_borrow_mut'$0_game_Node'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,6676,6702)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t13 := get_field<game::Node>.value($t12) at ./sources/chess.move:243:18+10
    assume {:print "$at(2,6721,6731)"} true;
    $t13 := $value#$0_game_Node($Dereference($t12));

    // trace_local[game]($t2) at ./sources/chess.move:243:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t13) at ./sources/chess.move:243:13+2
    assume {:print "$track_local(16,7,7):", $t13} $t13 == $t13;

    // $t14 := 0 at ./sources/chess.move:244:19+1
    assume {:print "$at(2,6751,6752)"} true;
    $t14 := 0;
    assume $IsValid'u8'($t14);

    // $t15 := ==($t13, $t14) at ./sources/chess.move:244:16+2
    $t15 := $IsEqual'u8'($t13, $t14);

    // if ($t15) goto L1 else goto L0 at ./sources/chess.move:244:9+50
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:245:13+12
    assume {:print "$at(2,6769,6781)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:245:13+12
    assume {:print "$at(2,6769,6781)"} true;

    // $t16 := false at ./sources/chess.move:245:20+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at ./sources/chess.move:245:13+12
    assume {:print "$track_return(16,7,0):", $t16} $t16 == $t16;

    // trace_local[game]($t2) at ./sources/chess.move:245:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t16) at ./sources/chess.move:245:13+12
    $t17 := $t16;

    // goto L28 at ./sources/chess.move:245:13+12
    goto L28;

    // label L0 at ./sources/chess.move:248:23+1
    assume {:print "$at(2,6816,6817)"} true;
L0:

    // $t18 := 1 at ./sources/chess.move:248:23+1
    assume {:print "$at(2,6816,6817)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // trace_local[i#1#0]($t18) at ./sources/chess.move:248:13+1
    assume {:print "$track_local(16,7,5):", $t18} $t18 == $t18;

    // $t19 := 1 at ./sources/chess.move:249:28+1
    assume {:print "$at(2,6846,6847)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // trace_local[length#1#0]($t19) at ./sources/chess.move:249:13+6
    assume {:print "$track_local(16,7,6):", $t19} $t19 == $t19;

    // label L12 at ./sources/chess.move:250:16+1
    assume {:print "$at(2,6864,6865)"} true;
L12:

    // $t3 := havoc[val]() at ./sources/chess.move:250:16+1
    assume {:print "$at(2,6864,6865)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t3);

    // $t5 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t6);

    // $t20 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:250:16+1
    assume $IsValid'u8'($t30);

    // $t31 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t31);

    // $t32 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t33);

    // $t34 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t34;

    // assume WellFormed($t34) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t35);

    // $t36 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:250:16+1
    assume $IsValid'$0_game_Board'($Dereference($t36));

    // $t37 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:250:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t37));

    // $t38 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:250:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t38));

    // $t39 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:250:16+1
    assume $IsValid'$0_game_Node'($Dereference($t39));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:250:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,7,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:250:16+1
    assume {:print "$track_local(16,7,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:250:16+1
    assume !$abort_flag;

    // $t20 := 4 at ./sources/chess.move:250:21+1
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := <=($t5, $t20) at ./sources/chess.move:250:18+2
    call $t21 := $Le($t5, $t20);

    // if ($t21) goto L3 else goto L2 at ./sources/chess.move:250:9+440
    if ($t21) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:250:9+440
L3:

    // label L4 at ./sources/chess.move:251:17+1
    assume {:print "$at(2,6890,6891)"} true;
L4:

    // $t22 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:251:20+1
    assume {:print "$at(2,6893,6894)"} true;
    call $t22 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,6893,6894)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t23 := 20 at ./sources/chess.move:251:26+14
    $t23 := 20;
    assume $IsValid'u64'($t23);

    // $t24 := <($t22, $t23) at ./sources/chess.move:251:24+1
    call $t24 := $Lt($t22, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/chess.move:251:17+48
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:251:44+1
L6:

    // $t25 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:251:45+1
    assume {:print "$at(2,6918,6919)"} true;
    call $t25 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,6918,6919)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t26 := 20 at ./sources/chess.move:251:51+14
    $t26 := 20;
    assume $IsValid'u64'($t26);

    // $t3 := <($t25, $t26) at ./sources/chess.move:251:49+1
    call $t3 := $Lt($t25, $t26);

    // goto L7 at ./sources/chess.move:251:17+48
    goto L7;

    // label L5 at ./sources/chess.move:251:17+48
L5:

    // $t27 := false at ./sources/chess.move:251:17+48
    assume {:print "$at(2,6890,6938)"} true;
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t3 := $t27 at ./sources/chess.move:251:17+48
    $t3 := $t27;

    // label L7 at ./sources/chess.move:251:17+48
L7:

    // if ($t3) goto L9 else goto L8 at ./sources/chess.move:251:13+401
    assume {:print "$at(2,6886,7287)"} true;
    if ($t3) { goto L9; } else { goto L8; }

    // label L9 at ./sources/chess.move:252:51+4
    assume {:print "$at(2,6992,6996)"} true;
L9:

    // $t36 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:252:51+15
    assume {:print "$at(2,6992,7007)"} true;
    $t36 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t37 := borrow_field<game::Board>.board($t36) at ./sources/chess.move:252:46+26
    $t37 := $ChildMutation($t36, 0, $board#$0_game_Board($Dereference($t36)));

    // $t28 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:252:76+1
    call $t28 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7017,7018)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t38 := vector::borrow_mut<vector<game::Node>>($t37, $t28) on_abort goto L29 with $t11 at ./sources/chess.move:252:27+53
    call $t38,$t37 := $1_vector_borrow_mut'vec'$0_game_Node''($t37, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,6968,7021)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t29 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:253:54+1
    assume {:print "$at(2,7076,7077)"} true;
    call $t29 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7076,7077)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t39 := vector::borrow_mut<game::Node>($t38, $t29) on_abort goto L29 with $t11 at ./sources/chess.move:253:28+30
    call $t39,$t38 := $1_vector_borrow_mut'$0_game_Node'($t38, $t29);
    if ($abort_flag) {
        assume {:print "$at(2,7050,7080)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t30 := get_field<game::Node>.value($t39) at ./sources/chess.move:254:21+10
    assume {:print "$at(2,7102,7112)"} true;
    $t30 := $value#$0_game_Node($Dereference($t39));

    // trace_local[game]($t2) at ./sources/chess.move:254:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t31 := !=($t30, $t13) at ./sources/chess.move:254:32+2
    $t31 := !$IsEqual'u8'($t30, $t13);

    // if ($t31) goto L11 else goto L30 at ./sources/chess.move:254:17+67
    if ($t31) { goto L11; } else { goto L30; }

    // label L11 at ./sources/chess.move:255:21+5
    assume {:print "$at(2,7142,7147)"} true;
L11:

    // goto L2 at ./sources/chess.move:255:21+5
    assume {:print "$at(2,7142,7147)"} true;
    goto L2;

    // label L8 at ./sources/chess.move:260:17+5
    assume {:print "$at(2,7268,7273)"} true;
L8:

    // goto L2 at ./sources/chess.move:260:17+5
    assume {:print "$at(2,7268,7273)"} true;
    goto L2;

    // label L10 at ./sources/chess.move:257:21+1
    assume {:print "$at(2,7187,7188)"} true;
L10:

    // $t32 := 1 at ./sources/chess.move:257:25+1
    assume {:print "$at(2,7191,7192)"} true;
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // $t33 := +($t5, $t32) on_abort goto L29 with $t11 at ./sources/chess.move:257:23+1
    call $t33 := $AddU64($t5, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,7189,7190)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t33) at ./sources/chess.move:257:17+1
    assume {:print "$track_local(16,7,5):", $t33} $t33 == $t33;

    // $t34 := 1 at ./sources/chess.move:258:35+1
    assume {:print "$at(2,7228,7229)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // $t35 := +($t6, $t34) on_abort goto L29 with $t11 at ./sources/chess.move:258:33+1
    call $t35 := $AddU64($t6, $t34);
    if ($abort_flag) {
        assume {:print "$at(2,7226,7227)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t35) at ./sources/chess.move:258:17+6
    assume {:print "$track_local(16,7,6):", $t35} $t35 == $t35;

    // goto L26 at ./sources/chess.move:251:13+401
    assume {:print "$at(2,6886,7287)"} true;
    goto L26;

    // label L2 at ./sources/chess.move:264:13+1
    assume {:print "$at(2,7312,7313)"} true;
L2:

    // $t40 := 1 at ./sources/chess.move:264:13+1
    assume {:print "$at(2,7312,7313)"} true;
    $t40 := 1;
    assume $IsValid'u64'($t40);

    // trace_local[i#1#0]($t40) at ./sources/chess.move:264:9+1
    assume {:print "$track_local(16,7,5):", $t40} $t40 == $t40;

    // label L23 at ./sources/chess.move:265:16+1
    assume {:print "$at(2,7330,7331)"} true;
L23:

    // $t4 := havoc[val]() at ./sources/chess.move:265:16+1
    assume {:print "$at(2,7330,7331)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t6);

    // $t41 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t46);

    // $t47 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:265:16+1
    assume $IsValid'u8'($t47);

    // $t48 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t48);

    // $t49 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t49);

    // $t50 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t50;

    // assume WellFormed($t50) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t50);

    // $t51 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t51;

    // assume WellFormed($t51) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t51);

    // $t52 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t52;

    // assume WellFormed($t52) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t52);

    // $t53 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t53;

    // assume WellFormed($t53) at ./sources/chess.move:265:16+1
    assume $IsValid'$0_game_Board'($Dereference($t53));

    // $t54 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t54;

    // assume WellFormed($t54) at ./sources/chess.move:265:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t54));

    // $t55 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t55;

    // assume WellFormed($t55) at ./sources/chess.move:265:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t55));

    // $t56 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t56;

    // assume WellFormed($t56) at ./sources/chess.move:265:16+1
    assume $IsValid'$0_game_Node'($Dereference($t56));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:265:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,7,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:265:16+1
    assume {:print "$track_local(16,7,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:265:16+1
    assume !$abort_flag;

    // $t41 := 4 at ./sources/chess.move:265:21+1
    $t41 := 4;
    assume $IsValid'u64'($t41);

    // $t42 := <=($t5, $t41) at ./sources/chess.move:265:18+2
    call $t42 := $Le($t5, $t41);

    // if ($t42) goto L14 else goto L13 at ./sources/chess.move:265:9+408
    if ($t42) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:265:9+408
L14:

    // label L15 at ./sources/chess.move:266:17+1
    assume {:print "$at(2,7356,7357)"} true;
L15:

    // $t43 := >=($t0, $t5) at ./sources/chess.move:266:20+2
    assume {:print "$at(2,7359,7361)"} true;
    call $t43 := $Ge($t0, $t5);

    // if ($t43) goto L17 else goto L16 at ./sources/chess.move:266:17+16
    if ($t43) { goto L17; } else { goto L16; }

    // label L17 at ./sources/chess.move:266:28+1
L17:

    // $t4 := >($t1, $t5) at ./sources/chess.move:266:30+1
    assume {:print "$at(2,7369,7370)"} true;
    call $t4 := $Gt($t1, $t5);

    // goto L18 at ./sources/chess.move:266:17+16
    goto L18;

    // label L16 at ./sources/chess.move:266:17+16
L16:

    // $t44 := false at ./sources/chess.move:266:17+16
    assume {:print "$at(2,7356,7372)"} true;
    $t44 := false;
    assume $IsValid'bool'($t44);

    // $t4 := $t44 at ./sources/chess.move:266:17+16
    $t4 := $t44;

    // label L18 at ./sources/chess.move:266:17+16
L18:

    // if ($t4) goto L20 else goto L19 at ./sources/chess.move:266:13+369
    assume {:print "$at(2,7352,7721)"} true;
    if ($t4) { goto L20; } else { goto L19; }

    // label L20 at ./sources/chess.move:267:51+4
    assume {:print "$at(2,7426,7430)"} true;
L20:

    // $t53 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:267:51+15
    assume {:print "$at(2,7426,7441)"} true;
    $t53 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t54 := borrow_field<game::Board>.board($t53) at ./sources/chess.move:267:46+26
    $t54 := $ChildMutation($t53, 0, $board#$0_game_Board($Dereference($t53)));

    // $t45 := -($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:267:76+1
    call $t45 := $Sub($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7451,7452)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t55 := vector::borrow_mut<vector<game::Node>>($t54, $t45) on_abort goto L29 with $t11 at ./sources/chess.move:267:27+53
    call $t55,$t54 := $1_vector_borrow_mut'vec'$0_game_Node''($t54, $t45);
    if ($abort_flag) {
        assume {:print "$at(2,7402,7455)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t46 := -($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:268:54+1
    assume {:print "$at(2,7510,7511)"} true;
    call $t46 := $Sub($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7510,7511)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t56 := vector::borrow_mut<game::Node>($t55, $t46) on_abort goto L29 with $t11 at ./sources/chess.move:268:28+30
    call $t56,$t55 := $1_vector_borrow_mut'$0_game_Node'($t55, $t46);
    if ($abort_flag) {
        assume {:print "$at(2,7484,7514)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t47 := get_field<game::Node>.value($t56) at ./sources/chess.move:269:21+10
    assume {:print "$at(2,7536,7546)"} true;
    $t47 := $value#$0_game_Node($Dereference($t56));

    // trace_local[game]($t2) at ./sources/chess.move:269:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t48 := !=($t47, $t13) at ./sources/chess.move:269:32+2
    $t48 := !$IsEqual'u8'($t47, $t13);

    // if ($t48) goto L22 else goto L31 at ./sources/chess.move:269:17+67
    if ($t48) { goto L22; } else { goto L31; }

    // label L22 at ./sources/chess.move:270:21+5
    assume {:print "$at(2,7576,7581)"} true;
L22:

    // destroy($t2) at ./sources/chess.move:270:21+5
    assume {:print "$at(2,7576,7581)"} true;

    // goto L13 at ./sources/chess.move:270:21+5
    goto L13;

    // label L19 at ./sources/chess.move:275:17+5
    assume {:print "$at(2,7702,7707)"} true;
L19:

    // destroy($t2) at ./sources/chess.move:275:17+5
    assume {:print "$at(2,7702,7707)"} true;

    // goto L13 at ./sources/chess.move:275:17+5
    goto L13;

    // label L21 at ./sources/chess.move:272:21+1
    assume {:print "$at(2,7621,7622)"} true;
L21:

    // $t49 := 1 at ./sources/chess.move:272:25+1
    assume {:print "$at(2,7625,7626)"} true;
    $t49 := 1;
    assume $IsValid'u64'($t49);

    // $t50 := +($t5, $t49) on_abort goto L29 with $t11 at ./sources/chess.move:272:23+1
    call $t50 := $AddU64($t5, $t49);
    if ($abort_flag) {
        assume {:print "$at(2,7623,7624)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t50) at ./sources/chess.move:272:17+1
    assume {:print "$track_local(16,7,5):", $t50} $t50 == $t50;

    // $t51 := 1 at ./sources/chess.move:273:35+1
    assume {:print "$at(2,7662,7663)"} true;
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t6, $t51) on_abort goto L29 with $t11 at ./sources/chess.move:273:33+1
    call $t52 := $AddU64($t6, $t51);
    if ($abort_flag) {
        assume {:print "$at(2,7660,7661)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t52) at ./sources/chess.move:273:17+6
    assume {:print "$track_local(16,7,6):", $t52} $t52 == $t52;

    // goto L27 at ./sources/chess.move:266:13+369
    assume {:print "$at(2,7352,7721)"} true;
    goto L27;

    // label L13 at ./sources/chess.move:279:13+6
    assume {:print "$at(2,7746,7752)"} true;
L13:

    // $t57 := 5 at ./sources/chess.move:279:23+1
    assume {:print "$at(2,7756,7757)"} true;
    $t57 := 5;
    assume $IsValid'u64'($t57);

    // $t58 := >=($t6, $t57) at ./sources/chess.move:279:20+2
    call $t58 := $Ge($t6, $t57);

    // if ($t58) goto L25 else goto L24 at ./sources/chess.move:279:9+52
    if ($t58) { goto L25; } else { goto L24; }

    // label L25 at ./sources/chess.move:280:20+4
    assume {:print "$at(2,7780,7784)"} true;
L25:

    // $t59 := true at ./sources/chess.move:280:20+4
    assume {:print "$at(2,7780,7784)"} true;
    $t59 := true;
    assume $IsValid'bool'($t59);

    // trace_return[0]($t59) at ./sources/chess.move:280:13+11
    assume {:print "$track_return(16,7,0):", $t59} $t59 == $t59;

    // trace_local[game]($t2) at ./sources/chess.move:280:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t59) at ./sources/chess.move:280:13+11
    $t17 := $t59;

    // goto L28 at ./sources/chess.move:280:13+11
    goto L28;

    // label L24 at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
L24:

    // $t60 := false at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    $t60 := false;
    assume $IsValid'bool'($t60);

    // trace_return[0]($t60) at ./sources/chess.move:282:9+5
    assume {:print "$track_return(16,7,0):", $t60} $t60 == $t60;

    // trace_local[game]($t2) at ./sources/chess.move:282:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t60) at ./sources/chess.move:282:9+5
    $t17 := $t60;

    // goto L28 at ./sources/chess.move:282:9+5
    goto L28;

    // label L26 at ./sources/chess.move:282:9+5
    // Loop invariant checking block for the loop started with header: L12
L26:

    // stop() at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    assume false;
    return;

    // label L27 at ./sources/chess.move:282:9+5
    // Loop invariant checking block for the loop started with header: L23
L27:

    // stop() at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    assume false;
    return;

    // label L28 at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
L28:

    // return $t17 at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
    $ret0 := $t17;
    $ret1 := $t2;
    return;

    // label L29 at ./sources/chess.move:283:5+1
L29:

    // abort($t11) at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L30 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L30:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L31 at <internal>:1:1+10
L31:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

}

// fun game::RightTwill [verification] at ./sources/chess.move:240:5+1281
procedure {:timeLimit 40} $0_game_RightTwill$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_game_Board);
    var $t9: $Mutation (Vec (Vec ($0_game_Node)));
    var $t10: $Mutation (Vec ($0_game_Node));
    var $t11: int;
    var $t12: $Mutation ($0_game_Node);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation ($0_game_Board);
    var $t37: $Mutation (Vec (Vec ($0_game_Node)));
    var $t38: $Mutation (Vec ($0_game_Node));
    var $t39: $Mutation ($0_game_Node);
    var $t40: int;
    var $t41: int;
    var $t42: bool;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation ($0_game_Board);
    var $t54: $Mutation (Vec (Vec ($0_game_Node)));
    var $t55: $Mutation (Vec ($0_game_Node));
    var $t56: $Mutation ($0_game_Node);
    var $t57: int;
    var $t58: bool;
    var $t59: bool;
    var $t60: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:240:5+1
    assume {:print "$at(2,6534,6535)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/chess.move:240:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:240:5+1
    assume $IsValid'$0_game_Game'($Dereference($t2));

    // trace_local[a]($t0) at ./sources/chess.move:240:5+1
    assume {:print "$track_local(16,7,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:240:5+1
    assume {:print "$track_local(16,7,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:240:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t8 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:241:43+15
    assume {:print "$at(2,6630,6645)"} true;
    $t8 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t9 := borrow_field<game::Board>.board($t8) at ./sources/chess.move:241:38+26
    $t9 := $ChildMutation($t8, 0, $board#$0_game_Board($Dereference($t8)));

    // $t10 := vector::borrow_mut<vector<game::Node>>($t9, $t0) on_abort goto L29 with $t11 at ./sources/chess.move:241:19+49
    call $t10,$t9 := $1_vector_borrow_mut'vec'$0_game_Node''($t9, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,6606,6655)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t12 := vector::borrow_mut<game::Node>($t10, $t1) on_abort goto L29 with $t11 at ./sources/chess.move:242:20+26
    assume {:print "$at(2,6676,6702)"} true;
    call $t12,$t10 := $1_vector_borrow_mut'$0_game_Node'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,6676,6702)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t13 := get_field<game::Node>.value($t12) at ./sources/chess.move:243:18+10
    assume {:print "$at(2,6721,6731)"} true;
    $t13 := $value#$0_game_Node($Dereference($t12));

    // trace_local[game]($t2) at ./sources/chess.move:243:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t13) at ./sources/chess.move:243:13+2
    assume {:print "$track_local(16,7,7):", $t13} $t13 == $t13;

    // $t14 := 0 at ./sources/chess.move:244:19+1
    assume {:print "$at(2,6751,6752)"} true;
    $t14 := 0;
    assume $IsValid'u8'($t14);

    // $t15 := ==($t13, $t14) at ./sources/chess.move:244:16+2
    $t15 := $IsEqual'u8'($t13, $t14);

    // if ($t15) goto L1 else goto L0 at ./sources/chess.move:244:9+50
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:245:13+12
    assume {:print "$at(2,6769,6781)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:245:13+12
    assume {:print "$at(2,6769,6781)"} true;

    // $t16 := false at ./sources/chess.move:245:20+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at ./sources/chess.move:245:13+12
    assume {:print "$track_return(16,7,0):", $t16} $t16 == $t16;

    // trace_local[game]($t2) at ./sources/chess.move:245:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t16) at ./sources/chess.move:245:13+12
    $t17 := $t16;

    // goto L28 at ./sources/chess.move:245:13+12
    goto L28;

    // label L0 at ./sources/chess.move:248:23+1
    assume {:print "$at(2,6816,6817)"} true;
L0:

    // $t18 := 1 at ./sources/chess.move:248:23+1
    assume {:print "$at(2,6816,6817)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // trace_local[i#1#0]($t18) at ./sources/chess.move:248:13+1
    assume {:print "$track_local(16,7,5):", $t18} $t18 == $t18;

    // $t19 := 1 at ./sources/chess.move:249:28+1
    assume {:print "$at(2,6846,6847)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // trace_local[length#1#0]($t19) at ./sources/chess.move:249:13+6
    assume {:print "$track_local(16,7,6):", $t19} $t19 == $t19;

    // label L12 at ./sources/chess.move:250:16+1
    assume {:print "$at(2,6864,6865)"} true;
L12:

    // $t3 := havoc[val]() at ./sources/chess.move:250:16+1
    assume {:print "$at(2,6864,6865)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t3);

    // $t5 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t6);

    // $t20 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:250:16+1
    assume $IsValid'u8'($t30);

    // $t31 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:250:16+1
    assume $IsValid'bool'($t31);

    // $t32 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t33);

    // $t34 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t34;

    // assume WellFormed($t34) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at ./sources/chess.move:250:16+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/chess.move:250:16+1
    assume $IsValid'u64'($t35);

    // $t36 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:250:16+1
    assume $IsValid'$0_game_Board'($Dereference($t36));

    // $t37 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:250:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t37));

    // $t38 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:250:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t38));

    // $t39 := havoc[mut_all]() at ./sources/chess.move:250:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:250:16+1
    assume $IsValid'$0_game_Node'($Dereference($t39));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:250:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,7,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:250:16+1
    assume {:print "$track_local(16,7,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:250:16+1
    assume !$abort_flag;

    // $t20 := 4 at ./sources/chess.move:250:21+1
    $t20 := 4;
    assume $IsValid'u64'($t20);

    // $t21 := <=($t5, $t20) at ./sources/chess.move:250:18+2
    call $t21 := $Le($t5, $t20);

    // if ($t21) goto L3 else goto L2 at ./sources/chess.move:250:9+440
    if ($t21) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:250:9+440
L3:

    // label L4 at ./sources/chess.move:251:17+1
    assume {:print "$at(2,6890,6891)"} true;
L4:

    // $t22 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:251:20+1
    assume {:print "$at(2,6893,6894)"} true;
    call $t22 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,6893,6894)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t23 := 20 at ./sources/chess.move:251:26+14
    $t23 := 20;
    assume $IsValid'u64'($t23);

    // $t24 := <($t22, $t23) at ./sources/chess.move:251:24+1
    call $t24 := $Lt($t22, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/chess.move:251:17+48
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:251:44+1
L6:

    // $t25 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:251:45+1
    assume {:print "$at(2,6918,6919)"} true;
    call $t25 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,6918,6919)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t26 := 20 at ./sources/chess.move:251:51+14
    $t26 := 20;
    assume $IsValid'u64'($t26);

    // $t3 := <($t25, $t26) at ./sources/chess.move:251:49+1
    call $t3 := $Lt($t25, $t26);

    // goto L7 at ./sources/chess.move:251:17+48
    goto L7;

    // label L5 at ./sources/chess.move:251:17+48
L5:

    // $t27 := false at ./sources/chess.move:251:17+48
    assume {:print "$at(2,6890,6938)"} true;
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t3 := $t27 at ./sources/chess.move:251:17+48
    $t3 := $t27;

    // label L7 at ./sources/chess.move:251:17+48
L7:

    // if ($t3) goto L9 else goto L8 at ./sources/chess.move:251:13+401
    assume {:print "$at(2,6886,7287)"} true;
    if ($t3) { goto L9; } else { goto L8; }

    // label L9 at ./sources/chess.move:252:51+4
    assume {:print "$at(2,6992,6996)"} true;
L9:

    // $t36 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:252:51+15
    assume {:print "$at(2,6992,7007)"} true;
    $t36 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t37 := borrow_field<game::Board>.board($t36) at ./sources/chess.move:252:46+26
    $t37 := $ChildMutation($t36, 0, $board#$0_game_Board($Dereference($t36)));

    // $t28 := +($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:252:76+1
    call $t28 := $AddU64($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7017,7018)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t38 := vector::borrow_mut<vector<game::Node>>($t37, $t28) on_abort goto L29 with $t11 at ./sources/chess.move:252:27+53
    call $t38,$t37 := $1_vector_borrow_mut'vec'$0_game_Node''($t37, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,6968,7021)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t29 := +($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:253:54+1
    assume {:print "$at(2,7076,7077)"} true;
    call $t29 := $AddU64($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7076,7077)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t39 := vector::borrow_mut<game::Node>($t38, $t29) on_abort goto L29 with $t11 at ./sources/chess.move:253:28+30
    call $t39,$t38 := $1_vector_borrow_mut'$0_game_Node'($t38, $t29);
    if ($abort_flag) {
        assume {:print "$at(2,7050,7080)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t30 := get_field<game::Node>.value($t39) at ./sources/chess.move:254:21+10
    assume {:print "$at(2,7102,7112)"} true;
    $t30 := $value#$0_game_Node($Dereference($t39));

    // trace_local[game]($t2) at ./sources/chess.move:254:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t31 := !=($t30, $t13) at ./sources/chess.move:254:32+2
    $t31 := !$IsEqual'u8'($t30, $t13);

    // if ($t31) goto L11 else goto L30 at ./sources/chess.move:254:17+67
    if ($t31) { goto L11; } else { goto L30; }

    // label L11 at ./sources/chess.move:255:21+5
    assume {:print "$at(2,7142,7147)"} true;
L11:

    // goto L2 at ./sources/chess.move:255:21+5
    assume {:print "$at(2,7142,7147)"} true;
    goto L2;

    // label L8 at ./sources/chess.move:260:17+5
    assume {:print "$at(2,7268,7273)"} true;
L8:

    // goto L2 at ./sources/chess.move:260:17+5
    assume {:print "$at(2,7268,7273)"} true;
    goto L2;

    // label L10 at ./sources/chess.move:257:21+1
    assume {:print "$at(2,7187,7188)"} true;
L10:

    // $t32 := 1 at ./sources/chess.move:257:25+1
    assume {:print "$at(2,7191,7192)"} true;
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // $t33 := +($t5, $t32) on_abort goto L29 with $t11 at ./sources/chess.move:257:23+1
    call $t33 := $AddU64($t5, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,7189,7190)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t33) at ./sources/chess.move:257:17+1
    assume {:print "$track_local(16,7,5):", $t33} $t33 == $t33;

    // $t34 := 1 at ./sources/chess.move:258:35+1
    assume {:print "$at(2,7228,7229)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // $t35 := +($t6, $t34) on_abort goto L29 with $t11 at ./sources/chess.move:258:33+1
    call $t35 := $AddU64($t6, $t34);
    if ($abort_flag) {
        assume {:print "$at(2,7226,7227)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t35) at ./sources/chess.move:258:17+6
    assume {:print "$track_local(16,7,6):", $t35} $t35 == $t35;

    // goto L26 at ./sources/chess.move:251:13+401
    assume {:print "$at(2,6886,7287)"} true;
    goto L26;

    // label L2 at ./sources/chess.move:264:13+1
    assume {:print "$at(2,7312,7313)"} true;
L2:

    // $t40 := 1 at ./sources/chess.move:264:13+1
    assume {:print "$at(2,7312,7313)"} true;
    $t40 := 1;
    assume $IsValid'u64'($t40);

    // trace_local[i#1#0]($t40) at ./sources/chess.move:264:9+1
    assume {:print "$track_local(16,7,5):", $t40} $t40 == $t40;

    // label L23 at ./sources/chess.move:265:16+1
    assume {:print "$at(2,7330,7331)"} true;
L23:

    // $t4 := havoc[val]() at ./sources/chess.move:265:16+1
    assume {:print "$at(2,7330,7331)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t6);

    // $t41 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t46);

    // $t47 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:265:16+1
    assume $IsValid'u8'($t47);

    // $t48 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:265:16+1
    assume $IsValid'bool'($t48);

    // $t49 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t49);

    // $t50 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t50;

    // assume WellFormed($t50) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t50);

    // $t51 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t51;

    // assume WellFormed($t51) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t51);

    // $t52 := havoc[val]() at ./sources/chess.move:265:16+1
    havoc $t52;

    // assume WellFormed($t52) at ./sources/chess.move:265:16+1
    assume $IsValid'u64'($t52);

    // $t53 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t53;

    // assume WellFormed($t53) at ./sources/chess.move:265:16+1
    assume $IsValid'$0_game_Board'($Dereference($t53));

    // $t54 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t54;

    // assume WellFormed($t54) at ./sources/chess.move:265:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t54));

    // $t55 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t55;

    // assume WellFormed($t55) at ./sources/chess.move:265:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t55));

    // $t56 := havoc[mut_all]() at ./sources/chess.move:265:16+1
    havoc $t56;

    // assume WellFormed($t56) at ./sources/chess.move:265:16+1
    assume $IsValid'$0_game_Node'($Dereference($t56));

    // trace_local[i#1#0]($t5) at ./sources/chess.move:265:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,7,5):", $t5} $t5 == $t5;

    // trace_local[length#1#0]($t6) at ./sources/chess.move:265:16+1
    assume {:print "$track_local(16,7,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/chess.move:265:16+1
    assume !$abort_flag;

    // $t41 := 4 at ./sources/chess.move:265:21+1
    $t41 := 4;
    assume $IsValid'u64'($t41);

    // $t42 := <=($t5, $t41) at ./sources/chess.move:265:18+2
    call $t42 := $Le($t5, $t41);

    // if ($t42) goto L14 else goto L13 at ./sources/chess.move:265:9+408
    if ($t42) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:265:9+408
L14:

    // label L15 at ./sources/chess.move:266:17+1
    assume {:print "$at(2,7356,7357)"} true;
L15:

    // $t43 := >=($t0, $t5) at ./sources/chess.move:266:20+2
    assume {:print "$at(2,7359,7361)"} true;
    call $t43 := $Ge($t0, $t5);

    // if ($t43) goto L17 else goto L16 at ./sources/chess.move:266:17+16
    if ($t43) { goto L17; } else { goto L16; }

    // label L17 at ./sources/chess.move:266:28+1
L17:

    // $t4 := >($t1, $t5) at ./sources/chess.move:266:30+1
    assume {:print "$at(2,7369,7370)"} true;
    call $t4 := $Gt($t1, $t5);

    // goto L18 at ./sources/chess.move:266:17+16
    goto L18;

    // label L16 at ./sources/chess.move:266:17+16
L16:

    // $t44 := false at ./sources/chess.move:266:17+16
    assume {:print "$at(2,7356,7372)"} true;
    $t44 := false;
    assume $IsValid'bool'($t44);

    // $t4 := $t44 at ./sources/chess.move:266:17+16
    $t4 := $t44;

    // label L18 at ./sources/chess.move:266:17+16
L18:

    // if ($t4) goto L20 else goto L19 at ./sources/chess.move:266:13+369
    assume {:print "$at(2,7352,7721)"} true;
    if ($t4) { goto L20; } else { goto L19; }

    // label L20 at ./sources/chess.move:267:51+4
    assume {:print "$at(2,7426,7430)"} true;
L20:

    // $t53 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:267:51+15
    assume {:print "$at(2,7426,7441)"} true;
    $t53 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t54 := borrow_field<game::Board>.board($t53) at ./sources/chess.move:267:46+26
    $t54 := $ChildMutation($t53, 0, $board#$0_game_Board($Dereference($t53)));

    // $t45 := -($t0, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:267:76+1
    call $t45 := $Sub($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7451,7452)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t55 := vector::borrow_mut<vector<game::Node>>($t54, $t45) on_abort goto L29 with $t11 at ./sources/chess.move:267:27+53
    call $t55,$t54 := $1_vector_borrow_mut'vec'$0_game_Node''($t54, $t45);
    if ($abort_flag) {
        assume {:print "$at(2,7402,7455)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t46 := -($t1, $t5) on_abort goto L29 with $t11 at ./sources/chess.move:268:54+1
    assume {:print "$at(2,7510,7511)"} true;
    call $t46 := $Sub($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,7510,7511)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t56 := vector::borrow_mut<game::Node>($t55, $t46) on_abort goto L29 with $t11 at ./sources/chess.move:268:28+30
    call $t56,$t55 := $1_vector_borrow_mut'$0_game_Node'($t55, $t46);
    if ($abort_flag) {
        assume {:print "$at(2,7484,7514)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // $t47 := get_field<game::Node>.value($t56) at ./sources/chess.move:269:21+10
    assume {:print "$at(2,7536,7546)"} true;
    $t47 := $value#$0_game_Node($Dereference($t56));

    // trace_local[game]($t2) at ./sources/chess.move:269:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t48 := !=($t47, $t13) at ./sources/chess.move:269:32+2
    $t48 := !$IsEqual'u8'($t47, $t13);

    // if ($t48) goto L22 else goto L31 at ./sources/chess.move:269:17+67
    if ($t48) { goto L22; } else { goto L31; }

    // label L22 at ./sources/chess.move:270:21+5
    assume {:print "$at(2,7576,7581)"} true;
L22:

    // destroy($t2) at ./sources/chess.move:270:21+5
    assume {:print "$at(2,7576,7581)"} true;

    // goto L13 at ./sources/chess.move:270:21+5
    goto L13;

    // label L19 at ./sources/chess.move:275:17+5
    assume {:print "$at(2,7702,7707)"} true;
L19:

    // destroy($t2) at ./sources/chess.move:275:17+5
    assume {:print "$at(2,7702,7707)"} true;

    // goto L13 at ./sources/chess.move:275:17+5
    goto L13;

    // label L21 at ./sources/chess.move:272:21+1
    assume {:print "$at(2,7621,7622)"} true;
L21:

    // $t49 := 1 at ./sources/chess.move:272:25+1
    assume {:print "$at(2,7625,7626)"} true;
    $t49 := 1;
    assume $IsValid'u64'($t49);

    // $t50 := +($t5, $t49) on_abort goto L29 with $t11 at ./sources/chess.move:272:23+1
    call $t50 := $AddU64($t5, $t49);
    if ($abort_flag) {
        assume {:print "$at(2,7623,7624)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[i#1#0]($t50) at ./sources/chess.move:272:17+1
    assume {:print "$track_local(16,7,5):", $t50} $t50 == $t50;

    // $t51 := 1 at ./sources/chess.move:273:35+1
    assume {:print "$at(2,7662,7663)"} true;
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t6, $t51) on_abort goto L29 with $t11 at ./sources/chess.move:273:33+1
    call $t52 := $AddU64($t6, $t51);
    if ($abort_flag) {
        assume {:print "$at(2,7660,7661)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,7):", $t11} $t11 == $t11;
        goto L29;
    }

    // trace_local[length#1#0]($t52) at ./sources/chess.move:273:17+6
    assume {:print "$track_local(16,7,6):", $t52} $t52 == $t52;

    // goto L27 at ./sources/chess.move:266:13+369
    assume {:print "$at(2,7352,7721)"} true;
    goto L27;

    // label L13 at ./sources/chess.move:279:13+6
    assume {:print "$at(2,7746,7752)"} true;
L13:

    // $t57 := 5 at ./sources/chess.move:279:23+1
    assume {:print "$at(2,7756,7757)"} true;
    $t57 := 5;
    assume $IsValid'u64'($t57);

    // $t58 := >=($t6, $t57) at ./sources/chess.move:279:20+2
    call $t58 := $Ge($t6, $t57);

    // if ($t58) goto L25 else goto L24 at ./sources/chess.move:279:9+52
    if ($t58) { goto L25; } else { goto L24; }

    // label L25 at ./sources/chess.move:280:20+4
    assume {:print "$at(2,7780,7784)"} true;
L25:

    // $t59 := true at ./sources/chess.move:280:20+4
    assume {:print "$at(2,7780,7784)"} true;
    $t59 := true;
    assume $IsValid'bool'($t59);

    // trace_return[0]($t59) at ./sources/chess.move:280:13+11
    assume {:print "$track_return(16,7,0):", $t59} $t59 == $t59;

    // trace_local[game]($t2) at ./sources/chess.move:280:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t59) at ./sources/chess.move:280:13+11
    $t17 := $t59;

    // goto L28 at ./sources/chess.move:280:13+11
    goto L28;

    // label L24 at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
L24:

    // $t60 := false at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    $t60 := false;
    assume $IsValid'bool'($t60);

    // trace_return[0]($t60) at ./sources/chess.move:282:9+5
    assume {:print "$track_return(16,7,0):", $t60} $t60 == $t60;

    // trace_local[game]($t2) at ./sources/chess.move:282:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,7,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t17 := move($t60) at ./sources/chess.move:282:9+5
    $t17 := $t60;

    // goto L28 at ./sources/chess.move:282:9+5
    goto L28;

    // label L26 at ./sources/chess.move:282:9+5
    // Loop invariant checking block for the loop started with header: L12
L26:

    // stop() at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    assume false;
    return;

    // label L27 at ./sources/chess.move:282:9+5
    // Loop invariant checking block for the loop started with header: L23
L27:

    // stop() at ./sources/chess.move:282:9+5
    assume {:print "$at(2,7804,7809)"} true;
    assume false;
    return;

    // label L28 at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
L28:

    // return $t17 at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
    $ret0 := $t17;
    $ret1 := $t2;
    return;

    // label L29 at ./sources/chess.move:283:5+1
L29:

    // abort($t11) at ./sources/chess.move:283:5+1
    assume {:print "$at(2,7814,7815)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L30 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L30:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L31 at <internal>:1:1+10
L31:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

}

// fun game::Vertical [baseline] at ./sources/chess.move:195:5+1252
procedure {:inline 1} $0_game_Vertical(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($0_game_Board);
    var $t7: $Mutation (Vec (Vec ($0_game_Node)));
    var $t8: $Mutation (Vec ($0_game_Node));
    var $t9: int;
    var $t10: $Mutation ($0_game_Node);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation ($0_game_Board);
    var $t31: $Mutation (Vec (Vec ($0_game_Node)));
    var $t32: $Mutation (Vec ($0_game_Node));
    var $t33: $Mutation ($0_game_Node);
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: bool;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation ($0_game_Board);
    var $t47: $Mutation (Vec (Vec ($0_game_Node)));
    var $t48: $Mutation (Vec ($0_game_Node));
    var $t49: $Mutation ($0_game_Node);
    var $t50: bool;
    var $t51: int;
    var $t52: bool;
    var $t53: bool;
    var $t54: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[a]($t0) at ./sources/chess.move:195:5+1
    assume {:print "$at(2,5276,5277)"} true;
    assume {:print "$track_local(16,6,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:195:5+1
    assume {:print "$track_local(16,6,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:195:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t6 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:196:43+15
    assume {:print "$at(2,5369,5384)"} true;
    $t6 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t7 := borrow_field<game::Board>.board($t6) at ./sources/chess.move:196:38+26
    $t7 := $ChildMutation($t6, 0, $board#$0_game_Board($Dereference($t6)));

    // $t8 := vector::borrow_mut<vector<game::Node>>($t7, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:196:19+49
    call $t8,$t7 := $1_vector_borrow_mut'vec'$0_game_Node''($t7, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,5345,5394)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t10 := vector::borrow_mut<game::Node>($t8, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:197:20+26
    assume {:print "$at(2,5415,5441)"} true;
    call $t10,$t8 := $1_vector_borrow_mut'$0_game_Node'($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,5415,5441)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t11 := get_field<game::Node>.value($t10) at ./sources/chess.move:198:18+10
    assume {:print "$at(2,5460,5470)"} true;
    $t11 := $value#$0_game_Node($Dereference($t10));

    // trace_local[game]($t2) at ./sources/chess.move:198:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t11) at ./sources/chess.move:198:13+2
    assume {:print "$track_local(16,6,5):", $t11} $t11 == $t11;

    // $t12 := 0 at ./sources/chess.move:199:19+1
    assume {:print "$at(2,5490,5491)"} true;
    $t12 := 0;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t11, $t12) at ./sources/chess.move:199:16+2
    $t13 := $IsEqual'u8'($t11, $t12);

    // if ($t13) goto L1 else goto L0 at ./sources/chess.move:199:9+50
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:200:13+12
    assume {:print "$at(2,5508,5520)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:200:13+12
    assume {:print "$at(2,5508,5520)"} true;

    // $t14 := false at ./sources/chess.move:200:20+5
    $t14 := false;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ./sources/chess.move:200:13+12
    assume {:print "$track_return(16,6,0):", $t14} $t14 == $t14;

    // trace_local[game]($t2) at ./sources/chess.move:200:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t14) at ./sources/chess.move:200:13+12
    $t15 := $t14;

    // goto L22 at ./sources/chess.move:200:13+12
    goto L22;

    // label L0 at ./sources/chess.move:203:28+1
    assume {:print "$at(2,5560,5561)"} true;
L0:

    // $t16 := 1 at ./sources/chess.move:203:28+1
    assume {:print "$at(2,5560,5561)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // trace_local[length#1#0]($t16) at ./sources/chess.move:203:13+6
    assume {:print "$track_local(16,6,4):", $t16} $t16 == $t16;

    // $t17 := 1 at ./sources/chess.move:204:23+1
    assume {:print "$at(2,5585,5586)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // trace_local[i#1#0]($t17) at ./sources/chess.move:204:13+1
    assume {:print "$track_local(16,6,3):", $t17} $t17 == $t17;

    // label L9 at ./sources/chess.move:205:16+1
    assume {:print "$at(2,5603,5604)"} true;
L9:

    // $t3 := havoc[val]() at ./sources/chess.move:205:16+1
    assume {:print "$at(2,5603,5604)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t4);

    // $t18 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:205:16+1
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:205:16+1
    assume $IsValid'$0_game_Board'($Dereference($t30));

    // $t31 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:205:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t31));

    // $t32 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:205:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t32));

    // $t33 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:205:16+1
    assume $IsValid'$0_game_Node'($Dereference($t33));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:205:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,6,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:205:16+1
    assume {:print "$track_local(16,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:205:16+1
    assume !$abort_flag;

    // $t18 := 4 at ./sources/chess.move:205:21+1
    $t18 := 4;
    assume $IsValid'u64'($t18);

    // $t19 := <=($t3, $t18) at ./sources/chess.move:205:18+2
    call $t19 := $Le($t3, $t18);

    // if ($t19) goto L3 else goto L2 at ./sources/chess.move:205:9+418
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:205:9+418
L3:

    // label L4 at ./sources/chess.move:206:18+1
    assume {:print "$at(2,5630,5631)"} true;
L4:

    // $t20 := +($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:206:20+1
    assume {:print "$at(2,5632,5633)"} true;
    call $t20 := $AddU64($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,5632,5633)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t21 := 20 at ./sources/chess.move:206:26+14
    $t21 := 20;
    assume $IsValid'u64'($t21);

    // $t22 := <($t20, $t21) at ./sources/chess.move:206:24+1
    call $t22 := $Lt($t20, $t21);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:206:13+379
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:207:51+4
    assume {:print "$at(2,5706,5710)"} true;
L6:

    // $t30 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:207:51+15
    assume {:print "$at(2,5706,5721)"} true;
    $t30 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t31 := borrow_field<game::Board>.board($t30) at ./sources/chess.move:207:46+26
    $t31 := $ChildMutation($t30, 0, $board#$0_game_Board($Dereference($t30)));

    // $t23 := +($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:207:76+1
    call $t23 := $AddU64($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,5731,5732)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t32 := vector::borrow_mut<vector<game::Node>>($t31, $t23) on_abort goto L23 with $t9 at ./sources/chess.move:207:27+53
    call $t32,$t31 := $1_vector_borrow_mut'vec'$0_game_Node''($t31, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,5682,5735)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t33 := vector::borrow_mut<game::Node>($t32, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:208:28+26
    assume {:print "$at(2,5764,5790)"} true;
    call $t33,$t32 := $1_vector_borrow_mut'$0_game_Node'($t32, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,5764,5790)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t24 := get_field<game::Node>.value($t33) at ./sources/chess.move:209:21+10
    assume {:print "$at(2,5812,5822)"} true;
    $t24 := $value#$0_game_Node($Dereference($t33));

    // trace_local[game]($t2) at ./sources/chess.move:209:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t25 := !=($t24, $t11) at ./sources/chess.move:209:32+2
    $t25 := !$IsEqual'u8'($t24, $t11);

    // if ($t25) goto L8 else goto L24 at ./sources/chess.move:209:17+67
    if ($t25) { goto L8; } else { goto L24; }

    // label L8 at ./sources/chess.move:210:21+5
    assume {:print "$at(2,5852,5857)"} true;
L8:

    // goto L2 at ./sources/chess.move:210:21+5
    assume {:print "$at(2,5852,5857)"} true;
    goto L2;

    // label L5 at ./sources/chess.move:215:17+12
    assume {:print "$at(2,5978,5990)"} true;
L5:

    // destroy($t2) at ./sources/chess.move:215:17+12
    assume {:print "$at(2,5978,5990)"} true;

    // $t34 := false at ./sources/chess.move:215:24+5
    $t34 := false;
    assume $IsValid'bool'($t34);

    // trace_return[0]($t34) at ./sources/chess.move:215:17+12
    assume {:print "$track_return(16,6,0):", $t34} $t34 == $t34;

    // trace_local[game]($t2) at ./sources/chess.move:215:17+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t34) at ./sources/chess.move:215:17+12
    $t15 := $t34;

    // goto L22 at ./sources/chess.move:215:17+12
    goto L22;

    // label L7 at ./sources/chess.move:212:21+1
    assume {:print "$at(2,5897,5898)"} true;
L7:

    // $t26 := 1 at ./sources/chess.move:212:25+1
    assume {:print "$at(2,5901,5902)"} true;
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := +($t3, $t26) on_abort goto L23 with $t9 at ./sources/chess.move:212:23+1
    call $t27 := $AddU64($t3, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,5899,5900)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t27) at ./sources/chess.move:212:17+1
    assume {:print "$track_local(16,6,3):", $t27} $t27 == $t27;

    // $t28 := 1 at ./sources/chess.move:213:35+1
    assume {:print "$at(2,5938,5939)"} true;
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t4, $t28) on_abort goto L23 with $t9 at ./sources/chess.move:213:33+1
    call $t29 := $AddU64($t4, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,5936,5937)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t29) at ./sources/chess.move:213:17+6
    assume {:print "$track_local(16,6,4):", $t29} $t29 == $t29;

    // goto L20 at ./sources/chess.move:206:13+379
    assume {:print "$at(2,5625,6004)"} true;
    goto L20;

    // label L2 at ./sources/chess.move:219:13+1
    assume {:print "$at(2,6029,6030)"} true;
L2:

    // $t35 := 1 at ./sources/chess.move:219:13+1
    assume {:print "$at(2,6029,6030)"} true;
    $t35 := 1;
    assume $IsValid'u64'($t35);

    // trace_local[i#1#0]($t35) at ./sources/chess.move:219:9+1
    assume {:print "$track_local(16,6,3):", $t35} $t35 == $t35;

    // label L17 at ./sources/chess.move:220:16+1
    assume {:print "$at(2,6047,6048)"} true;
L17:

    // $t3 := havoc[val]() at ./sources/chess.move:220:16+1
    assume {:print "$at(2,6047,6048)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t4);

    // $t36 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t36);

    // $t37 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t37);

    // $t38 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t38);

    // $t39 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:220:16+1
    assume $IsValid'u8'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:220:16+1
    assume $IsValid'$0_game_Board'($Dereference($t46));

    // $t47 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:220:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t47));

    // $t48 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:220:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t48));

    // $t49 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:220:16+1
    assume $IsValid'$0_game_Node'($Dereference($t49));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:220:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,6,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:220:16+1
    assume {:print "$track_local(16,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:220:16+1
    assume !$abort_flag;

    // $t36 := 4 at ./sources/chess.move:220:21+1
    $t36 := 4;
    assume $IsValid'u64'($t36);

    // $t37 := <=($t3, $t36) at ./sources/chess.move:220:18+2
    call $t37 := $Le($t3, $t36);

    // if ($t37) goto L11 else goto L10 at ./sources/chess.move:220:9+404
    if ($t37) { goto L11; } else { goto L10; }

    // label L11 at ./sources/chess.move:220:9+404
L11:

    // label L12 at ./sources/chess.move:221:18+1
    assume {:print "$at(2,6074,6075)"} true;
L12:

    // $t38 := >=($t0, $t3) at ./sources/chess.move:221:21+2
    assume {:print "$at(2,6077,6079)"} true;
    call $t38 := $Ge($t0, $t3);

    // if ($t38) goto L14 else goto L13 at ./sources/chess.move:221:13+365
    if ($t38) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:222:51+4
    assume {:print "$at(2,6136,6140)"} true;
L14:

    // $t46 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:222:51+15
    assume {:print "$at(2,6136,6151)"} true;
    $t46 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t47 := borrow_field<game::Board>.board($t46) at ./sources/chess.move:222:46+26
    $t47 := $ChildMutation($t46, 0, $board#$0_game_Board($Dereference($t46)));

    // $t39 := -($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:222:76+1
    call $t39 := $Sub($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,6161,6162)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t48 := vector::borrow_mut<vector<game::Node>>($t47, $t39) on_abort goto L23 with $t9 at ./sources/chess.move:222:27+53
    call $t48,$t47 := $1_vector_borrow_mut'vec'$0_game_Node''($t47, $t39);
    if ($abort_flag) {
        assume {:print "$at(2,6112,6165)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t49 := vector::borrow_mut<game::Node>($t48, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:223:28+26
    assume {:print "$at(2,6194,6220)"} true;
    call $t49,$t48 := $1_vector_borrow_mut'$0_game_Node'($t48, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,6194,6220)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t40 := get_field<game::Node>.value($t49) at ./sources/chess.move:224:21+10
    assume {:print "$at(2,6242,6252)"} true;
    $t40 := $value#$0_game_Node($Dereference($t49));

    // trace_local[game]($t2) at ./sources/chess.move:224:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t41 := !=($t40, $t11) at ./sources/chess.move:224:32+2
    $t41 := !$IsEqual'u8'($t40, $t11);

    // if ($t41) goto L16 else goto L25 at ./sources/chess.move:224:17+67
    if ($t41) { goto L16; } else { goto L25; }

    // label L16 at ./sources/chess.move:225:21+5
    assume {:print "$at(2,6282,6287)"} true;
L16:

    // destroy($t2) at ./sources/chess.move:225:21+5
    assume {:print "$at(2,6282,6287)"} true;

    // goto L10 at ./sources/chess.move:225:21+5
    goto L10;

    // label L13 at ./sources/chess.move:230:17+12
    assume {:print "$at(2,6408,6420)"} true;
L13:

    // destroy($t2) at ./sources/chess.move:230:17+12
    assume {:print "$at(2,6408,6420)"} true;

    // $t50 := false at ./sources/chess.move:230:24+5
    $t50 := false;
    assume $IsValid'bool'($t50);

    // trace_return[0]($t50) at ./sources/chess.move:230:17+12
    assume {:print "$track_return(16,6,0):", $t50} $t50 == $t50;

    // trace_local[game]($t2) at ./sources/chess.move:230:17+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t50) at ./sources/chess.move:230:17+12
    $t15 := $t50;

    // goto L22 at ./sources/chess.move:230:17+12
    goto L22;

    // label L15 at ./sources/chess.move:227:21+1
    assume {:print "$at(2,6327,6328)"} true;
L15:

    // $t42 := 1 at ./sources/chess.move:227:25+1
    assume {:print "$at(2,6331,6332)"} true;
    $t42 := 1;
    assume $IsValid'u64'($t42);

    // $t43 := +($t3, $t42) on_abort goto L23 with $t9 at ./sources/chess.move:227:23+1
    call $t43 := $AddU64($t3, $t42);
    if ($abort_flag) {
        assume {:print "$at(2,6329,6330)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t43) at ./sources/chess.move:227:17+1
    assume {:print "$track_local(16,6,3):", $t43} $t43 == $t43;

    // $t44 := 1 at ./sources/chess.move:228:35+1
    assume {:print "$at(2,6368,6369)"} true;
    $t44 := 1;
    assume $IsValid'u64'($t44);

    // $t45 := +($t4, $t44) on_abort goto L23 with $t9 at ./sources/chess.move:228:33+1
    call $t45 := $AddU64($t4, $t44);
    if ($abort_flag) {
        assume {:print "$at(2,6366,6367)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t45) at ./sources/chess.move:228:17+6
    assume {:print "$track_local(16,6,4):", $t45} $t45 == $t45;

    // goto L21 at ./sources/chess.move:221:13+365
    assume {:print "$at(2,6069,6434)"} true;
    goto L21;

    // label L10 at ./sources/chess.move:234:13+6
    assume {:print "$at(2,6459,6465)"} true;
L10:

    // $t51 := 5 at ./sources/chess.move:234:23+1
    assume {:print "$at(2,6469,6470)"} true;
    $t51 := 5;
    assume $IsValid'u64'($t51);

    // $t52 := >=($t4, $t51) at ./sources/chess.move:234:20+2
    call $t52 := $Ge($t4, $t51);

    // if ($t52) goto L19 else goto L18 at ./sources/chess.move:234:9+52
    if ($t52) { goto L19; } else { goto L18; }

    // label L19 at ./sources/chess.move:235:20+4
    assume {:print "$at(2,6493,6497)"} true;
L19:

    // $t53 := true at ./sources/chess.move:235:20+4
    assume {:print "$at(2,6493,6497)"} true;
    $t53 := true;
    assume $IsValid'bool'($t53);

    // trace_return[0]($t53) at ./sources/chess.move:235:13+11
    assume {:print "$track_return(16,6,0):", $t53} $t53 == $t53;

    // trace_local[game]($t2) at ./sources/chess.move:235:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t53) at ./sources/chess.move:235:13+11
    $t15 := $t53;

    // goto L22 at ./sources/chess.move:235:13+11
    goto L22;

    // label L18 at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
L18:

    // $t54 := false at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    $t54 := false;
    assume $IsValid'bool'($t54);

    // trace_return[0]($t54) at ./sources/chess.move:237:9+5
    assume {:print "$track_return(16,6,0):", $t54} $t54 == $t54;

    // trace_local[game]($t2) at ./sources/chess.move:237:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t54) at ./sources/chess.move:237:9+5
    $t15 := $t54;

    // goto L22 at ./sources/chess.move:237:9+5
    goto L22;

    // label L20 at ./sources/chess.move:237:9+5
    // Loop invariant checking block for the loop started with header: L9
L20:

    // stop() at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    assume false;
    return;

    // label L21 at ./sources/chess.move:237:9+5
    // Loop invariant checking block for the loop started with header: L17
L21:

    // stop() at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    assume false;
    return;

    // label L22 at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
L22:

    // return $t15 at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
    $ret0 := $t15;
    $ret1 := $t2;
    return;

    // label L23 at ./sources/chess.move:238:5+1
L23:

    // abort($t9) at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

    // label L24 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L24:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L7 at <internal>:1:1+10
    goto L7;

    // label L25 at <internal>:1:1+10
L25:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L15 at <internal>:1:1+10
    goto L15;

}

// fun game::Vertical [verification] at ./sources/chess.move:195:5+1252
procedure {:timeLimit 40} $0_game_Vertical$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($0_game_Game)) returns ($ret0: bool, $ret1: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($0_game_Board);
    var $t7: $Mutation (Vec (Vec ($0_game_Node)));
    var $t8: $Mutation (Vec ($0_game_Node));
    var $t9: int;
    var $t10: $Mutation ($0_game_Node);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation ($0_game_Board);
    var $t31: $Mutation (Vec (Vec ($0_game_Node)));
    var $t32: $Mutation (Vec ($0_game_Node));
    var $t33: $Mutation ($0_game_Node);
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: bool;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation ($0_game_Board);
    var $t47: $Mutation (Vec (Vec ($0_game_Node)));
    var $t48: $Mutation (Vec ($0_game_Node));
    var $t49: $Mutation ($0_game_Node);
    var $t50: bool;
    var $t51: int;
    var $t52: bool;
    var $t53: bool;
    var $t54: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($0_game_Game);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:195:5+1
    assume {:print "$at(2,5276,5277)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/chess.move:195:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:195:5+1
    assume $IsValid'$0_game_Game'($Dereference($t2));

    // trace_local[a]($t0) at ./sources/chess.move:195:5+1
    assume {:print "$track_local(16,6,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at ./sources/chess.move:195:5+1
    assume {:print "$track_local(16,6,1):", $t1} $t1 == $t1;

    // trace_local[game]($t2) at ./sources/chess.move:195:5+1
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t6 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:196:43+15
    assume {:print "$at(2,5369,5384)"} true;
    $t6 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t7 := borrow_field<game::Board>.board($t6) at ./sources/chess.move:196:38+26
    $t7 := $ChildMutation($t6, 0, $board#$0_game_Board($Dereference($t6)));

    // $t8 := vector::borrow_mut<vector<game::Node>>($t7, $t0) on_abort goto L23 with $t9 at ./sources/chess.move:196:19+49
    call $t8,$t7 := $1_vector_borrow_mut'vec'$0_game_Node''($t7, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,5345,5394)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t10 := vector::borrow_mut<game::Node>($t8, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:197:20+26
    assume {:print "$at(2,5415,5441)"} true;
    call $t10,$t8 := $1_vector_borrow_mut'$0_game_Node'($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,5415,5441)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t11 := get_field<game::Node>.value($t10) at ./sources/chess.move:198:18+10
    assume {:print "$at(2,5460,5470)"} true;
    $t11 := $value#$0_game_Node($Dereference($t10));

    // trace_local[game]($t2) at ./sources/chess.move:198:18+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[qz#1#0]($t11) at ./sources/chess.move:198:13+2
    assume {:print "$track_local(16,6,5):", $t11} $t11 == $t11;

    // $t12 := 0 at ./sources/chess.move:199:19+1
    assume {:print "$at(2,5490,5491)"} true;
    $t12 := 0;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t11, $t12) at ./sources/chess.move:199:16+2
    $t13 := $IsEqual'u8'($t11, $t12);

    // if ($t13) goto L1 else goto L0 at ./sources/chess.move:199:9+50
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:200:13+12
    assume {:print "$at(2,5508,5520)"} true;
L1:

    // destroy($t2) at ./sources/chess.move:200:13+12
    assume {:print "$at(2,5508,5520)"} true;

    // $t14 := false at ./sources/chess.move:200:20+5
    $t14 := false;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ./sources/chess.move:200:13+12
    assume {:print "$track_return(16,6,0):", $t14} $t14 == $t14;

    // trace_local[game]($t2) at ./sources/chess.move:200:13+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t14) at ./sources/chess.move:200:13+12
    $t15 := $t14;

    // goto L22 at ./sources/chess.move:200:13+12
    goto L22;

    // label L0 at ./sources/chess.move:203:28+1
    assume {:print "$at(2,5560,5561)"} true;
L0:

    // $t16 := 1 at ./sources/chess.move:203:28+1
    assume {:print "$at(2,5560,5561)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // trace_local[length#1#0]($t16) at ./sources/chess.move:203:13+6
    assume {:print "$track_local(16,6,4):", $t16} $t16 == $t16;

    // $t17 := 1 at ./sources/chess.move:204:23+1
    assume {:print "$at(2,5585,5586)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // trace_local[i#1#0]($t17) at ./sources/chess.move:204:13+1
    assume {:print "$track_local(16,6,3):", $t17} $t17 == $t17;

    // label L9 at ./sources/chess.move:205:16+1
    assume {:print "$at(2,5603,5604)"} true;
L9:

    // $t3 := havoc[val]() at ./sources/chess.move:205:16+1
    assume {:print "$at(2,5603,5604)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t4);

    // $t18 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:205:16+1
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:205:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/chess.move:205:16+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:205:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:205:16+1
    assume $IsValid'$0_game_Board'($Dereference($t30));

    // $t31 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:205:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t31));

    // $t32 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:205:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t32));

    // $t33 := havoc[mut_all]() at ./sources/chess.move:205:16+1
    havoc $t33;

    // assume WellFormed($t33) at ./sources/chess.move:205:16+1
    assume $IsValid'$0_game_Node'($Dereference($t33));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:205:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,6,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:205:16+1
    assume {:print "$track_local(16,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:205:16+1
    assume !$abort_flag;

    // $t18 := 4 at ./sources/chess.move:205:21+1
    $t18 := 4;
    assume $IsValid'u64'($t18);

    // $t19 := <=($t3, $t18) at ./sources/chess.move:205:18+2
    call $t19 := $Le($t3, $t18);

    // if ($t19) goto L3 else goto L2 at ./sources/chess.move:205:9+418
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at ./sources/chess.move:205:9+418
L3:

    // label L4 at ./sources/chess.move:206:18+1
    assume {:print "$at(2,5630,5631)"} true;
L4:

    // $t20 := +($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:206:20+1
    assume {:print "$at(2,5632,5633)"} true;
    call $t20 := $AddU64($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,5632,5633)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t21 := 20 at ./sources/chess.move:206:26+14
    $t21 := 20;
    assume $IsValid'u64'($t21);

    // $t22 := <($t20, $t21) at ./sources/chess.move:206:24+1
    call $t22 := $Lt($t20, $t21);

    // if ($t22) goto L6 else goto L5 at ./sources/chess.move:206:13+379
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at ./sources/chess.move:207:51+4
    assume {:print "$at(2,5706,5710)"} true;
L6:

    // $t30 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:207:51+15
    assume {:print "$at(2,5706,5721)"} true;
    $t30 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t31 := borrow_field<game::Board>.board($t30) at ./sources/chess.move:207:46+26
    $t31 := $ChildMutation($t30, 0, $board#$0_game_Board($Dereference($t30)));

    // $t23 := +($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:207:76+1
    call $t23 := $AddU64($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,5731,5732)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t32 := vector::borrow_mut<vector<game::Node>>($t31, $t23) on_abort goto L23 with $t9 at ./sources/chess.move:207:27+53
    call $t32,$t31 := $1_vector_borrow_mut'vec'$0_game_Node''($t31, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,5682,5735)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t33 := vector::borrow_mut<game::Node>($t32, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:208:28+26
    assume {:print "$at(2,5764,5790)"} true;
    call $t33,$t32 := $1_vector_borrow_mut'$0_game_Node'($t32, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,5764,5790)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t24 := get_field<game::Node>.value($t33) at ./sources/chess.move:209:21+10
    assume {:print "$at(2,5812,5822)"} true;
    $t24 := $value#$0_game_Node($Dereference($t33));

    // trace_local[game]($t2) at ./sources/chess.move:209:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t25 := !=($t24, $t11) at ./sources/chess.move:209:32+2
    $t25 := !$IsEqual'u8'($t24, $t11);

    // if ($t25) goto L8 else goto L24 at ./sources/chess.move:209:17+67
    if ($t25) { goto L8; } else { goto L24; }

    // label L8 at ./sources/chess.move:210:21+5
    assume {:print "$at(2,5852,5857)"} true;
L8:

    // goto L2 at ./sources/chess.move:210:21+5
    assume {:print "$at(2,5852,5857)"} true;
    goto L2;

    // label L5 at ./sources/chess.move:215:17+12
    assume {:print "$at(2,5978,5990)"} true;
L5:

    // destroy($t2) at ./sources/chess.move:215:17+12
    assume {:print "$at(2,5978,5990)"} true;

    // $t34 := false at ./sources/chess.move:215:24+5
    $t34 := false;
    assume $IsValid'bool'($t34);

    // trace_return[0]($t34) at ./sources/chess.move:215:17+12
    assume {:print "$track_return(16,6,0):", $t34} $t34 == $t34;

    // trace_local[game]($t2) at ./sources/chess.move:215:17+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t34) at ./sources/chess.move:215:17+12
    $t15 := $t34;

    // goto L22 at ./sources/chess.move:215:17+12
    goto L22;

    // label L7 at ./sources/chess.move:212:21+1
    assume {:print "$at(2,5897,5898)"} true;
L7:

    // $t26 := 1 at ./sources/chess.move:212:25+1
    assume {:print "$at(2,5901,5902)"} true;
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := +($t3, $t26) on_abort goto L23 with $t9 at ./sources/chess.move:212:23+1
    call $t27 := $AddU64($t3, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,5899,5900)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t27) at ./sources/chess.move:212:17+1
    assume {:print "$track_local(16,6,3):", $t27} $t27 == $t27;

    // $t28 := 1 at ./sources/chess.move:213:35+1
    assume {:print "$at(2,5938,5939)"} true;
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t4, $t28) on_abort goto L23 with $t9 at ./sources/chess.move:213:33+1
    call $t29 := $AddU64($t4, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,5936,5937)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t29) at ./sources/chess.move:213:17+6
    assume {:print "$track_local(16,6,4):", $t29} $t29 == $t29;

    // goto L20 at ./sources/chess.move:206:13+379
    assume {:print "$at(2,5625,6004)"} true;
    goto L20;

    // label L2 at ./sources/chess.move:219:13+1
    assume {:print "$at(2,6029,6030)"} true;
L2:

    // $t35 := 1 at ./sources/chess.move:219:13+1
    assume {:print "$at(2,6029,6030)"} true;
    $t35 := 1;
    assume $IsValid'u64'($t35);

    // trace_local[i#1#0]($t35) at ./sources/chess.move:219:9+1
    assume {:print "$track_local(16,6,3):", $t35} $t35 == $t35;

    // label L17 at ./sources/chess.move:220:16+1
    assume {:print "$at(2,6047,6048)"} true;
L17:

    // $t3 := havoc[val]() at ./sources/chess.move:220:16+1
    assume {:print "$at(2,6047,6048)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t4);

    // $t36 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t36);

    // $t37 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t37);

    // $t38 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t38);

    // $t39 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/chess.move:220:16+1
    assume $IsValid'u8'($t40);

    // $t41 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/chess.move:220:16+1
    assume $IsValid'bool'($t41);

    // $t42 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t43;

    // assume WellFormed($t43) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t43);

    // $t44 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t44;

    // assume WellFormed($t44) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t44);

    // $t45 := havoc[val]() at ./sources/chess.move:220:16+1
    havoc $t45;

    // assume WellFormed($t45) at ./sources/chess.move:220:16+1
    assume $IsValid'u64'($t45);

    // $t46 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/chess.move:220:16+1
    assume $IsValid'$0_game_Board'($Dereference($t46));

    // $t47 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/chess.move:220:16+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t47));

    // $t48 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/chess.move:220:16+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t48));

    // $t49 := havoc[mut_all]() at ./sources/chess.move:220:16+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/chess.move:220:16+1
    assume $IsValid'$0_game_Node'($Dereference($t49));

    // trace_local[i#1#0]($t3) at ./sources/chess.move:220:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0, length#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,6,3):", $t3} $t3 == $t3;

    // trace_local[length#1#0]($t4) at ./sources/chess.move:220:16+1
    assume {:print "$track_local(16,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/chess.move:220:16+1
    assume !$abort_flag;

    // $t36 := 4 at ./sources/chess.move:220:21+1
    $t36 := 4;
    assume $IsValid'u64'($t36);

    // $t37 := <=($t3, $t36) at ./sources/chess.move:220:18+2
    call $t37 := $Le($t3, $t36);

    // if ($t37) goto L11 else goto L10 at ./sources/chess.move:220:9+404
    if ($t37) { goto L11; } else { goto L10; }

    // label L11 at ./sources/chess.move:220:9+404
L11:

    // label L12 at ./sources/chess.move:221:18+1
    assume {:print "$at(2,6074,6075)"} true;
L12:

    // $t38 := >=($t0, $t3) at ./sources/chess.move:221:21+2
    assume {:print "$at(2,6077,6079)"} true;
    call $t38 := $Ge($t0, $t3);

    // if ($t38) goto L14 else goto L13 at ./sources/chess.move:221:13+365
    if ($t38) { goto L14; } else { goto L13; }

    // label L14 at ./sources/chess.move:222:51+4
    assume {:print "$at(2,6136,6140)"} true;
L14:

    // $t46 := borrow_field<game::Game>.chessBoard($t2) at ./sources/chess.move:222:51+15
    assume {:print "$at(2,6136,6151)"} true;
    $t46 := $ChildMutation($t2, 2, $chessBoard#$0_game_Game($Dereference($t2)));

    // $t47 := borrow_field<game::Board>.board($t46) at ./sources/chess.move:222:46+26
    $t47 := $ChildMutation($t46, 0, $board#$0_game_Board($Dereference($t46)));

    // $t39 := -($t0, $t3) on_abort goto L23 with $t9 at ./sources/chess.move:222:76+1
    call $t39 := $Sub($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,6161,6162)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t48 := vector::borrow_mut<vector<game::Node>>($t47, $t39) on_abort goto L23 with $t9 at ./sources/chess.move:222:27+53
    call $t48,$t47 := $1_vector_borrow_mut'vec'$0_game_Node''($t47, $t39);
    if ($abort_flag) {
        assume {:print "$at(2,6112,6165)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t49 := vector::borrow_mut<game::Node>($t48, $t1) on_abort goto L23 with $t9 at ./sources/chess.move:223:28+26
    assume {:print "$at(2,6194,6220)"} true;
    call $t49,$t48 := $1_vector_borrow_mut'$0_game_Node'($t48, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,6194,6220)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // $t40 := get_field<game::Node>.value($t49) at ./sources/chess.move:224:21+10
    assume {:print "$at(2,6242,6252)"} true;
    $t40 := $value#$0_game_Node($Dereference($t49));

    // trace_local[game]($t2) at ./sources/chess.move:224:21+10
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t41 := !=($t40, $t11) at ./sources/chess.move:224:32+2
    $t41 := !$IsEqual'u8'($t40, $t11);

    // if ($t41) goto L16 else goto L25 at ./sources/chess.move:224:17+67
    if ($t41) { goto L16; } else { goto L25; }

    // label L16 at ./sources/chess.move:225:21+5
    assume {:print "$at(2,6282,6287)"} true;
L16:

    // destroy($t2) at ./sources/chess.move:225:21+5
    assume {:print "$at(2,6282,6287)"} true;

    // goto L10 at ./sources/chess.move:225:21+5
    goto L10;

    // label L13 at ./sources/chess.move:230:17+12
    assume {:print "$at(2,6408,6420)"} true;
L13:

    // destroy($t2) at ./sources/chess.move:230:17+12
    assume {:print "$at(2,6408,6420)"} true;

    // $t50 := false at ./sources/chess.move:230:24+5
    $t50 := false;
    assume $IsValid'bool'($t50);

    // trace_return[0]($t50) at ./sources/chess.move:230:17+12
    assume {:print "$track_return(16,6,0):", $t50} $t50 == $t50;

    // trace_local[game]($t2) at ./sources/chess.move:230:17+12
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t50) at ./sources/chess.move:230:17+12
    $t15 := $t50;

    // goto L22 at ./sources/chess.move:230:17+12
    goto L22;

    // label L15 at ./sources/chess.move:227:21+1
    assume {:print "$at(2,6327,6328)"} true;
L15:

    // $t42 := 1 at ./sources/chess.move:227:25+1
    assume {:print "$at(2,6331,6332)"} true;
    $t42 := 1;
    assume $IsValid'u64'($t42);

    // $t43 := +($t3, $t42) on_abort goto L23 with $t9 at ./sources/chess.move:227:23+1
    call $t43 := $AddU64($t3, $t42);
    if ($abort_flag) {
        assume {:print "$at(2,6329,6330)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[i#1#0]($t43) at ./sources/chess.move:227:17+1
    assume {:print "$track_local(16,6,3):", $t43} $t43 == $t43;

    // $t44 := 1 at ./sources/chess.move:228:35+1
    assume {:print "$at(2,6368,6369)"} true;
    $t44 := 1;
    assume $IsValid'u64'($t44);

    // $t45 := +($t4, $t44) on_abort goto L23 with $t9 at ./sources/chess.move:228:33+1
    call $t45 := $AddU64($t4, $t44);
    if ($abort_flag) {
        assume {:print "$at(2,6366,6367)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,6):", $t9} $t9 == $t9;
        goto L23;
    }

    // trace_local[length#1#0]($t45) at ./sources/chess.move:228:17+6
    assume {:print "$track_local(16,6,4):", $t45} $t45 == $t45;

    // goto L21 at ./sources/chess.move:221:13+365
    assume {:print "$at(2,6069,6434)"} true;
    goto L21;

    // label L10 at ./sources/chess.move:234:13+6
    assume {:print "$at(2,6459,6465)"} true;
L10:

    // $t51 := 5 at ./sources/chess.move:234:23+1
    assume {:print "$at(2,6469,6470)"} true;
    $t51 := 5;
    assume $IsValid'u64'($t51);

    // $t52 := >=($t4, $t51) at ./sources/chess.move:234:20+2
    call $t52 := $Ge($t4, $t51);

    // if ($t52) goto L19 else goto L18 at ./sources/chess.move:234:9+52
    if ($t52) { goto L19; } else { goto L18; }

    // label L19 at ./sources/chess.move:235:20+4
    assume {:print "$at(2,6493,6497)"} true;
L19:

    // $t53 := true at ./sources/chess.move:235:20+4
    assume {:print "$at(2,6493,6497)"} true;
    $t53 := true;
    assume $IsValid'bool'($t53);

    // trace_return[0]($t53) at ./sources/chess.move:235:13+11
    assume {:print "$track_return(16,6,0):", $t53} $t53 == $t53;

    // trace_local[game]($t2) at ./sources/chess.move:235:13+11
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t53) at ./sources/chess.move:235:13+11
    $t15 := $t53;

    // goto L22 at ./sources/chess.move:235:13+11
    goto L22;

    // label L18 at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
L18:

    // $t54 := false at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    $t54 := false;
    assume $IsValid'bool'($t54);

    // trace_return[0]($t54) at ./sources/chess.move:237:9+5
    assume {:print "$track_return(16,6,0):", $t54} $t54 == $t54;

    // trace_local[game]($t2) at ./sources/chess.move:237:9+5
    $temp_0'$0_game_Game' := $Dereference($t2);
    assume {:print "$track_local(16,6,2):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t15 := move($t54) at ./sources/chess.move:237:9+5
    $t15 := $t54;

    // goto L22 at ./sources/chess.move:237:9+5
    goto L22;

    // label L20 at ./sources/chess.move:237:9+5
    // Loop invariant checking block for the loop started with header: L9
L20:

    // stop() at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    assume false;
    return;

    // label L21 at ./sources/chess.move:237:9+5
    // Loop invariant checking block for the loop started with header: L17
L21:

    // stop() at ./sources/chess.move:237:9+5
    assume {:print "$at(2,6517,6522)"} true;
    assume false;
    return;

    // label L22 at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
L22:

    // return $t15 at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
    $ret0 := $t15;
    $ret1 := $t2;
    return;

    // label L23 at ./sources/chess.move:238:5+1
L23:

    // abort($t9) at ./sources/chess.move:238:5+1
    assume {:print "$at(2,6527,6528)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

    // label L24 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L24:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L7 at <internal>:1:1+10
    goto L7;

    // label L25 at <internal>:1:1+10
L25:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L15 at <internal>:1:1+10
    goto L15;

}

// fun game::checkBoard [baseline] at ./sources/chess.move:330:5+852
procedure {:inline 1} $0_game_checkBoard(_$t0: $Mutation ($0_game_Game), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: bool;
    var $t13: $Mutation ($0_game_Board);
    var $t14: $Mutation (Vec (Vec ($0_game_Node)));
    var $t15: $Mutation (Vec ($0_game_Node));
    var $t16: $Mutation ($0_game_Node);
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: Vec (int);
    var $t21: $1_string_String;
    var $t22: $0_game_ChessEvent;
    var $t23: int;
    var $t24: Vec (int);
    var $t25: $1_string_String;
    var $t26: $0_game_ChessEvent;
    var $t27: int;
    var $t0: $Mutation ($0_game_Game);
    var $t1: int;
    var $t2: int;
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[game]($t0) at ./sources/chess.move:330:5+1
    assume {:print "$at(2,9107,9108)"} true;
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[i]($t1) at ./sources/chess.move:330:5+1
    assume {:print "$track_local(16,9,1):", $t1} $t1 == $t1;

    // trace_local[j]($t2) at ./sources/chess.move:330:5+1
    assume {:print "$track_local(16,9,2):", $t2} $t2 == $t2;

    // $t8 := game::Horizontal($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:13+21
    assume {:print "$at(2,9169,9190)"} true;
    call $t8,$t0 := $0_game_Horizontal($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9169,9190)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // if ($t8) goto L1 else goto L0 at ./sources/chess.move:331:13+44
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:331:13+44
L1:

    // $t10 := true at ./sources/chess.move:331:13+44
    assume {:print "$at(2,9169,9213)"} true;
    $t10 := true;
    assume $IsValid'bool'($t10);

    // $t3 := $t10 at ./sources/chess.move:331:13+44
    $t3 := $t10;

    // goto L2 at ./sources/chess.move:331:13+44
    goto L2;

    // label L0 at ./sources/chess.move:331:47+1
L0:

    // $t3 := game::Vertical($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:38+19
    assume {:print "$at(2,9194,9213)"} true;
    call $t3,$t0 := $0_game_Vertical($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9194,9213)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L2 at ./sources/chess.move:331:13+44
L2:

    // if ($t3) goto L4 else goto L3 at ./sources/chess.move:331:13+69
    assume {:print "$at(2,9169,9238)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at ./sources/chess.move:331:13+69
L4:

    // $t11 := true at ./sources/chess.move:331:13+69
    assume {:print "$at(2,9169,9238)"} true;
    $t11 := true;
    assume $IsValid'bool'($t11);

    // $t4 := $t11 at ./sources/chess.move:331:13+69
    $t4 := $t11;

    // goto L5 at ./sources/chess.move:331:13+69
    goto L5;

    // label L3 at ./sources/chess.move:331:71+1
L3:

    // $t4 := game::LeftTwill($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:61+21
    assume {:print "$at(2,9217,9238)"} true;
    call $t4,$t0 := $0_game_LeftTwill($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9217,9238)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L5 at ./sources/chess.move:331:13+69
L5:

    // if ($t4) goto L7 else goto L6 at ./sources/chess.move:331:13+95
    assume {:print "$at(2,9169,9264)"} true;
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at ./sources/chess.move:331:13+95
L7:

    // $t12 := true at ./sources/chess.move:331:13+95
    assume {:print "$at(2,9169,9264)"} true;
    $t12 := true;
    assume $IsValid'bool'($t12);

    // $t5 := $t12 at ./sources/chess.move:331:13+95
    $t5 := $t12;

    // goto L8 at ./sources/chess.move:331:13+95
    goto L8;

    // label L6 at ./sources/chess.move:331:97+1
L6:

    // $t5 := game::RightTwill($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:86+22
    assume {:print "$at(2,9242,9264)"} true;
    call $t5,$t0 := $0_game_RightTwill($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9242,9264)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L8 at ./sources/chess.move:331:13+95
L8:

    // if ($t5) goto L10 else goto L9 at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;
    if ($t5) { goto L10; } else { goto L9; }

    // label L10 at ./sources/chess.move:332:47+4
    assume {:print "$at(2,9314,9318)"} true;
L10:

    // $t13 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:332:47+15
    assume {:print "$at(2,9314,9329)"} true;
    $t13 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t14 := borrow_field<game::Board>.board($t13) at ./sources/chess.move:332:42+26
    $t14 := $ChildMutation($t13, 0, $board#$0_game_Board($Dereference($t13)));

    // $t15 := vector::borrow_mut<vector<game::Node>>($t14, $t1) on_abort goto L16 with $t9 at ./sources/chess.move:332:23+49
    call $t15,$t14 := $1_vector_borrow_mut'vec'$0_game_Node''($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,9290,9339)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t16 := vector::borrow_mut<game::Node>($t15, $t2) on_abort goto L16 with $t9 at ./sources/chess.move:333:24+26
    assume {:print "$at(2,9364,9390)"} true;
    call $t16,$t15 := $1_vector_borrow_mut'$0_game_Node'($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,9364,9390)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t17 := get_field<game::Node>.value($t16) at ./sources/chess.move:334:17+10
    assume {:print "$at(2,9408,9418)"} true;
    $t17 := $value#$0_game_Node($Dereference($t16));

    // trace_local[game]($t0) at ./sources/chess.move:334:17+10
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t18 := 1 at ./sources/chess.move:334:31+1
    $t18 := 1;
    assume $IsValid'u8'($t18);

    // $t19 := ==($t17, $t18) at ./sources/chess.move:334:28+2
    $t19 := $IsEqual'u8'($t17, $t18);

    // if ($t19) goto L12 else goto L11 at ./sources/chess.move:334:13+538
    if ($t19) { goto L12; } else { goto L11; }

    // label L12 at ./sources/chess.move:335:32+19
    assume {:print "$at(2,9458,9477)"} true;
L12:

    // $t20 := [87, 104, 105, 116, 101, 32, 112, 108, 97, 121, 101, 114, 32, 119, 105, 110] at ./sources/chess.move:335:32+19
    assume {:print "$at(2,9458,9477)"} true;
    $t20 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(87, 104, 105, 116), MakeVec4(101, 32, 112, 108)), MakeVec4(97, 121, 101, 114)), MakeVec4(32, 119, 105, 110));
    assume $IsValid'vec'u8''($t20);

    // $t21 := string::utf8($t20) on_abort goto L16 with $t9 at ./sources/chess.move:337:27+23
    assume {:print "$at(2,9545,9568)"} true;
    call $t21 := $1_string_utf8($t20);
    if ($abort_flag) {
        assume {:print "$at(2,9545,9568)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t22 := pack game::ChessEvent($t21) at ./sources/chess.move:336:29+80
    assume {:print "$at(2,9507,9587)"} true;
    $t22 := $0_game_ChessEvent($t21);

    // event::emit<game::ChessEvent>($t22) on_abort goto L16 with $t9 at ./sources/chess.move:336:17+93
    call $2_event_emit'$0_game_ChessEvent'($t22);
    if ($abort_flag) {
        assume {:print "$at(2,9495,9588)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t23 := 200 at ./sources/chess.move:339:32+3
    assume {:print "$at(2,9621,9624)"} true;
    $t23 := 200;
    assume $IsValid'u64'($t23);

    // trace_local[whiteWin#1#0]($t23) at ./sources/chess.move:339:21+8
    assume {:print "$track_local(16,9,7):", $t23} $t23 == $t23;

    // debug::print<u64>($t23) on_abort goto L16 with $t9 at ./sources/chess.move:340:17+23
    assume {:print "$at(2,9642,9665)"} true;
    call $1_debug_print'u64'($t23);
    if ($abort_flag) {
        assume {:print "$at(2,9642,9665)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // goto L13 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
    goto L13;

    // label L11 at ./sources/chess.move:342:32+19
    assume {:print "$at(2,9719,9738)"} true;
L11:

    // $t24 := [66, 108, 97, 99, 107, 32, 112, 108, 97, 121, 101, 114, 32, 119, 105, 110] at ./sources/chess.move:342:32+19
    assume {:print "$at(2,9719,9738)"} true;
    $t24 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(66, 108, 97, 99), MakeVec4(107, 32, 112, 108)), MakeVec4(97, 121, 101, 114)), MakeVec4(32, 119, 105, 110));
    assume $IsValid'vec'u8''($t24);

    // $t25 := string::utf8($t24) on_abort goto L16 with $t9 at ./sources/chess.move:344:27+23
    assume {:print "$at(2,9806,9829)"} true;
    call $t25 := $1_string_utf8($t24);
    if ($abort_flag) {
        assume {:print "$at(2,9806,9829)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t26 := pack game::ChessEvent($t25) at ./sources/chess.move:343:29+80
    assume {:print "$at(2,9768,9848)"} true;
    $t26 := $0_game_ChessEvent($t25);

    // event::emit<game::ChessEvent>($t26) on_abort goto L16 with $t9 at ./sources/chess.move:343:17+93
    call $2_event_emit'$0_game_ChessEvent'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,9756,9849)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t27 := 300 at ./sources/chess.move:347:32+3
    assume {:print "$at(2,9883,9886)"} true;
    $t27 := 300;
    assume $IsValid'u64'($t27);

    // trace_local[blackWin#1#0]($t27) at ./sources/chess.move:347:21+8
    assume {:print "$track_local(16,9,6):", $t27} $t27 == $t27;

    // debug::print<u64>($t27) on_abort goto L16 with $t9 at ./sources/chess.move:348:17+23
    assume {:print "$at(2,9904,9927)"} true;
    call $1_debug_print'u64'($t27);
    if ($abort_flag) {
        assume {:print "$at(2,9904,9927)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L13 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
L13:

    // goto L14 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
    goto L14;

    // label L9 at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;
L9:

    // destroy($t0) at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;

    // label L14 at ./sources/chess.move:350:10+1
    assume {:print "$at(2,9952,9953)"} true;
L14:

    // trace_local[game]($t0) at ./sources/chess.move:350:10+1
    assume {:print "$at(2,9952,9953)"} true;
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // label L15 at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
L15:

    // return () at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
    $ret0 := $t0;
    return;

    // label L16 at ./sources/chess.move:351:5+1
L16:

    // abort($t9) at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun game::checkBoard [verification] at ./sources/chess.move:330:5+852
procedure {:timeLimit 40} $0_game_checkBoard$verify(_$t0: $Mutation ($0_game_Game), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($0_game_Game))
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: bool;
    var $t13: $Mutation ($0_game_Board);
    var $t14: $Mutation (Vec (Vec ($0_game_Node)));
    var $t15: $Mutation (Vec ($0_game_Node));
    var $t16: $Mutation ($0_game_Node);
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: Vec (int);
    var $t21: $1_string_String;
    var $t22: $0_game_ChessEvent;
    var $t23: int;
    var $t24: Vec (int);
    var $t25: $1_string_String;
    var $t26: $0_game_ChessEvent;
    var $t27: int;
    var $t0: $Mutation ($0_game_Game);
    var $t1: int;
    var $t2: int;
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:330:5+1
    assume {:print "$at(2,9107,9108)"} true;
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/chess.move:330:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:330:5+1
    assume $IsValid'u64'($t2);

    // trace_local[game]($t0) at ./sources/chess.move:330:5+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[i]($t1) at ./sources/chess.move:330:5+1
    assume {:print "$track_local(16,9,1):", $t1} $t1 == $t1;

    // trace_local[j]($t2) at ./sources/chess.move:330:5+1
    assume {:print "$track_local(16,9,2):", $t2} $t2 == $t2;

    // $t8 := game::Horizontal($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:13+21
    assume {:print "$at(2,9169,9190)"} true;
    call $t8,$t0 := $0_game_Horizontal($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9169,9190)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // if ($t8) goto L1 else goto L0 at ./sources/chess.move:331:13+44
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:331:13+44
L1:

    // $t10 := true at ./sources/chess.move:331:13+44
    assume {:print "$at(2,9169,9213)"} true;
    $t10 := true;
    assume $IsValid'bool'($t10);

    // $t3 := $t10 at ./sources/chess.move:331:13+44
    $t3 := $t10;

    // goto L2 at ./sources/chess.move:331:13+44
    goto L2;

    // label L0 at ./sources/chess.move:331:47+1
L0:

    // $t3 := game::Vertical($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:38+19
    assume {:print "$at(2,9194,9213)"} true;
    call $t3,$t0 := $0_game_Vertical($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9194,9213)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L2 at ./sources/chess.move:331:13+44
L2:

    // if ($t3) goto L4 else goto L3 at ./sources/chess.move:331:13+69
    assume {:print "$at(2,9169,9238)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at ./sources/chess.move:331:13+69
L4:

    // $t11 := true at ./sources/chess.move:331:13+69
    assume {:print "$at(2,9169,9238)"} true;
    $t11 := true;
    assume $IsValid'bool'($t11);

    // $t4 := $t11 at ./sources/chess.move:331:13+69
    $t4 := $t11;

    // goto L5 at ./sources/chess.move:331:13+69
    goto L5;

    // label L3 at ./sources/chess.move:331:71+1
L3:

    // $t4 := game::LeftTwill($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:61+21
    assume {:print "$at(2,9217,9238)"} true;
    call $t4,$t0 := $0_game_LeftTwill($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9217,9238)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L5 at ./sources/chess.move:331:13+69
L5:

    // if ($t4) goto L7 else goto L6 at ./sources/chess.move:331:13+95
    assume {:print "$at(2,9169,9264)"} true;
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at ./sources/chess.move:331:13+95
L7:

    // $t12 := true at ./sources/chess.move:331:13+95
    assume {:print "$at(2,9169,9264)"} true;
    $t12 := true;
    assume $IsValid'bool'($t12);

    // $t5 := $t12 at ./sources/chess.move:331:13+95
    $t5 := $t12;

    // goto L8 at ./sources/chess.move:331:13+95
    goto L8;

    // label L6 at ./sources/chess.move:331:97+1
L6:

    // $t5 := game::RightTwill($t1, $t2, $t0) on_abort goto L16 with $t9 at ./sources/chess.move:331:86+22
    assume {:print "$at(2,9242,9264)"} true;
    call $t5,$t0 := $0_game_RightTwill($t1, $t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,9242,9264)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L8 at ./sources/chess.move:331:13+95
L8:

    // if ($t5) goto L10 else goto L9 at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;
    if ($t5) { goto L10; } else { goto L9; }

    // label L10 at ./sources/chess.move:332:47+4
    assume {:print "$at(2,9314,9318)"} true;
L10:

    // $t13 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:332:47+15
    assume {:print "$at(2,9314,9329)"} true;
    $t13 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t14 := borrow_field<game::Board>.board($t13) at ./sources/chess.move:332:42+26
    $t14 := $ChildMutation($t13, 0, $board#$0_game_Board($Dereference($t13)));

    // $t15 := vector::borrow_mut<vector<game::Node>>($t14, $t1) on_abort goto L16 with $t9 at ./sources/chess.move:332:23+49
    call $t15,$t14 := $1_vector_borrow_mut'vec'$0_game_Node''($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,9290,9339)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t16 := vector::borrow_mut<game::Node>($t15, $t2) on_abort goto L16 with $t9 at ./sources/chess.move:333:24+26
    assume {:print "$at(2,9364,9390)"} true;
    call $t16,$t15 := $1_vector_borrow_mut'$0_game_Node'($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,9364,9390)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t17 := get_field<game::Node>.value($t16) at ./sources/chess.move:334:17+10
    assume {:print "$at(2,9408,9418)"} true;
    $t17 := $value#$0_game_Node($Dereference($t16));

    // trace_local[game]($t0) at ./sources/chess.move:334:17+10
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t18 := 1 at ./sources/chess.move:334:31+1
    $t18 := 1;
    assume $IsValid'u8'($t18);

    // $t19 := ==($t17, $t18) at ./sources/chess.move:334:28+2
    $t19 := $IsEqual'u8'($t17, $t18);

    // if ($t19) goto L12 else goto L11 at ./sources/chess.move:334:13+538
    if ($t19) { goto L12; } else { goto L11; }

    // label L12 at ./sources/chess.move:335:32+19
    assume {:print "$at(2,9458,9477)"} true;
L12:

    // $t20 := [87, 104, 105, 116, 101, 32, 112, 108, 97, 121, 101, 114, 32, 119, 105, 110] at ./sources/chess.move:335:32+19
    assume {:print "$at(2,9458,9477)"} true;
    $t20 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(87, 104, 105, 116), MakeVec4(101, 32, 112, 108)), MakeVec4(97, 121, 101, 114)), MakeVec4(32, 119, 105, 110));
    assume $IsValid'vec'u8''($t20);

    // $t21 := string::utf8($t20) on_abort goto L16 with $t9 at ./sources/chess.move:337:27+23
    assume {:print "$at(2,9545,9568)"} true;
    call $t21 := $1_string_utf8($t20);
    if ($abort_flag) {
        assume {:print "$at(2,9545,9568)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t22 := pack game::ChessEvent($t21) at ./sources/chess.move:336:29+80
    assume {:print "$at(2,9507,9587)"} true;
    $t22 := $0_game_ChessEvent($t21);

    // event::emit<game::ChessEvent>($t22) on_abort goto L16 with $t9 at ./sources/chess.move:336:17+93
    call $2_event_emit'$0_game_ChessEvent'($t22);
    if ($abort_flag) {
        assume {:print "$at(2,9495,9588)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t23 := 200 at ./sources/chess.move:339:32+3
    assume {:print "$at(2,9621,9624)"} true;
    $t23 := 200;
    assume $IsValid'u64'($t23);

    // trace_local[whiteWin#1#0]($t23) at ./sources/chess.move:339:21+8
    assume {:print "$track_local(16,9,7):", $t23} $t23 == $t23;

    // debug::print<u64>($t23) on_abort goto L16 with $t9 at ./sources/chess.move:340:17+23
    assume {:print "$at(2,9642,9665)"} true;
    call $1_debug_print'u64'($t23);
    if ($abort_flag) {
        assume {:print "$at(2,9642,9665)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // goto L13 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
    goto L13;

    // label L11 at ./sources/chess.move:342:32+19
    assume {:print "$at(2,9719,9738)"} true;
L11:

    // $t24 := [66, 108, 97, 99, 107, 32, 112, 108, 97, 121, 101, 114, 32, 119, 105, 110] at ./sources/chess.move:342:32+19
    assume {:print "$at(2,9719,9738)"} true;
    $t24 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(66, 108, 97, 99), MakeVec4(107, 32, 112, 108)), MakeVec4(97, 121, 101, 114)), MakeVec4(32, 119, 105, 110));
    assume $IsValid'vec'u8''($t24);

    // $t25 := string::utf8($t24) on_abort goto L16 with $t9 at ./sources/chess.move:344:27+23
    assume {:print "$at(2,9806,9829)"} true;
    call $t25 := $1_string_utf8($t24);
    if ($abort_flag) {
        assume {:print "$at(2,9806,9829)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t26 := pack game::ChessEvent($t25) at ./sources/chess.move:343:29+80
    assume {:print "$at(2,9768,9848)"} true;
    $t26 := $0_game_ChessEvent($t25);

    // event::emit<game::ChessEvent>($t26) on_abort goto L16 with $t9 at ./sources/chess.move:343:17+93
    call $2_event_emit'$0_game_ChessEvent'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,9756,9849)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // $t27 := 300 at ./sources/chess.move:347:32+3
    assume {:print "$at(2,9883,9886)"} true;
    $t27 := 300;
    assume $IsValid'u64'($t27);

    // trace_local[blackWin#1#0]($t27) at ./sources/chess.move:347:21+8
    assume {:print "$track_local(16,9,6):", $t27} $t27 == $t27;

    // debug::print<u64>($t27) on_abort goto L16 with $t9 at ./sources/chess.move:348:17+23
    assume {:print "$at(2,9904,9927)"} true;
    call $1_debug_print'u64'($t27);
    if ($abort_flag) {
        assume {:print "$at(2,9904,9927)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,9):", $t9} $t9 == $t9;
        goto L16;
    }

    // label L13 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
L13:

    // goto L14 at ./sources/chess.move:334:13+538
    assume {:print "$at(2,9404,9942)"} true;
    goto L14;

    // label L9 at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;
L9:

    // destroy($t0) at ./sources/chess.move:331:9+787
    assume {:print "$at(2,9165,9952)"} true;

    // label L14 at ./sources/chess.move:350:10+1
    assume {:print "$at(2,9952,9953)"} true;
L14:

    // trace_local[game]($t0) at ./sources/chess.move:350:10+1
    assume {:print "$at(2,9952,9953)"} true;
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,9,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // label L15 at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
L15:

    // return () at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
    $ret0 := $t0;
    return;

    // label L16 at ./sources/chess.move:351:5+1
L16:

    // abort($t9) at ./sources/chess.move:351:5+1
    assume {:print "$at(2,9958,9959)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun game::createChess [verification] at ./sources/chess.move:49:5+977
procedure {:timeLimit 40} $0_game_createChess$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $0_game_Board;
    var $t4: $0_game_Game;
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($0_game_Node);
    var $t8: int;
    var $t9: $2_tx_context_TxContext;
    var $t10: int;
    var $t11: int;
    var $t12: Vec (Vec ($0_game_Node));
    var $t13: $0_game_Board;
    var $t14: $2_object_UID;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: $0_game_Node;
    var $t24: int;
    var $t25: int;
    var $t26: Vec ($0_game_Node);
    var $t27: int;
    var $t28: int;
    var $t29: $Mutation (Vec ($0_game_Node));
    var $t30: $Mutation ($0_game_Game);
    var $t31: $Mutation ($0_game_Board);
    var $t32: $Mutation (Vec (Vec ($0_game_Node)));
    var $t33: $0_game_Game;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_game_Board': $0_game_Board;
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$0_game_Node'': Vec ($0_game_Node);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:49:5+1
    assume {:print "$at(2,961,962)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at ./sources/chess.move:49:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:49:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[player1]($t0) at ./sources/chess.move:49:5+1
    assume {:print "$track_local(16,1,0):", $t0} $t0 == $t0;

    // trace_local[player2]($t1) at ./sources/chess.move:49:5+1
    assume {:print "$track_local(16,1,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/chess.move:49:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(16,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t2) at ./sources/chess.move:52:41+3
    assume {:print "$at(2,1116,1119)"} true;
    $t9 := $Dereference($t2);

    // $t10 := tx_context::sender($t9) on_abort goto L11 with $t11 at ./sources/chess.move:52:22+23
    call $t10 := $2_tx_context_sender($t9);
    if ($abort_flag) {
        assume {:print "$at(2,1097,1120)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[sender#1#0]($t10) at ./sources/chess.move:52:13+6
    assume {:print "$track_local(16,1,8):", $t10} $t10 == $t10;

    // $t12 := vector::empty<vector<game::Node>>() on_abort goto L11 with $t11 at ./sources/chess.move:54:21+29
    assume {:print "$at(2,1169,1198)"} true;
    call $t12 := $1_vector_empty'vec'$0_game_Node''();
    if ($abort_flag) {
        assume {:print "$at(2,1169,1198)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // $t13 := pack game::Board($t12) at ./sources/chess.move:53:21+67
    assume {:print "$at(2,1142,1209)"} true;
    $t13 := $0_game_Board($t12);

    // trace_local[board#1#0]($t13) at ./sources/chess.move:53:13+5
    assume {:print "$track_local(16,1,3):", $t13} $t13 == $t13;

    // $t14 := object::new($t2) on_abort goto L11 with $t11 at ./sources/chess.move:57:17+16
    assume {:print "$at(2,1257,1273)"} true;
    call $t14,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(2,1257,1273)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // $t15 := 0 at ./sources/chess.move:60:26+1
    assume {:print "$at(2,1357,1358)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t4 := pack game::Game($t14, $t10, $t13, $t15, $t0, $t1) at ./sources/chess.move:56:24+197
    assume {:print "$at(2,1234,1431)"} true;
    $t4 := $0_game_Game($t14, $t10, $t13, $t15, $t0, $t1);

    // trace_local[game_obj#1#0]($t4) at ./sources/chess.move:56:13+8
    assume {:print "$track_local(16,1,4):", $t4} $t4 == $t4;

    // $t16 := 0 at ./sources/chess.move:65:21+1
    assume {:print "$at(2,1454,1455)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_local[i#1#0]($t16) at ./sources/chess.move:65:13+1
    assume {:print "$track_local(16,1,5):", $t16} $t16 == $t16;

    // label L7 at ./sources/chess.move:66:15+1
    assume {:print "$at(2,1471,1472)"} true;
L7:

    // $t4 := havoc[val]() at ./sources/chess.move:66:15+1
    assume {:print "$at(2,1471,1472)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/chess.move:66:15+1
    assume $IsValid'$0_game_Game'($t4);

    // $t5 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t5;

    // assume WellFormed($t5) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t6);

    // $t7 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t7;

    // assume WellFormed($t7) at ./sources/chess.move:66:15+1
    assume $IsValid'vec'$0_game_Node''($t7);

    // $t17 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t17;

    // assume WellFormed($t17) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:66:15+1
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:66:15+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:66:15+1
    assume $IsValid'u8'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:66:15+1
    assume $IsValid'$0_game_Node'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t25);

    // $t26 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:66:15+1
    assume $IsValid'vec'$0_game_Node''($t26);

    // $t27 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/chess.move:66:15+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/chess.move:66:15+1
    assume $IsValid'u64'($t28);

    // $t29 := havoc[mut_all]() at ./sources/chess.move:66:15+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:66:15+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t29));

    // $t30 := havoc[mut_all]() at ./sources/chess.move:66:15+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/chess.move:66:15+1
    assume $IsValid'$0_game_Game'($Dereference($t30));

    // $t31 := havoc[mut_all]() at ./sources/chess.move:66:15+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/chess.move:66:15+1
    assume $IsValid'$0_game_Board'($Dereference($t31));

    // $t32 := havoc[mut_all]() at ./sources/chess.move:66:15+1
    havoc $t32;

    // assume WellFormed($t32) at ./sources/chess.move:66:15+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t32));

    // trace_local[game_obj#1#0]($t4) at ./sources/chess.move:66:15+1
    assume {:print "$info(): enter loop, variable(s) game_obj#1#0, i#1#0, j#1#0, row#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,1,4):", $t4} $t4 == $t4;

    // trace_local[i#1#0]($t5) at ./sources/chess.move:66:15+1
    assume {:print "$track_local(16,1,5):", $t5} $t5 == $t5;

    // trace_local[j#1#0]($t6) at ./sources/chess.move:66:15+1
    assume {:print "$track_local(16,1,6):", $t6} $t6 == $t6;

    // trace_local[row#1#0]($t7) at ./sources/chess.move:66:15+1
    assume {:print "$track_local(16,1,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/chess.move:66:15+1
    assume !$abort_flag;

    // $t17 := 20 at ./sources/chess.move:66:19+14
    $t17 := 20;
    assume $IsValid'u64'($t17);

    // $t18 := <($t5, $t17) at ./sources/chess.move:66:17+1
    call $t18 := $Lt($t5, $t17);

    // if ($t18) goto L12 else goto L0 at ./sources/chess.move:66:9+419
    if ($t18) { goto L12; } else { goto L0; }

    // label L1 at ./sources/chess.move:66:9+419
L1:

    // label L2 at ./sources/chess.move:67:23+21
    assume {:print "$at(2,1514,1535)"} true;
L2:

    // $t7 := vector::empty<game::Node>() on_abort goto L11 with $t11 at ./sources/chess.move:67:23+21
    assume {:print "$at(2,1514,1535)"} true;
    call $t7 := $1_vector_empty'$0_game_Node'();
    if ($abort_flag) {
        assume {:print "$at(2,1514,1535)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[row#1#0]($t7) at ./sources/chess.move:67:17+3
    assume {:print "$track_local(16,1,7):", $t7} $t7 == $t7;

    // $t19 := 0 at ./sources/chess.move:68:25+1
    assume {:print "$at(2,1561,1562)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // trace_local[j#1#0]($t19) at ./sources/chess.move:68:17+1
    assume {:print "$track_local(16,1,6):", $t19} $t19 == $t19;

    // label L6 at ./sources/chess.move:69:19+1
    assume {:print "$at(2,1582,1583)"} true;
L6:

    // $t6 := havoc[val]() at ./sources/chess.move:69:19+1
    assume {:print "$at(2,1582,1583)"} true;
    havoc $t6;

    // assume WellFormed($t6) at ./sources/chess.move:69:19+1
    assume $IsValid'u64'($t6);

    // $t7 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t7;

    // assume WellFormed($t7) at ./sources/chess.move:69:19+1
    assume $IsValid'vec'$0_game_Node''($t7);

    // $t20 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:69:19+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:69:19+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:69:19+1
    assume $IsValid'u8'($t22);

    // $t23 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:69:19+1
    assume $IsValid'$0_game_Node'($t23);

    // $t24 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:69:19+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at ./sources/chess.move:69:19+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:69:19+1
    assume $IsValid'u64'($t25);

    // $t29 := havoc[mut_all]() at ./sources/chess.move:69:19+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/chess.move:69:19+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t29));

    // trace_local[j#1#0]($t6) at ./sources/chess.move:69:19+1
    assume {:print "$info(): enter loop, variable(s) j#1#0, row#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,1,6):", $t6} $t6 == $t6;

    // trace_local[row#1#0]($t7) at ./sources/chess.move:69:19+1
    assume {:print "$track_local(16,1,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/chess.move:69:19+1
    assume !$abort_flag;

    // $t20 := 20 at ./sources/chess.move:69:23+14
    $t20 := 20;
    assume $IsValid'u64'($t20);

    // $t21 := <($t6, $t20) at ./sources/chess.move:69:21+1
    call $t21 := $Lt($t6, $t20);

    // if ($t21) goto L4 else goto L3 at ./sources/chess.move:69:13+206
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at ./sources/chess.move:69:13+206
L4:

    // label L5 at ./sources/chess.move:73:35+8
    assume {:print "$at(2,1724,1732)"} true;
L5:

    // $t29 := borrow_local($t7) at ./sources/chess.move:73:35+8
    assume {:print "$at(2,1724,1732)"} true;
    $t29 := $Mutation($Local(7), EmptyVec(), $t7);

    // $t22 := 0 at ./sources/chess.move:71:28+1
    assume {:print "$at(2,1669,1670)"} true;
    $t22 := 0;
    assume $IsValid'u8'($t22);

    // $t23 := pack game::Node($t22) at ./sources/chess.move:70:34+52
    assume {:print "$at(2,1636,1688)"} true;
    $t23 := $0_game_Node($t22);

    // vector::push_back<game::Node>($t29, $t23) on_abort goto L11 with $t11 at ./sources/chess.move:73:17+34
    assume {:print "$at(2,1706,1740)"} true;
    call $t29 := $1_vector_push_back'$0_game_Node'($t29, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,1706,1740)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // write_back[LocalRoot($t7)@]($t29) at ./sources/chess.move:73:17+34
    $t7 := $Dereference($t29);

    // trace_local[row#1#0]($t7) at ./sources/chess.move:73:17+34
    assume {:print "$track_local(16,1,7):", $t7} $t7 == $t7;

    // $t24 := 1 at ./sources/chess.move:74:25+1
    assume {:print "$at(2,1766,1767)"} true;
    $t24 := 1;
    assume $IsValid'u64'($t24);

    // $t25 := +($t6, $t24) on_abort goto L11 with $t11 at ./sources/chess.move:74:23+1
    call $t25 := $AddU64($t6, $t24);
    if ($abort_flag) {
        assume {:print "$at(2,1764,1765)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[j#1#0]($t25) at ./sources/chess.move:74:17+1
    assume {:print "$track_local(16,1,6):", $t25} $t25 == $t25;

    // goto L8 at ./sources/chess.move:74:26+1
    goto L8;

    // label L3 at ./sources/chess.move:76:36+8
    assume {:print "$at(2,1819,1827)"} true;
L3:

    // $t30 := borrow_local($t4) at ./sources/chess.move:76:36+8
    assume {:print "$at(2,1819,1827)"} true;
    $t30 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t31 := borrow_field<game::Game>.chessBoard($t30) at ./sources/chess.move:76:36+19
    $t31 := $ChildMutation($t30, 2, $chessBoard#$0_game_Game($Dereference($t30)));

    // $t32 := borrow_field<game::Board>.board($t31) at ./sources/chess.move:76:31+30
    $t32 := $ChildMutation($t31, 0, $board#$0_game_Board($Dereference($t31)));

    // $t26 := move($t7) at ./sources/chess.move:76:63+3
    $t26 := $t7;

    // vector::push_back<vector<game::Node>>($t32, $t26) on_abort goto L11 with $t11 at ./sources/chess.move:76:13+54
    call $t32 := $1_vector_push_back'vec'$0_game_Node''($t32, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,1796,1850)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // write_back[Reference($t31).board (vector<vector<game::Node>>)]($t32) at ./sources/chess.move:76:13+54
    $t31 := $UpdateMutation($t31, $Update'$0_game_Board'_board($Dereference($t31), $Dereference($t32)));

    // write_back[Reference($t30).chessBoard (game::Board)]($t31) at ./sources/chess.move:76:13+54
    $t30 := $UpdateMutation($t30, $Update'$0_game_Game'_chessBoard($Dereference($t30), $Dereference($t31)));

    // write_back[LocalRoot($t4)@]($t30) at ./sources/chess.move:76:13+54
    $t4 := $Dereference($t30);

    // trace_local[game_obj#1#0]($t4) at ./sources/chess.move:76:13+54
    assume {:print "$track_local(16,1,4):", $t4} $t4 == $t4;

    // $t27 := 1 at ./sources/chess.move:77:21+1
    assume {:print "$at(2,1872,1873)"} true;
    $t27 := 1;
    assume $IsValid'u64'($t27);

    // $t28 := +($t5, $t27) on_abort goto L11 with $t11 at ./sources/chess.move:77:19+1
    call $t28 := $AddU64($t5, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,1870,1871)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[i#1#0]($t28) at ./sources/chess.move:77:13+1
    assume {:print "$track_local(16,1,5):", $t28} $t28 == $t28;

    // goto L9 at ./sources/chess.move:77:22+1
    goto L9;

    // label L0 at ./sources/chess.move:79:28+8
    assume {:print "$at(2,1913,1921)"} true;
L0:

    // $t33 := move($t4) at ./sources/chess.move:79:28+8
    assume {:print "$at(2,1913,1921)"} true;
    $t33 := $t4;

    // transfer::transfer<game::Game>($t33, $t10) on_abort goto L11 with $t11 at ./sources/chess.move:79:9+36
    call $2_transfer_transfer'$0_game_Game'($t33, $t10);
    if ($abort_flag) {
        assume {:print "$at(2,1894,1930)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(16,1):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[ctx]($t2) at ./sources/chess.move:79:45+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(16,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L10 at ./sources/chess.move:79:45+1
    goto L10;

    // label L8 at ./sources/chess.move:79:28+8
    // Loop invariant checking block for the loop started with header: L6
L8:

    // stop() at ./sources/chess.move:79:28+8
    assume {:print "$at(2,1913,1921)"} true;
    assume false;
    return;

    // label L9 at ./sources/chess.move:79:28+8
    // Loop invariant checking block for the loop started with header: L7
L9:

    // stop() at ./sources/chess.move:79:28+8
    assume {:print "$at(2,1913,1921)"} true;
    assume false;
    return;

    // label L10 at ./sources/chess.move:81:5+1
    assume {:print "$at(2,1937,1938)"} true;
L10:

    // return () at ./sources/chess.move:81:5+1
    assume {:print "$at(2,1937,1938)"} true;
    $ret0 := $t2;
    return;

    // label L11 at ./sources/chess.move:81:5+1
L11:

    // abort($t11) at ./sources/chess.move:81:5+1
    assume {:print "$at(2,1937,1938)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L1 at <internal>:1:1+10
    goto L1;

}

// fun game::getChessBoardValue [verification] at ./sources/chess.move:99:5+508
procedure {:timeLimit 40} $0_game_getChessBoardValue$verify(_$t0: $Mutation ($0_game_Game), _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: int, $ret1: $Mutation ($0_game_Game), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: $Mutation ($0_game_Board);
    var $t17: $Mutation (Vec (Vec ($0_game_Node)));
    var $t18: $Mutation (Vec ($0_game_Node));
    var $t19: $Mutation ($0_game_Node);
    var $t20: int;
    var $t0: $Mutation ($0_game_Game);
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:99:5+1
    assume {:print "$at(2,2463,2464)"} true;
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/chess.move:99:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:99:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/chess.move:99:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[game]($t0) at ./sources/chess.move:99:5+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,3,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[x]($t1) at ./sources/chess.move:99:5+1
    assume {:print "$track_local(16,3,1):", $t1} $t1 == $t1;

    // trace_local[y]($t2) at ./sources/chess.move:99:5+1
    assume {:print "$track_local(16,3,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/chess.move:99:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := read_ref($t3) at ./sources/chess.move:104:41+3
    assume {:print "$at(2,2703,2706)"} true;
    $t4 := $Dereference($t3);

    // $t5 := tx_context::sender($t4) on_abort goto L13 with $t6 at ./sources/chess.move:104:22+23
    call $t5 := $2_tx_context_sender($t4);
    if ($abort_flag) {
        assume {:print "$at(2,2684,2707)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(16,3):", $t6} $t6 == $t6;
        goto L13;
    }

    // $t7 := get_field<game::Game>.admin($t0) at ./sources/chess.move:105:25+10
    assume {:print "$at(2,2733,2743)"} true;
    $t7 := $admin#$0_game_Game($Dereference($t0));

    // $t8 := ==($t5, $t7) at ./sources/chess.move:105:23+2
    $t8 := $IsEqual'address'($t5, $t7);

    // if ($t8) goto L1 else goto L9 at ./sources/chess.move:105:9+30
    if ($t8) { goto L1; } else { goto L9; }

    // label L1 at ./sources/chess.move:105:9+30
L1:

    // goto L2 at ./sources/chess.move:105:9+30
    assume {:print "$at(2,2717,2747)"} true;
    goto L2;

    // label L0 at ./sources/chess.move:105:9+30
L0:

    // destroy($t0) at ./sources/chess.move:105:9+30
    assume {:print "$at(2,2717,2747)"} true;

    // $t9 := 0 at ./sources/chess.move:105:37+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/chess.move:105:9+30
    assume {:print "$at(2,2717,2747)"} true;
    assume {:print "$track_abort(16,3):", $t9} $t9 == $t9;

    // $t6 := move($t9) at ./sources/chess.move:105:9+30
    $t6 := $t9;

    // goto L13 at ./sources/chess.move:105:9+30
    goto L13;

    // label L2 at ./sources/chess.move:107:17+1
    assume {:print "$at(2,2766,2767)"} true;
L2:

    // $t10 := 20 at ./sources/chess.move:107:21+14
    assume {:print "$at(2,2770,2784)"} true;
    $t10 := 20;
    assume $IsValid'u64'($t10);

    // $t11 := <($t1, $t10) at ./sources/chess.move:107:19+1
    call $t11 := $Lt($t1, $t10);

    // if ($t11) goto L4 else goto L10 at ./sources/chess.move:107:9+30
    if ($t11) { goto L4; } else { goto L10; }

    // label L4 at ./sources/chess.move:107:9+30
L4:

    // goto L5 at ./sources/chess.move:107:9+30
    assume {:print "$at(2,2758,2788)"} true;
    goto L5;

    // label L3 at ./sources/chess.move:107:9+30
L3:

    // destroy($t0) at ./sources/chess.move:107:9+30
    assume {:print "$at(2,2758,2788)"} true;

    // $t12 := 0 at ./sources/chess.move:107:37+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/chess.move:107:9+30
    assume {:print "$at(2,2758,2788)"} true;
    assume {:print "$track_abort(16,3):", $t12} $t12 == $t12;

    // $t6 := move($t12) at ./sources/chess.move:107:9+30
    $t6 := $t12;

    // goto L13 at ./sources/chess.move:107:9+30
    goto L13;

    // label L5 at ./sources/chess.move:108:17+1
    assume {:print "$at(2,2806,2807)"} true;
L5:

    // $t13 := 20 at ./sources/chess.move:108:21+14
    assume {:print "$at(2,2810,2824)"} true;
    $t13 := 20;
    assume $IsValid'u64'($t13);

    // $t14 := <($t2, $t13) at ./sources/chess.move:108:19+1
    call $t14 := $Lt($t2, $t13);

    // if ($t14) goto L7 else goto L11 at ./sources/chess.move:108:9+30
    if ($t14) { goto L7; } else { goto L11; }

    // label L7 at ./sources/chess.move:108:9+30
L7:

    // goto L8 at ./sources/chess.move:108:9+30
    assume {:print "$at(2,2798,2828)"} true;
    goto L8;

    // label L6 at ./sources/chess.move:108:9+30
L6:

    // destroy($t0) at ./sources/chess.move:108:9+30
    assume {:print "$at(2,2798,2828)"} true;

    // $t15 := 0 at ./sources/chess.move:108:37+1
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at ./sources/chess.move:108:9+30
    assume {:print "$at(2,2798,2828)"} true;
    assume {:print "$track_abort(16,3):", $t15} $t15 == $t15;

    // $t6 := move($t15) at ./sources/chess.move:108:9+30
    $t6 := $t15;

    // goto L13 at ./sources/chess.move:108:9+30
    goto L13;

    // label L8 at ./sources/chess.move:109:43+4
    assume {:print "$at(2,2872,2876)"} true;
L8:

    // $t16 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:109:43+15
    assume {:print "$at(2,2872,2887)"} true;
    $t16 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t17 := borrow_field<game::Board>.board($t16) at ./sources/chess.move:109:38+26
    $t17 := $ChildMutation($t16, 0, $board#$0_game_Board($Dereference($t16)));

    // $t18 := vector::borrow_mut<vector<game::Node>>($t17, $t1) on_abort goto L13 with $t6 at ./sources/chess.move:109:19+49
    call $t18,$t17 := $1_vector_borrow_mut'vec'$0_game_Node''($t17, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2848,2897)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(16,3):", $t6} $t6 == $t6;
        goto L13;
    }

    // $t19 := vector::borrow_mut<game::Node>($t18, $t2) on_abort goto L13 with $t6 at ./sources/chess.move:110:20+26
    assume {:print "$at(2,2918,2944)"} true;
    call $t19,$t18 := $1_vector_borrow_mut'$0_game_Node'($t18, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,2918,2944)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(16,3):", $t6} $t6 == $t6;
        goto L13;
    }

    // $t20 := get_field<game::Node>.value($t19) at ./sources/chess.move:111:9+10
    assume {:print "$at(2,2954,2964)"} true;
    $t20 := $value#$0_game_Node($Dereference($t19));

    // trace_local[game]($t0) at ./sources/chess.move:111:9+10
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,3,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_return[0]($t20) at ./sources/chess.move:111:9+10
    assume {:print "$track_return(16,3,0):", $t20} $t20 == $t20;

    // trace_local[game]($t0) at ./sources/chess.move:111:9+10
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,3,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[ctx]($t3) at ./sources/chess.move:111:9+10
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L12 at ./sources/chess.move:111:9+10
    goto L12;

    // label L9 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L9:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L10 at <internal>:1:1+10
L10:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L12 at ./sources/chess.move:113:5+1
    assume {:print "$at(2,2970,2971)"} true;
L12:

    // return $t20 at ./sources/chess.move:113:5+1
    assume {:print "$at(2,2970,2971)"} true;
    $ret0 := $t20;
    $ret1 := $t0;
    $ret2 := $t3;
    return;

    // label L13 at ./sources/chess.move:113:5+1
L13:

    // abort($t6) at ./sources/chess.move:113:5+1
    assume {:print "$at(2,2970,2971)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun game::play [verification] at ./sources/chess.move:115:5+1048
procedure {:timeLimit 40} $0_game_play$verify(_$t0: $Mutation ($0_game_Game), _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_game_Game), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: $Mutation ($0_game_Node);
    var $t6: int;
    var $t7: $2_tx_context_TxContext;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($0_game_Board);
    var $t30: $Mutation (Vec (Vec ($0_game_Node)));
    var $t31: $Mutation (Vec ($0_game_Node));
    var $t32: $Mutation ($0_game_Node);
    var $t33: $Mutation (int);
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $Mutation (int);
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: bool;
    var $t43: Vec (int);
    var $t44: $1_string_String;
    var $t45: $0_game_ChessEvent;
    var $t0: $Mutation ($0_game_Game);
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$0_game_Node': $0_game_Node;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:115:5+1
    assume {:print "$at(2,2977,2978)"} true;
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/chess.move:115:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:115:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/chess.move:115:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[game]($t0) at ./sources/chess.move:115:5+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,4,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[x]($t1) at ./sources/chess.move:115:5+1
    assume {:print "$track_local(16,4,1):", $t1} $t1 == $t1;

    // trace_local[y]($t2) at ./sources/chess.move:115:5+1
    assume {:print "$track_local(16,4,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/chess.move:115:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := read_ref($t3) at ./sources/chess.move:117:41+3
    assume {:print "$at(2,3093,3096)"} true;
    $t7 := $Dereference($t3);

    // $t8 := tx_context::sender($t7) on_abort goto L22 with $t9 at ./sources/chess.move:117:22+23
    call $t8 := $2_tx_context_sender($t7);
    if ($abort_flag) {
        assume {:print "$at(2,3074,3097)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // trace_local[sender#1#0]($t8) at ./sources/chess.move:117:13+6
    assume {:print "$track_local(16,4,6):", $t8} $t8 == $t8;

    // $t10 := get_field<game::Game>.stepsCount($t0) at ./sources/chess.move:119:13+15
    assume {:print "$at(2,3146,3161)"} true;
    $t10 := $stepsCount#$0_game_Game($Dereference($t0));

    // $t11 := 2 at ./sources/chess.move:119:31+1
    $t11 := 2;
    assume $IsValid'u64'($t11);

    // $t12 := %($t10, $t11) on_abort goto L22 with $t9 at ./sources/chess.move:119:29+1
    call $t12 := $Mod($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,3162,3163)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // $t13 := 0 at ./sources/chess.move:119:36+1
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := ==($t12, $t13) at ./sources/chess.move:119:33+2
    $t14 := $IsEqual'u64'($t12, $t13);

    // if ($t14) goto L1 else goto L0 at ./sources/chess.move:119:9+220
    if ($t14) { goto L1; } else { goto L0; }

    // label L1 at ./sources/chess.move:120:21+6
    assume {:print "$at(2,3194,3200)"} true;
L1:

    // $t15 := get_field<game::Game>.player1($t0) at ./sources/chess.move:120:29+12
    assume {:print "$at(2,3202,3214)"} true;
    $t15 := $player1#$0_game_Game($Dereference($t0));

    // $t16 := ==($t8, $t15) at ./sources/chess.move:120:27+2
    $t16 := $IsEqual'address'($t8, $t15);

    // if ($t16) goto L3 else goto L17 at ./sources/chess.move:120:13+32
    if ($t16) { goto L3; } else { goto L17; }

    // label L3 at ./sources/chess.move:120:13+32
L3:

    // goto L4 at ./sources/chess.move:120:13+32
    assume {:print "$at(2,3186,3218)"} true;
    goto L4;

    // label L2 at ./sources/chess.move:120:13+32
L2:

    // destroy($t0) at ./sources/chess.move:120:13+32
    assume {:print "$at(2,3186,3218)"} true;

    // $t17 := 0 at ./sources/chess.move:120:43+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // trace_abort($t17) at ./sources/chess.move:120:13+32
    assume {:print "$at(2,3186,3218)"} true;
    assume {:print "$track_abort(16,4):", $t17} $t17 == $t17;

    // $t9 := move($t17) at ./sources/chess.move:120:13+32
    $t9 := $t17;

    // goto L22 at ./sources/chess.move:120:13+32
    goto L22;

    // label L4 at ./sources/chess.move:121:34+1
    assume {:print "$at(2,3253,3254)"} true;
L4:

    // $t18 := 1 at ./sources/chess.move:121:34+1
    assume {:print "$at(2,3253,3254)"} true;
    $t18 := 1;
    assume $IsValid'u8'($t18);

    // $t4 := $t18 at ./sources/chess.move:121:13+18
    $t4 := $t18;

    // trace_local[currentSenderValue#1#0]($t18) at ./sources/chess.move:121:13+18
    assume {:print "$track_local(16,4,4):", $t18} $t18 == $t18;

    // goto L5 at ./sources/chess.move:121:35+1
    goto L5;

    // label L0 at ./sources/chess.move:123:21+6
    assume {:print "$at(2,3292,3298)"} true;
L0:

    // $t19 := get_field<game::Game>.player2($t0) at ./sources/chess.move:123:29+12
    assume {:print "$at(2,3300,3312)"} true;
    $t19 := $player2#$0_game_Game($Dereference($t0));

    // $t20 := ==($t8, $t19) at ./sources/chess.move:123:27+2
    $t20 := $IsEqual'address'($t8, $t19);

    // if ($t20) goto L7 else goto L18 at ./sources/chess.move:123:13+32
    if ($t20) { goto L7; } else { goto L18; }

    // label L7 at ./sources/chess.move:123:13+32
L7:

    // goto L8 at ./sources/chess.move:123:13+32
    assume {:print "$at(2,3284,3316)"} true;
    goto L8;

    // label L6 at ./sources/chess.move:123:13+32
L6:

    // destroy($t0) at ./sources/chess.move:123:13+32
    assume {:print "$at(2,3284,3316)"} true;

    // $t21 := 0 at ./sources/chess.move:123:43+1
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at ./sources/chess.move:123:13+32
    assume {:print "$at(2,3284,3316)"} true;
    assume {:print "$track_abort(16,4):", $t21} $t21 == $t21;

    // $t9 := move($t21) at ./sources/chess.move:123:13+32
    $t9 := $t21;

    // goto L22 at ./sources/chess.move:123:13+32
    goto L22;

    // label L8 at ./sources/chess.move:124:34+1
    assume {:print "$at(2,3351,3352)"} true;
L8:

    // $t22 := 2 at ./sources/chess.move:124:34+1
    assume {:print "$at(2,3351,3352)"} true;
    $t22 := 2;
    assume $IsValid'u8'($t22);

    // $t4 := $t22 at ./sources/chess.move:124:13+18
    $t4 := $t22;

    // trace_local[currentSenderValue#1#0]($t22) at ./sources/chess.move:124:13+18
    assume {:print "$track_local(16,4,4):", $t22} $t22 == $t22;

    // label L5 at ./sources/chess.move:127:17+1
    assume {:print "$at(2,3381,3382)"} true;
L5:

    // $t23 := 20 at ./sources/chess.move:127:21+14
    assume {:print "$at(2,3385,3399)"} true;
    $t23 := 20;
    assume $IsValid'u64'($t23);

    // $t24 := <($t1, $t23) at ./sources/chess.move:127:19+1
    call $t24 := $Lt($t1, $t23);

    // if ($t24) goto L10 else goto L19 at ./sources/chess.move:127:9+30
    if ($t24) { goto L10; } else { goto L19; }

    // label L10 at ./sources/chess.move:127:9+30
L10:

    // goto L11 at ./sources/chess.move:127:9+30
    assume {:print "$at(2,3373,3403)"} true;
    goto L11;

    // label L9 at ./sources/chess.move:127:9+30
L9:

    // destroy($t0) at ./sources/chess.move:127:9+30
    assume {:print "$at(2,3373,3403)"} true;

    // $t25 := 0 at ./sources/chess.move:127:37+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at ./sources/chess.move:127:9+30
    assume {:print "$at(2,3373,3403)"} true;
    assume {:print "$track_abort(16,4):", $t25} $t25 == $t25;

    // $t9 := move($t25) at ./sources/chess.move:127:9+30
    $t9 := $t25;

    // goto L22 at ./sources/chess.move:127:9+30
    goto L22;

    // label L11 at ./sources/chess.move:128:17+1
    assume {:print "$at(2,3421,3422)"} true;
L11:

    // $t26 := 20 at ./sources/chess.move:128:21+14
    assume {:print "$at(2,3425,3439)"} true;
    $t26 := 20;
    assume $IsValid'u64'($t26);

    // $t27 := <($t2, $t26) at ./sources/chess.move:128:19+1
    call $t27 := $Lt($t2, $t26);

    // if ($t27) goto L13 else goto L20 at ./sources/chess.move:128:9+30
    if ($t27) { goto L13; } else { goto L20; }

    // label L13 at ./sources/chess.move:128:9+30
L13:

    // goto L14 at ./sources/chess.move:128:9+30
    assume {:print "$at(2,3413,3443)"} true;
    goto L14;

    // label L12 at ./sources/chess.move:128:9+30
L12:

    // destroy($t0) at ./sources/chess.move:128:9+30
    assume {:print "$at(2,3413,3443)"} true;

    // $t28 := 0 at ./sources/chess.move:128:37+1
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // trace_abort($t28) at ./sources/chess.move:128:9+30
    assume {:print "$at(2,3413,3443)"} true;
    assume {:print "$track_abort(16,4):", $t28} $t28 == $t28;

    // $t9 := move($t28) at ./sources/chess.move:128:9+30
    $t9 := $t28;

    // goto L22 at ./sources/chess.move:128:9+30
    goto L22;

    // label L14 at ./sources/chess.move:129:43+4
    assume {:print "$at(2,3487,3491)"} true;
L14:

    // $t29 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:129:43+15
    assume {:print "$at(2,3487,3502)"} true;
    $t29 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t30 := borrow_field<game::Board>.board($t29) at ./sources/chess.move:129:38+26
    $t30 := $ChildMutation($t29, 0, $board#$0_game_Board($Dereference($t29)));

    // $t31 := vector::borrow_mut<vector<game::Node>>($t30, $t1) on_abort goto L22 with $t9 at ./sources/chess.move:129:19+49
    call $t31,$t30 := $1_vector_borrow_mut'vec'$0_game_Node''($t30, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,3463,3512)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // $t32 := vector::borrow_mut<game::Node>($t31, $t2) on_abort goto L22 with $t9 at ./sources/chess.move:130:20+26
    assume {:print "$at(2,3533,3559)"} true;
    call $t32,$t31 := $1_vector_borrow_mut'$0_game_Node'($t31, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,3533,3559)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // trace_local[node#1#0]($t32) at ./sources/chess.move:130:13+4
    $temp_0'$0_game_Node' := $Dereference($t32);
    assume {:print "$track_local(16,4,5):", $temp_0'$0_game_Node'} $temp_0'$0_game_Node' == $temp_0'$0_game_Node';

    // $t33 := borrow_field<game::Node>.value($t32) at ./sources/chess.move:131:9+10
    assume {:print "$at(2,3569,3579)"} true;
    $t33 := $ChildMutation($t32, 0, $value#$0_game_Node($Dereference($t32)));

    // write_ref($t33, $t4) at ./sources/chess.move:131:9+31
    $t33 := $UpdateMutation($t33, $t4);

    // write_back[Reference($t32).value (u8)]($t33) at ./sources/chess.move:131:9+31
    $t32 := $UpdateMutation($t32, $Update'$0_game_Node'_value($Dereference($t32), $Dereference($t33)));

    // write_back[Reference($t31)[]]($t32) at ./sources/chess.move:131:9+31
    $t31 := $UpdateMutation($t31, UpdateVec($Dereference($t31), ReadVec(p#$Mutation($t32), LenVec(p#$Mutation($t31))), $Dereference($t32)));

    // write_back[Reference($t30)[]]($t31) at ./sources/chess.move:131:9+31
    $t30 := $UpdateMutation($t30, UpdateVec($Dereference($t30), ReadVec(p#$Mutation($t31), LenVec(p#$Mutation($t30))), $Dereference($t31)));

    // write_back[Reference($t29).board (vector<vector<game::Node>>)]($t30) at ./sources/chess.move:131:9+31
    $t29 := $UpdateMutation($t29, $Update'$0_game_Board'_board($Dereference($t29), $Dereference($t30)));

    // write_back[Reference($t0).chessBoard (game::Board)]($t29) at ./sources/chess.move:131:9+31
    $t0 := $UpdateMutation($t0, $Update'$0_game_Game'_chessBoard($Dereference($t0), $Dereference($t29)));

    // trace_local[game]($t0) at ./sources/chess.move:131:9+31
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,4,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t34 := get_field<game::Game>.stepsCount($t0) at ./sources/chess.move:133:27+15
    assume {:print "$at(2,3629,3644)"} true;
    $t34 := $stepsCount#$0_game_Game($Dereference($t0));

    // $t35 := 1 at ./sources/chess.move:133:45+1
    $t35 := 1;
    assume $IsValid'u64'($t35);

    // $t36 := +($t34, $t35) on_abort goto L22 with $t9 at ./sources/chess.move:133:43+1
    call $t36 := $AddU64($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(2,3645,3646)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // $t37 := borrow_field<game::Game>.stepsCount($t0) at ./sources/chess.move:133:9+15
    $t37 := $ChildMutation($t0, 3, $stepsCount#$0_game_Game($Dereference($t0)));

    // write_ref($t37, $t36) at ./sources/chess.move:133:9+37
    $t37 := $UpdateMutation($t37, $t36);

    // write_back[Reference($t0).stepsCount (u64)]($t37) at ./sources/chess.move:133:9+37
    $t0 := $UpdateMutation($t0, $Update'$0_game_Game'_stepsCount($Dereference($t0), $Dereference($t37)));

    // trace_local[game]($t0) at ./sources/chess.move:133:9+37
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,4,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // $t38 := get_field<game::Game>.stepsCount($t0) at ./sources/chess.move:134:13+15
    assume {:print "$at(2,3662,3677)"} true;
    $t38 := $stepsCount#$0_game_Game($Dereference($t0));

    // $t39 := 20 at ./sources/chess.move:134:32+14
    $t39 := 20;
    assume $IsValid'u64'($t39);

    // $t40 := 20 at ./sources/chess.move:134:49+14
    $t40 := 20;
    assume $IsValid'u64'($t40);

    // $t41 := *($t39, $t40) on_abort goto L22 with $t9 at ./sources/chess.move:134:47+1
    call $t41 := $MulU64($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(2,3696,3697)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // $t42 := ==($t38, $t41) at ./sources/chess.move:134:29+2
    $t42 := $IsEqual'u64'($t38, $t41);

    // if ($t42) goto L16 else goto L15 at ./sources/chess.move:134:9+267
    if ($t42) { goto L16; } else { goto L15; }

    // label L16 at ./sources/chess.move:136:28+25
    assume {:print "$at(2,3789,3814)"} true;
L16:

    // $t43 := [116, 104, 101, 32, 99, 104, 101, 115, 115, 66, 111, 97, 114, 100, 32, 105, 115, 32, 102, 117, 108, 108] at ./sources/chess.move:136:28+25
    assume {:print "$at(2,3789,3814)"} true;
    $t43 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(116, 104, 101, 32), MakeVec4(99, 104, 101, 115)), MakeVec4(115, 66, 111, 97)), MakeVec4(114, 100, 32, 105)), MakeVec4(115, 32, 102, 117)), MakeVec2(108, 108));
    assume $IsValid'vec'u8''($t43);

    // $t44 := string::utf8($t43) on_abort goto L22 with $t9 at ./sources/chess.move:138:23+23
    assume {:print "$at(2,3874,3897)"} true;
    call $t44 := $1_string_utf8($t43);
    if ($abort_flag) {
        assume {:print "$at(2,3874,3897)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // $t45 := pack game::ChessEvent($t44) at ./sources/chess.move:137:25+72
    assume {:print "$at(2,3840,3912)"} true;
    $t45 := $0_game_ChessEvent($t44);

    // event::emit<game::ChessEvent>($t45) on_abort goto L22 with $t9 at ./sources/chess.move:137:13+85
    call $2_event_emit'$0_game_ChessEvent'($t45);
    if ($abort_flag) {
        assume {:print "$at(2,3828,3913)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // label L15 at ./sources/chess.move:144:24+4
    assume {:print "$at(2,3997,4001)"} true;
L15:

    // game::checkBoard($t0, $t1, $t2) on_abort goto L22 with $t9 at ./sources/chess.move:144:13+22
    assume {:print "$at(2,3986,4008)"} true;
    call $t0 := $0_game_checkBoard($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,3986,4008)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(16,4):", $t9} $t9 == $t9;
        goto L22;
    }

    // trace_local[game]($t0) at ./sources/chess.move:144:13+22
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,4,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[ctx]($t3) at ./sources/chess.move:144:13+22
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L21 at ./sources/chess.move:144:13+22
    goto L21;

    // label L17 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L17:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L18 at <internal>:1:1+10
L18:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L9 at <internal>:1:1+10
    goto L9;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L21 at ./sources/chess.move:147:5+1
    assume {:print "$at(2,4024,4025)"} true;
L21:

    // return () at ./sources/chess.move:147:5+1
    assume {:print "$at(2,4024,4025)"} true;
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L22 at ./sources/chess.move:147:5+1
L22:

    // abort($t9) at ./sources/chess.move:147:5+1
    assume {:print "$at(2,4024,4025)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun game::resetGame [verification] at ./sources/chess.move:353:5+609
procedure {:timeLimit 40} $0_game_resetGame$verify(_$t0: $Mutation ($0_game_Game), _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_game_Game), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($0_game_Node);
    var $t5: $Mutation (Vec ($0_game_Node));
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($0_game_Board);
    var $t24: $Mutation (Vec (Vec ($0_game_Node)));
    var $t25: $Mutation (Vec ($0_game_Node));
    var $t26: $Mutation ($0_game_Node);
    var $t27: $Mutation (int);
    var $t28: int;
    var $t29: $Mutation (int);
    var $t0: $Mutation ($0_game_Game);
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$0_game_Node': $0_game_Node;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    var $temp_0'vec'$0_game_Node'': Vec ($0_game_Node);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:353:5+1
    assume {:print "$at(2,9965,9966)"} true;
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/chess.move:353:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[game]($t0) at ./sources/chess.move:353:5+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,10,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[ctx]($t1) at ./sources/chess.move:353:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(16,10,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t1) at ./sources/chess.move:356:41+3
    assume {:print "$at(2,10129,10132)"} true;
    $t6 := $Dereference($t1);

    // $t7 := tx_context::sender($t6) on_abort goto L15 with $t8 at ./sources/chess.move:356:22+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(2,10110,10133)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(16,10):", $t8} $t8 == $t8;
        goto L15;
    }

    // $t9 := get_field<game::Game>.admin($t0) at ./sources/chess.move:357:25+10
    assume {:print "$at(2,10159,10169)"} true;
    $t9 := $admin#$0_game_Game($Dereference($t0));

    // $t10 := ==($t7, $t9) at ./sources/chess.move:357:23+2
    $t10 := $IsEqual'address'($t7, $t9);

    // if ($t10) goto L16 else goto L11 at ./sources/chess.move:357:9+30
    if ($t10) { goto L16; } else { goto L11; }

    // label L1 at ./sources/chess.move:357:9+30
L1:

    // goto L2 at ./sources/chess.move:357:9+30
    assume {:print "$at(2,10143,10173)"} true;
    goto L2;

    // label L0 at ./sources/chess.move:357:9+30
L0:

    // destroy($t0) at ./sources/chess.move:357:9+30
    assume {:print "$at(2,10143,10173)"} true;

    // $t11 := 0 at ./sources/chess.move:357:37+1
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at ./sources/chess.move:357:9+30
    assume {:print "$at(2,10143,10173)"} true;
    assume {:print "$track_abort(16,10):", $t11} $t11 == $t11;

    // $t8 := move($t11) at ./sources/chess.move:357:9+30
    $t8 := $t11;

    // goto L15 at ./sources/chess.move:357:9+30
    goto L15;

    // label L2 at ./sources/chess.move:359:21+1
    assume {:print "$at(2,10196,10197)"} true;
L2:

    // $t12 := 0 at ./sources/chess.move:359:21+1
    assume {:print "$at(2,10196,10197)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_local[i#1#0]($t12) at ./sources/chess.move:359:13+1
    assume {:print "$track_local(16,10,2):", $t12} $t12 == $t12;

    // label L10 at ./sources/chess.move:360:15+1
    assume {:print "$at(2,10213,10214)"} true;
L10:

    // $t2 := havoc[val]() at ./sources/chess.move:360:15+1
    assume {:print "$at(2,10213,10214)"} true;
    havoc $t2;

    // assume WellFormed($t2) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t2);

    // $t3 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t3);

    // $t13 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t13;

    // assume WellFormed($t13) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t13);

    // $t14 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t14;

    // assume WellFormed($t14) at ./sources/chess.move:360:15+1
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t15;

    // assume WellFormed($t15) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t16;

    // assume WellFormed($t16) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t17;

    // assume WellFormed($t17) at ./sources/chess.move:360:15+1
    assume $IsValid'bool'($t17);

    // $t18 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:360:15+1
    assume $IsValid'u8'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/chess.move:360:15+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/chess.move:360:15+1
    assume $IsValid'u64'($t22);

    // $t0 := havoc[mut]() at ./sources/chess.move:360:15+1
    havoc $temp_0'$0_game_Game';
    $t0 := $UpdateMutation($t0, $temp_0'$0_game_Game');

    // assume WellFormed($t0) at ./sources/chess.move:360:15+1
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // $t23 := havoc[mut_all]() at ./sources/chess.move:360:15+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/chess.move:360:15+1
    assume $IsValid'$0_game_Board'($Dereference($t23));

    // $t24 := havoc[mut_all]() at ./sources/chess.move:360:15+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/chess.move:360:15+1
    assume $IsValid'vec'vec'$0_game_Node'''($Dereference($t24));

    // $t25 := havoc[mut_all]() at ./sources/chess.move:360:15+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/chess.move:360:15+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t25));

    // $t26 := havoc[mut_all]() at ./sources/chess.move:360:15+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:360:15+1
    assume $IsValid'$0_game_Node'($Dereference($t26));

    // $t27 := havoc[mut_all]() at ./sources/chess.move:360:15+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:360:15+1
    assume $IsValid'u8'($Dereference($t27));

    // trace_local[game]($t0) at ./sources/chess.move:360:15+1
    assume {:print "$info(): enter loop, variable(s) game, i#1#0, j#1#0 havocked and reassigned"} true;
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,10,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[i#1#0]($t2) at ./sources/chess.move:360:15+1
    assume {:print "$track_local(16,10,2):", $t2} $t2 == $t2;

    // trace_local[j#1#0]($t3) at ./sources/chess.move:360:15+1
    assume {:print "$track_local(16,10,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at ./sources/chess.move:360:15+1
    assume !$abort_flag;

    // $t13 := 20 at ./sources/chess.move:360:19+14
    $t13 := 20;
    assume $IsValid'u64'($t13);

    // $t14 := <($t2, $t13) at ./sources/chess.move:360:17+1
    call $t14 := $Lt($t2, $t13);

    // if ($t14) goto L17 else goto L3 at ./sources/chess.move:360:9+330
    if ($t14) { goto L17; } else { goto L3; }

    // label L4 at ./sources/chess.move:360:9+330
L4:

    // label L5 at ./sources/chess.move:361:47+4
    assume {:print "$at(2,10280,10284)"} true;
L5:

    // $t23 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:361:47+15
    assume {:print "$at(2,10280,10295)"} true;
    $t23 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t24 := borrow_field<game::Board>.board($t23) at ./sources/chess.move:361:42+26
    $t24 := $ChildMutation($t23, 0, $board#$0_game_Board($Dereference($t23)));

    // $t25 := vector::borrow_mut<vector<game::Node>>($t24, $t2) on_abort goto L15 with $t8 at ./sources/chess.move:361:23+49
    call $t25,$t24 := $1_vector_borrow_mut'vec'$0_game_Node''($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,10256,10305)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(16,10):", $t8} $t8 == $t8;
        goto L15;
    }

    // trace_local[row#1#0]($t25) at ./sources/chess.move:361:17+3
    $temp_0'vec'$0_game_Node'' := $Dereference($t25);
    assume {:print "$track_local(16,10,5):", $temp_0'vec'$0_game_Node''} $temp_0'vec'$0_game_Node'' == $temp_0'vec'$0_game_Node'';

    // $t15 := 0 at ./sources/chess.move:363:25+1
    assume {:print "$at(2,10332,10333)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // trace_local[j#1#0]($t15) at ./sources/chess.move:363:17+1
    assume {:print "$track_local(16,10,3):", $t15} $t15 == $t15;

    // label L9 at ./sources/chess.move:364:19+1
    assume {:print "$at(2,10353,10354)"} true;
L9:

    // $t3 := havoc[val]() at ./sources/chess.move:364:19+1
    assume {:print "$at(2,10353,10354)"} true;
    havoc $t3;

    // assume WellFormed($t3) at ./sources/chess.move:364:19+1
    assume $IsValid'u64'($t3);

    // $t16 := havoc[val]() at ./sources/chess.move:364:19+1
    havoc $t16;

    // assume WellFormed($t16) at ./sources/chess.move:364:19+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at ./sources/chess.move:364:19+1
    havoc $t17;

    // assume WellFormed($t17) at ./sources/chess.move:364:19+1
    assume $IsValid'bool'($t17);

    // $t18 := havoc[val]() at ./sources/chess.move:364:19+1
    havoc $t18;

    // assume WellFormed($t18) at ./sources/chess.move:364:19+1
    assume $IsValid'u8'($t18);

    // $t19 := havoc[val]() at ./sources/chess.move:364:19+1
    havoc $t19;

    // assume WellFormed($t19) at ./sources/chess.move:364:19+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at ./sources/chess.move:364:19+1
    havoc $t20;

    // assume WellFormed($t20) at ./sources/chess.move:364:19+1
    assume $IsValid'u64'($t20);

    // $t25 := havoc[mut]() at ./sources/chess.move:364:19+1
    havoc $temp_0'vec'$0_game_Node'';
    $t25 := $UpdateMutation($t25, $temp_0'vec'$0_game_Node'');

    // assume WellFormed($t25) at ./sources/chess.move:364:19+1
    assume $IsValid'vec'$0_game_Node''($Dereference($t25));

    // $t26 := havoc[mut_all]() at ./sources/chess.move:364:19+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/chess.move:364:19+1
    assume $IsValid'$0_game_Node'($Dereference($t26));

    // $t27 := havoc[mut_all]() at ./sources/chess.move:364:19+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/chess.move:364:19+1
    assume $IsValid'u8'($Dereference($t27));

    // trace_local[j#1#0]($t3) at ./sources/chess.move:364:19+1
    assume {:print "$info(): enter loop, variable(s) j#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(16,10,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at ./sources/chess.move:364:19+1
    assume !$abort_flag;

    // $t16 := 20 at ./sources/chess.move:364:23+14
    $t16 := 20;
    assume $IsValid'u64'($t16);

    // $t17 := <($t3, $t16) at ./sources/chess.move:364:21+1
    call $t17 := $Lt($t3, $t16);

    // if ($t17) goto L18 else goto L6 at ./sources/chess.move:364:13+156
    if ($t17) { goto L18; } else { goto L6; }

    // label L7 at ./sources/chess.move:364:13+156
L7:

    // label L8 at ./sources/chess.move:366:47+3
    assume {:print "$at(2,10421,10424)"} true;
L8:

    // $t26 := vector::borrow_mut<game::Node>($t25, $t3) on_abort goto L15 with $t8 at ./sources/chess.move:366:28+26
    assume {:print "$at(2,10402,10428)"} true;
    call $t26,$t25 := $1_vector_borrow_mut'$0_game_Node'($t25, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,10402,10428)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(16,10):", $t8} $t8 == $t8;
        goto L15;
    }

    // trace_local[node#1#0]($t26) at ./sources/chess.move:366:21+4
    $temp_0'$0_game_Node' := $Dereference($t26);
    assume {:print "$track_local(16,10,4):", $temp_0'$0_game_Node'} $temp_0'$0_game_Node' == $temp_0'$0_game_Node';

    // $t18 := 0 at ./sources/chess.move:367:30+1
    assume {:print "$at(2,10459,10460)"} true;
    $t18 := 0;
    assume $IsValid'u8'($t18);

    // $t27 := borrow_field<game::Node>.value($t26) at ./sources/chess.move:367:17+10
    $t27 := $ChildMutation($t26, 0, $value#$0_game_Node($Dereference($t26)));

    // write_ref($t27, $t18) at ./sources/chess.move:367:17+14
    $t27 := $UpdateMutation($t27, $t18);

    // write_back[Reference($t26).value (u8)]($t27) at ./sources/chess.move:367:17+14
    $t26 := $UpdateMutation($t26, $Update'$0_game_Node'_value($Dereference($t26), $Dereference($t27)));

    // write_back[Reference($t25)[]]($t26) at ./sources/chess.move:367:17+14
    $t25 := $UpdateMutation($t25, UpdateVec($Dereference($t25), ReadVec(p#$Mutation($t26), LenVec(p#$Mutation($t25))), $Dereference($t26)));

    // $t19 := 1 at ./sources/chess.move:369:25+1
    assume {:print "$at(2,10487,10488)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := +($t3, $t19) on_abort goto L15 with $t8 at ./sources/chess.move:369:23+1
    call $t20 := $AddU64($t3, $t19);
    if ($abort_flag) {
        assume {:print "$at(2,10485,10486)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(16,10):", $t8} $t8 == $t8;
        goto L15;
    }

    // trace_local[j#1#0]($t20) at ./sources/chess.move:369:17+1
    assume {:print "$track_local(16,10,3):", $t20} $t20 == $t20;

    // goto L12 at ./sources/chess.move:369:26+1
    goto L12;

    // label L6 at ./sources/chess.move:371:13+9
    assume {:print "$at(2,10517,10526)"} true;
L6:

    // write_back[Reference($t24)[]]($t25) at ./sources/chess.move:371:13+9
    assume {:print "$at(2,10517,10526)"} true;
    $t24 := $UpdateMutation($t24, UpdateVec($Dereference($t24), ReadVec(p#$Mutation($t25), LenVec(p#$Mutation($t24))), $Dereference($t25)));

    // write_back[Reference($t23).board (vector<vector<game::Node>>)]($t24) at ./sources/chess.move:371:13+9
    $t23 := $UpdateMutation($t23, $Update'$0_game_Board'_board($Dereference($t23), $Dereference($t24)));

    // write_back[Reference($t0).chessBoard (game::Board)]($t23) at ./sources/chess.move:371:13+9
    $t0 := $UpdateMutation($t0, $Update'$0_game_Game'_chessBoard($Dereference($t0), $Dereference($t23)));

    // trace_local[game]($t0) at ./sources/chess.move:371:13+9
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,10,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // destroy($t25) at ./sources/chess.move:371:13+9

    // $t21 := 1 at ./sources/chess.move:371:21+1
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t2, $t21) on_abort goto L15 with $t8 at ./sources/chess.move:371:19+1
    call $t22 := $AddU64($t2, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,10523,10524)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(16,10):", $t8} $t8 == $t8;
        goto L15;
    }

    // trace_local[i#1#0]($t22) at ./sources/chess.move:371:13+1
    assume {:print "$track_local(16,10,2):", $t22} $t22 == $t22;

    // goto L13 at ./sources/chess.move:371:22+1
    goto L13;

    // label L3 at ./sources/chess.move:373:27+1
    assume {:print "$at(2,10565,10566)"} true;
L3:

    // $t28 := 0 at ./sources/chess.move:373:27+1
    assume {:print "$at(2,10565,10566)"} true;
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // $t29 := borrow_field<game::Game>.stepsCount($t0) at ./sources/chess.move:373:9+15
    $t29 := $ChildMutation($t0, 3, $stepsCount#$0_game_Game($Dereference($t0)));

    // write_ref($t29, $t28) at ./sources/chess.move:373:9+19
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t0).stepsCount (u64)]($t29) at ./sources/chess.move:373:9+19
    $t0 := $UpdateMutation($t0, $Update'$0_game_Game'_stepsCount($Dereference($t0), $Dereference($t29)));

    // trace_local[game]($t0) at ./sources/chess.move:373:9+19
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,10,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[game]($t0) at ./sources/chess.move:373:28+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,10,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[ctx]($t1) at ./sources/chess.move:373:28+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(16,10,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L14 at ./sources/chess.move:373:28+1
    goto L14;

    // label L11 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L11:

    // destroy($t1) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L12 at <unknown>:1:1+9
    // Loop invariant checking block for the loop started with header: L9
L12:

    // stop() at <unknown>:1:1+9
    assume {:print "$at(0,0,9)"} true;
    assume false;
    return;

    // label L13 at <unknown>:1:1+9
    // Loop invariant checking block for the loop started with header: L10
L13:

    // stop() at <unknown>:1:1+9
    assume {:print "$at(0,0,9)"} true;
    assume false;
    return;

    // label L14 at ./sources/chess.move:375:5+1
    assume {:print "$at(2,10573,10574)"} true;
L14:

    // return () at ./sources/chess.move:375:5+1
    assume {:print "$at(2,10573,10574)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L15 at ./sources/chess.move:375:5+1
L15:

    // abort($t8) at ./sources/chess.move:375:5+1
    assume {:print "$at(2,10573,10574)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L16 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L16:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L1 at <internal>:1:1+10
    goto L1;

    // label L17 at <internal>:1:1+10
L17:

    // destroy($t1) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

    // label L18 at <internal>:1:1+10
L18:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // destroy($t23) at <internal>:1:1+10

    // destroy($t24) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun game::setChessBoardValue [verification] at ./sources/chess.move:83:5+513
procedure {:timeLimit 40} $0_game_setChessBoardValue$verify(_$t0: $Mutation ($0_game_Game), _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_game_Game), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($0_game_Node);
    var $t5: $2_tx_context_TxContext;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: $Mutation ($0_game_Board);
    var $t18: $Mutation (Vec (Vec ($0_game_Node)));
    var $t19: $Mutation (Vec ($0_game_Node));
    var $t20: $Mutation ($0_game_Node);
    var $t21: int;
    var $t22: $Mutation (int);
    var $t0: $Mutation ($0_game_Game);
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_game_Game': $0_game_Game;
    var $temp_0'$0_game_Node': $0_game_Node;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:83:5+1
    assume {:print "$at(2,1944,1945)"} true;
    assume $IsValid'$0_game_Game'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/chess.move:83:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/chess.move:83:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/chess.move:83:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[game]($t0) at ./sources/chess.move:83:5+1
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,2,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[x]($t1) at ./sources/chess.move:83:5+1
    assume {:print "$track_local(16,2,1):", $t1} $t1 == $t1;

    // trace_local[y]($t2) at ./sources/chess.move:83:5+1
    assume {:print "$track_local(16,2,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/chess.move:83:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := read_ref($t3) at ./sources/chess.move:88:41+3
    assume {:print "$at(2,2185,2188)"} true;
    $t5 := $Dereference($t3);

    // $t6 := tx_context::sender($t5) on_abort goto L13 with $t7 at ./sources/chess.move:88:22+23
    call $t6 := $2_tx_context_sender($t5);
    if ($abort_flag) {
        assume {:print "$at(2,2166,2189)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(16,2):", $t7} $t7 == $t7;
        goto L13;
    }

    // $t8 := get_field<game::Game>.admin($t0) at ./sources/chess.move:89:25+10
    assume {:print "$at(2,2215,2225)"} true;
    $t8 := $admin#$0_game_Game($Dereference($t0));

    // $t9 := ==($t6, $t8) at ./sources/chess.move:89:23+2
    $t9 := $IsEqual'address'($t6, $t8);

    // if ($t9) goto L1 else goto L9 at ./sources/chess.move:89:9+30
    if ($t9) { goto L1; } else { goto L9; }

    // label L1 at ./sources/chess.move:89:9+30
L1:

    // goto L2 at ./sources/chess.move:89:9+30
    assume {:print "$at(2,2199,2229)"} true;
    goto L2;

    // label L0 at ./sources/chess.move:89:9+30
L0:

    // destroy($t0) at ./sources/chess.move:89:9+30
    assume {:print "$at(2,2199,2229)"} true;

    // $t10 := 0 at ./sources/chess.move:89:37+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/chess.move:89:9+30
    assume {:print "$at(2,2199,2229)"} true;
    assume {:print "$track_abort(16,2):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/chess.move:89:9+30
    $t7 := $t10;

    // goto L13 at ./sources/chess.move:89:9+30
    goto L13;

    // label L2 at ./sources/chess.move:91:17+1
    assume {:print "$at(2,2248,2249)"} true;
L2:

    // $t11 := 20 at ./sources/chess.move:91:21+14
    assume {:print "$at(2,2252,2266)"} true;
    $t11 := 20;
    assume $IsValid'u64'($t11);

    // $t12 := <($t1, $t11) at ./sources/chess.move:91:19+1
    call $t12 := $Lt($t1, $t11);

    // if ($t12) goto L4 else goto L10 at ./sources/chess.move:91:9+30
    if ($t12) { goto L4; } else { goto L10; }

    // label L4 at ./sources/chess.move:91:9+30
L4:

    // goto L5 at ./sources/chess.move:91:9+30
    assume {:print "$at(2,2240,2270)"} true;
    goto L5;

    // label L3 at ./sources/chess.move:91:9+30
L3:

    // destroy($t0) at ./sources/chess.move:91:9+30
    assume {:print "$at(2,2240,2270)"} true;

    // $t13 := 0 at ./sources/chess.move:91:37+1
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/chess.move:91:9+30
    assume {:print "$at(2,2240,2270)"} true;
    assume {:print "$track_abort(16,2):", $t13} $t13 == $t13;

    // $t7 := move($t13) at ./sources/chess.move:91:9+30
    $t7 := $t13;

    // goto L13 at ./sources/chess.move:91:9+30
    goto L13;

    // label L5 at ./sources/chess.move:92:17+1
    assume {:print "$at(2,2288,2289)"} true;
L5:

    // $t14 := 20 at ./sources/chess.move:92:21+14
    assume {:print "$at(2,2292,2306)"} true;
    $t14 := 20;
    assume $IsValid'u64'($t14);

    // $t15 := <($t2, $t14) at ./sources/chess.move:92:19+1
    call $t15 := $Lt($t2, $t14);

    // if ($t15) goto L7 else goto L11 at ./sources/chess.move:92:9+30
    if ($t15) { goto L7; } else { goto L11; }

    // label L7 at ./sources/chess.move:92:9+30
L7:

    // goto L8 at ./sources/chess.move:92:9+30
    assume {:print "$at(2,2280,2310)"} true;
    goto L8;

    // label L6 at ./sources/chess.move:92:9+30
L6:

    // destroy($t0) at ./sources/chess.move:92:9+30
    assume {:print "$at(2,2280,2310)"} true;

    // $t16 := 0 at ./sources/chess.move:92:37+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at ./sources/chess.move:92:9+30
    assume {:print "$at(2,2280,2310)"} true;
    assume {:print "$track_abort(16,2):", $t16} $t16 == $t16;

    // $t7 := move($t16) at ./sources/chess.move:92:9+30
    $t7 := $t16;

    // goto L13 at ./sources/chess.move:92:9+30
    goto L13;

    // label L8 at ./sources/chess.move:93:43+4
    assume {:print "$at(2,2354,2358)"} true;
L8:

    // $t17 := borrow_field<game::Game>.chessBoard($t0) at ./sources/chess.move:93:43+15
    assume {:print "$at(2,2354,2369)"} true;
    $t17 := $ChildMutation($t0, 2, $chessBoard#$0_game_Game($Dereference($t0)));

    // $t18 := borrow_field<game::Board>.board($t17) at ./sources/chess.move:93:38+26
    $t18 := $ChildMutation($t17, 0, $board#$0_game_Board($Dereference($t17)));

    // $t19 := vector::borrow_mut<vector<game::Node>>($t18, $t1) on_abort goto L13 with $t7 at ./sources/chess.move:93:19+49
    call $t19,$t18 := $1_vector_borrow_mut'vec'$0_game_Node''($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2330,2379)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(16,2):", $t7} $t7 == $t7;
        goto L13;
    }

    // $t20 := vector::borrow_mut<game::Node>($t19, $t2) on_abort goto L13 with $t7 at ./sources/chess.move:94:20+26
    assume {:print "$at(2,2400,2426)"} true;
    call $t20,$t19 := $1_vector_borrow_mut'$0_game_Node'($t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,2400,2426)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(16,2):", $t7} $t7 == $t7;
        goto L13;
    }

    // trace_local[node#1#0]($t20) at ./sources/chess.move:94:13+4
    $temp_0'$0_game_Node' := $Dereference($t20);
    assume {:print "$track_local(16,2,4):", $temp_0'$0_game_Node'} $temp_0'$0_game_Node' == $temp_0'$0_game_Node';

    // $t21 := 1 at ./sources/chess.move:95:22+1
    assume {:print "$at(2,2449,2450)"} true;
    $t21 := 1;
    assume $IsValid'u8'($t21);

    // $t22 := borrow_field<game::Node>.value($t20) at ./sources/chess.move:95:9+10
    $t22 := $ChildMutation($t20, 0, $value#$0_game_Node($Dereference($t20)));

    // write_ref($t22, $t21) at ./sources/chess.move:95:9+14
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t20).value (u8)]($t22) at ./sources/chess.move:95:9+14
    $t20 := $UpdateMutation($t20, $Update'$0_game_Node'_value($Dereference($t20), $Dereference($t22)));

    // write_back[Reference($t19)[]]($t20) at ./sources/chess.move:95:9+14
    $t19 := $UpdateMutation($t19, UpdateVec($Dereference($t19), ReadVec(p#$Mutation($t20), LenVec(p#$Mutation($t19))), $Dereference($t20)));

    // write_back[Reference($t18)[]]($t19) at ./sources/chess.move:95:9+14
    $t18 := $UpdateMutation($t18, UpdateVec($Dereference($t18), ReadVec(p#$Mutation($t19), LenVec(p#$Mutation($t18))), $Dereference($t19)));

    // write_back[Reference($t17).board (vector<vector<game::Node>>)]($t18) at ./sources/chess.move:95:9+14
    $t17 := $UpdateMutation($t17, $Update'$0_game_Board'_board($Dereference($t17), $Dereference($t18)));

    // write_back[Reference($t0).chessBoard (game::Board)]($t17) at ./sources/chess.move:95:9+14
    $t0 := $UpdateMutation($t0, $Update'$0_game_Game'_chessBoard($Dereference($t0), $Dereference($t17)));

    // trace_local[game]($t0) at ./sources/chess.move:95:9+14
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,2,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[game]($t0) at ./sources/chess.move:95:9+14
    $temp_0'$0_game_Game' := $Dereference($t0);
    assume {:print "$track_local(16,2,0):", $temp_0'$0_game_Game'} $temp_0'$0_game_Game' == $temp_0'$0_game_Game';

    // trace_local[ctx]($t3) at ./sources/chess.move:95:9+14
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(16,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L12 at ./sources/chess.move:95:9+14
    goto L12;

    // label L9 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L9:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L10 at <internal>:1:1+10
L10:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L12 at ./sources/chess.move:97:5+1
    assume {:print "$at(2,2456,2457)"} true;
L12:

    // return () at ./sources/chess.move:97:5+1
    assume {:print "$at(2,2456,2457)"} true;
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L13 at ./sources/chess.move:97:5+1
L13:

    // abort($t7) at ./sources/chess.move:97:5+1
    assume {:print "$at(2,2456,2457)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun game::testBool [verification] at ./sources/chess.move:42:5+96
procedure {:timeLimit 40} $0_game_testBool$verify(_$t0: bool) returns ($ret0: bool)
{
    // declare local variables
    var $t0: bool;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/chess.move:42:5+1
    assume {:print "$at(2,802,803)"} true;
    assume $IsValid'bool'($t0);

    // trace_local[value]($t0) at ./sources/chess.move:42:5+1
    assume {:print "$track_local(16,0,0):", $t0} $t0 == $t0;

    // trace_return[0]($t0) at ./sources/chess.move:45:9+6
    assume {:print "$at(2,886,892)"} true;
    assume {:print "$track_return(16,0,0):", $t0} $t0 == $t0;

    // label L1 at ./sources/chess.move:46:5+1
    assume {:print "$at(2,897,898)"} true;
L1:

    // return $t0 at ./sources/chess.move:46:5+1
    assume {:print "$at(2,897,898)"} true;
    $ret0 := $t0;
    return;

}

// struct vec_map::Entry<u64, u64> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:34:5+88
type {:datatype} $2_vec_map_Entry'u64_u64';
function {:constructor} $2_vec_map_Entry'u64_u64'($key: int, $value: int): $2_vec_map_Entry'u64_u64';
function {:inline} $Update'$2_vec_map_Entry'u64_u64''_key(s: $2_vec_map_Entry'u64_u64', x: int): $2_vec_map_Entry'u64_u64' {
    $2_vec_map_Entry'u64_u64'(x, $value#$2_vec_map_Entry'u64_u64'(s))
}
function {:inline} $Update'$2_vec_map_Entry'u64_u64''_value(s: $2_vec_map_Entry'u64_u64', x: int): $2_vec_map_Entry'u64_u64' {
    $2_vec_map_Entry'u64_u64'($key#$2_vec_map_Entry'u64_u64'(s), x)
}
function $IsValid'$2_vec_map_Entry'u64_u64''(s: $2_vec_map_Entry'u64_u64'): bool {
    $IsValid'u64'($key#$2_vec_map_Entry'u64_u64'(s))
      && $IsValid'u64'($value#$2_vec_map_Entry'u64_u64'(s))
}
function {:inline} $IsEqual'$2_vec_map_Entry'u64_u64''(s1: $2_vec_map_Entry'u64_u64', s2: $2_vec_map_Entry'u64_u64'): bool {
    s1 == s2
}

// struct vec_map::Entry<u64, obc_dao::OBCDaoAction> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:34:5+88
type {:datatype} $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction';
function {:constructor} $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'($key: int, $value: $0_obc_dao_OBCDaoAction): $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction';
function {:inline} $Update'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''_key(s: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', x: int): $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction' {
    $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(x, $value#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s))
}
function {:inline} $Update'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''_value(s: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', x: $0_obc_dao_OBCDaoAction): $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction' {
    $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'($key#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s), x)
}
function $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(s: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'): bool {
    $IsValid'u64'($key#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s))
      && $IsValid'$0_obc_dao_OBCDaoAction'($value#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s))
}
function {:inline} $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''(s1: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction', s2: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'): bool {
    $IsEqual'u64'($key#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s1), $key#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s2))
    && $IsEqual'$0_obc_dao_OBCDaoAction'($value#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s1), $value#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'(s2))}

// struct vec_map::Entry<u64, obc_dao::ProposalInfo> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:34:5+88
type {:datatype} $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo';
function {:constructor} $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($key: int, $value: $0_obc_dao_ProposalInfo): $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo';
function {:inline} $Update'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''_key(s: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', x: int): $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo' {
    $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(x, $value#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s))
}
function {:inline} $Update'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''_value(s: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', x: $0_obc_dao_ProposalInfo): $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo' {
    $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s), x)
}
function $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(s: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'): bool {
    $IsValid'u64'($key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s))
      && $IsValid'$0_obc_dao_ProposalInfo'($value#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s))
}
function {:inline} $IsEqual'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''(s1: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo', s2: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'): bool {
    $IsEqual'u64'($key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s1), $key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s2))
    && $IsEqual'$0_obc_dao_ProposalInfo'($value#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s1), $value#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'(s2))}

// struct vec_map::VecMap<u64, u64> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:29:5+94
type {:datatype} $2_vec_map_VecMap'u64_u64';
function {:constructor} $2_vec_map_VecMap'u64_u64'($contents: Vec ($2_vec_map_Entry'u64_u64')): $2_vec_map_VecMap'u64_u64';
function {:inline} $Update'$2_vec_map_VecMap'u64_u64''_contents(s: $2_vec_map_VecMap'u64_u64', x: Vec ($2_vec_map_Entry'u64_u64')): $2_vec_map_VecMap'u64_u64' {
    $2_vec_map_VecMap'u64_u64'(x)
}
function $IsValid'$2_vec_map_VecMap'u64_u64''(s: $2_vec_map_VecMap'u64_u64'): bool {
    $IsValid'vec'$2_vec_map_Entry'u64_u64'''($contents#$2_vec_map_VecMap'u64_u64'(s))
}
function {:inline} $IsEqual'$2_vec_map_VecMap'u64_u64''(s1: $2_vec_map_VecMap'u64_u64', s2: $2_vec_map_VecMap'u64_u64'): bool {
    $IsEqual'vec'$2_vec_map_Entry'u64_u64'''($contents#$2_vec_map_VecMap'u64_u64'(s1), $contents#$2_vec_map_VecMap'u64_u64'(s2))}

// struct vec_map::VecMap<u64, obc_dao::OBCDaoAction> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:29:5+94
type {:datatype} $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
function {:constructor} $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($contents: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
function {:inline} $Update'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''_contents(s: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', x: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction')): $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction' {
    $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'(x)
}
function $IsValid'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''(s: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'): bool {
    $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''($contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'(s))
}
function {:inline} $IsEqual'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''(s1: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', s2: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'): bool {
    $IsEqual'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''($contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'(s1), $contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'(s2))}

// struct vec_map::VecMap<u64, obc_dao::ProposalInfo> at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:29:5+94
type {:datatype} $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
function {:constructor} $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($contents: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
function {:inline} $Update'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''_contents(s: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', x: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo')): $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo' {
    $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'(x)
}
function $IsValid'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''(s: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'): bool {
    $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''($contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'(s))
}
function {:inline} $IsEqual'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''(s1: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', s2: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'): bool {
    $IsEqual'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''($contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'(s1), $contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'(s2))}

// fun vec_map::contains<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+124
procedure {:inline 1} $2_vec_map_contains'u64_$0_obc_dao_OBCDaoAction'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t1: int;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+1
    assume {:print "$at(82,3573,3574)"} true;
    assume {:print "$track_local(17,7,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+1
    assume {:print "$track_local(17,7,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L2 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:26+22
    assume {:print "$at(82,3668,3690)"} true;
    call $t3 := $2_vec_map_get_idx_opt'u64_$0_obc_dao_OBCDaoAction'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,3668,3690)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,7):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40

    // assume WellFormed($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40

    // trace_return[0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume {:print "$track_return(17,7,0):", $t5} $t5 == $t5;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
L1:

    // return $t5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
L2:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::contains<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+124
procedure {:inline 1} $2_vec_map_contains'u64_$0_obc_dao_ProposalInfo'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t1: int;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+1
    assume {:print "$at(82,3573,3574)"} true;
    assume {:print "$track_local(17,7,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:93:5+1
    assume {:print "$track_local(17,7,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L2 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:26+22
    assume {:print "$at(82,3668,3690)"} true;
    call $t3 := $2_vec_map_get_idx_opt'u64_$0_obc_dao_ProposalInfo'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,3668,3690)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,7):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40

    // assume WellFormed($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40

    // trace_return[0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:94:9+40
    assume {:print "$track_return(17,7,0):", $t5} $t5 == $t5;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
L1:

    // return $t5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
L2:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:95:5+1
    assume {:print "$at(82,3696,3697)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::empty<u64, u64> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:40:5+96
procedure {:inline 1} $2_vec_map_empty'u64_u64'() returns ($ret0: $2_vec_map_VecMap'u64_u64')
{
    // declare local variables
    var $t0: Vec ($2_vec_map_Entry'u64_u64');
    var $t1: int;
    var $t2: $2_vec_map_VecMap'u64_u64';
    var $temp_0'$2_vec_map_VecMap'u64_u64'': $2_vec_map_VecMap'u64_u64';

    // bytecode translation starts here
    // $t0 := vector::empty<vec_map::Entry<#0, #1>>() on_abort goto L2 with $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:28+15
    assume {:print "$at(82,1461,1476)"} true;
    call $t0 := $1_vector_empty'$2_vec_map_Entry'u64_u64''();
    if ($abort_flag) {
        assume {:print "$at(82,1461,1476)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(17,0):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_map::VecMap<#0, #1>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    $t2 := $2_vec_map_VecMap'u64_u64'($t0);

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    assume {:print "$track_return(17,0,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
L2:

    // abort($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_map::empty<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:40:5+96
procedure {:inline 1} $2_vec_map_empty'u64_$0_obc_dao_OBCDaoAction'() returns ($ret0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction')
{
    // declare local variables
    var $t0: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    var $t1: int;
    var $t2: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';

    // bytecode translation starts here
    // $t0 := vector::empty<vec_map::Entry<#0, #1>>() on_abort goto L2 with $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:28+15
    assume {:print "$at(82,1461,1476)"} true;
    call $t0 := $1_vector_empty'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''();
    if ($abort_flag) {
        assume {:print "$at(82,1461,1476)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(17,0):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_map::VecMap<#0, #1>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    $t2 := $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($t0);

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    assume {:print "$track_return(17,0,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
L2:

    // abort($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_map::empty<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:40:5+96
procedure {:inline 1} $2_vec_map_empty'u64_$0_obc_dao_ProposalInfo'() returns ($ret0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo')
{
    // declare local variables
    var $t0: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    var $t1: int;
    var $t2: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';

    // bytecode translation starts here
    // $t0 := vector::empty<vec_map::Entry<#0, #1>>() on_abort goto L2 with $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:28+15
    assume {:print "$at(82,1461,1476)"} true;
    call $t0 := $1_vector_empty'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''();
    if ($abort_flag) {
        assume {:print "$at(82,1461,1476)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(17,0):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_map::VecMap<#0, #1>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    $t2 := $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($t0);

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:41:9+36
    assume {:print "$track_return(17,0,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
L2:

    // abort($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:42:5+1
    assume {:print "$at(82,1483,1484)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_map::insert<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+206
procedure {:inline 1} $2_vec_map_insert'u64_$0_obc_dao_OBCDaoAction'(_$t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'), _$t1: int, _$t2: $0_obc_dao_OBCDaoAction) returns ($ret0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'));
    var $t10: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction';
    var $t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction');
    var $t1: int;
    var $t2: $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$at(82,1598,1599)"} true;
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'';

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$track_local(17,1,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$track_local(17,1,2):", $t2} $t2 == $t2;

    // $t4 := read_ref($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:26+12
    assume {:print "$at(82,1697,1709)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vec_map::contains<#0, #1>($t4, $t1) on_abort goto L4 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:18+20
    call $t5 := $2_vec_map_contains'u64_$0_obc_dao_OBCDaoAction'($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,1689,1709)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := !($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:17+1
    call $t7 := $Not($t5);

    // if ($t7) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
L0:

    // destroy($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;

    // $t8 := 0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:40+17
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;
    assume {:print "$track_abort(17,1):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    $t6 := $t8;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:32+4
    assume {:print "$at(82,1762,1766)"} true;
L2:

    // $t9 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:27+18
    assume {:print "$at(82,1757,1775)"} true;
    $t9 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($Dereference($t0)));

    // $t10 := pack vec_map::Entry<#0, #1>($t1, $t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:47+20
    $t10 := $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'($t1, $t2);

    // vector::push_back<vec_map::Entry<#0, #1>>($t9, $t10) on_abort goto L4 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    call $t9 := $1_vector_push_back'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(82,1739,1798)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t0).contents (vector<vec_map::Entry<#0, #1>>)]($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $t0 := $UpdateMutation($t0, $Update'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''_contents($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'';

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'';

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
L3:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
L4:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::insert<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+206
procedure {:inline 1} $2_vec_map_insert'u64_$0_obc_dao_ProposalInfo'(_$t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'), _$t1: int, _$t2: $0_obc_dao_ProposalInfo) returns ($ret0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'));
    var $t10: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo';
    var $t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo');
    var $t1: int;
    var $t2: $0_obc_dao_ProposalInfo;
    var $temp_0'$0_obc_dao_ProposalInfo': $0_obc_dao_ProposalInfo;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$at(82,1598,1599)"} true;
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$track_local(17,1,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:46:5+1
    assume {:print "$track_local(17,1,2):", $t2} $t2 == $t2;

    // $t4 := read_ref($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:26+12
    assume {:print "$at(82,1697,1709)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vec_map::contains<#0, #1>($t4, $t1) on_abort goto L4 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:18+20
    call $t5 := $2_vec_map_contains'u64_$0_obc_dao_ProposalInfo'($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,1689,1709)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := !($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:17+1
    call $t7 := $Not($t5);

    // if ($t7) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
L0:

    // destroy($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;

    // $t8 := 0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:40+17
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    assume {:print "$at(82,1680,1729)"} true;
    assume {:print "$track_abort(17,1):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    $t6 := $t8;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:47:9+49
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:32+4
    assume {:print "$at(82,1762,1766)"} true;
L2:

    // $t9 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:27+18
    assume {:print "$at(82,1757,1775)"} true;
    $t9 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($Dereference($t0)));

    // $t10 := pack vec_map::Entry<#0, #1>($t1, $t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:47+20
    $t10 := $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($t1, $t2);

    // vector::push_back<vec_map::Entry<#0, #1>>($t9, $t10) on_abort goto L4 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    call $t9 := $1_vector_push_back'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(82,1739,1798)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t0).contents (vector<vec_map::Entry<#0, #1>>)]($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $t0 := $UpdateMutation($t0, $Update'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''_contents($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:48:9+59
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,1,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
L3:

    // return () at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
L4:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:49:5+1
    assume {:print "$at(82,1803,1804)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::remove<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:52:5+213
procedure {:inline 1} $2_vec_map_remove'u64_$0_obc_dao_ProposalInfo'(_$t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'), _$t1: int) returns ($ret0: int, $ret1: $0_obc_dao_ProposalInfo, $ret2: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'));
    var $t8: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo';
    var $t9: int;
    var $t10: $0_obc_dao_ProposalInfo;
    var $t0: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo');
    var $t1: int;
    var $temp_0'$0_obc_dao_ProposalInfo': $0_obc_dao_ProposalInfo;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:52:5+1
    assume {:print "$at(82,1904,1905)"} true;
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,2,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:52:5+1
    assume {:print "$track_local(17,2,1):", $t1} $t1 == $t1;

    // $t4 := read_ref($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:53:26+11
    assume {:print "$at(82,2002,2013)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vec_map::get_idx<#0, #1>($t4, $t1) on_abort goto L2 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:53:19+18
    call $t5 := $2_vec_map_get_idx'u64_$0_obc_dao_ProposalInfo'($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,1995,2013)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[idx#1#0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:53:13+3
    assume {:print "$track_local(17,2,3):", $t5} $t5 == $t5;

    // $t7 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:54:51+18
    assume {:print "$at(82,2065,2083)"} true;
    $t7 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($Dereference($t0)));

    // $t8 := vector::remove<vec_map::Entry<#0, #1>>($t7, $t5) on_abort goto L2 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:54:36+39
    call $t8,$t7 := $1_vector_remove'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(82,2050,2089)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).contents (vector<vec_map::Entry<#0, #1>>)]($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:54:36+39
    $t0 := $UpdateMutation($t0, $Update'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''_contents($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:54:36+39
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,2,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // ($t9, $t10) := unpack vec_map::Entry<#0, #1>($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:54:13+20
    $t9 := $key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($t8);
    $t10 := $value#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($t8);

    // trace_return[0]($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:55:9+12
    assume {:print "$at(82,2099,2111)"} true;
    assume {:print "$track_return(17,2,0):", $t9} $t9 == $t9;

    // trace_return[1]($t10) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:55:9+12
    assume {:print "$track_return(17,2,1):", $t10} $t10 == $t10;

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:55:9+12
    $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' := $Dereference($t0);
    assume {:print "$track_local(17,2,0):", $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''} $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'' == $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'';

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:56:5+1
    assume {:print "$at(82,2116,2117)"} true;
L1:

    // return ($t9, $t10) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:56:5+1
    assume {:print "$at(82,2116,2117)"} true;
    $ret0 := $t9;
    $ret1 := $t10;
    $ret2 := $t0;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:56:5+1
L2:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:56:5+1
    assume {:print "$at(82,2116,2117)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::get<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:75:5+183
procedure {:inline 1} $2_vec_map_get'u64_$0_obc_dao_OBCDaoAction'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', _$t1: int) returns ($ret0: $0_obc_dao_OBCDaoAction)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    var $t6: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction';
    var $t7: $0_obc_dao_OBCDaoAction;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t1: int;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:75:5+1
    assume {:print "$at(82,2882,2883)"} true;
    assume {:print "$track_local(17,5,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:75:5+1
    assume {:print "$track_local(17,5,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx<#0, #1>($t0, $t1) on_abort goto L2 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:76:19+18
    assume {:print "$at(82,2962,2980)"} true;
    call $t3 := $2_vec_map_get_idx'u64_$0_obc_dao_OBCDaoAction'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,2962,2980)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,5):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[idx#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:76:13+3
    assume {:print "$track_local(17,5,2):", $t3} $t3 == $t3;

    // $t5 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:77:36+14
    assume {:print "$at(82,3017,3031)"} true;
    $t5 := $contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($t0);

    // $t6 := vector::borrow<vec_map::Entry<#0, #1>>($t5, $t3) on_abort goto L2 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:77:21+35
    call $t6 := $1_vector_borrow'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''($t5, $t3);
    if ($abort_flag) {
        assume {:print "$at(82,3002,3037)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,5):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := get_field<vec_map::Entry<#0, #1>>.value($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:78:9+12
    assume {:print "$at(82,3047,3059)"} true;
    $t7 := $value#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'($t6);

    // trace_return[0]($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:78:9+12
    assume {:print "$track_return(17,5,0):", $t7} $t7 == $t7;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:79:5+1
    assume {:print "$at(82,3064,3065)"} true;
L1:

    // return $t7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:79:5+1
    assume {:print "$at(82,3064,3065)"} true;
    $ret0 := $t7;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:79:5+1
L2:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:79:5+1
    assume {:print "$at(82,3064,3065)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+218
procedure {:inline 1} $2_vec_map_get_idx'u64_$0_obc_dao_OBCDaoAction'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+1
    assume {:print "$at(82,6235,6236)"} true;
    assume {:print "$track_local(17,14,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+1
    assume {:print "$track_local(17,14,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L4 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:165:23+22
    assume {:print "$at(82,6324,6346)"} true;
    call $t3 := $2_vec_map_get_idx_opt'u64_$0_obc_dao_OBCDaoAction'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,6324,6346)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,14):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[idx_opt#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:165:13+7
    assume {:print "$track_local(17,14,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume {:print "$at(82,6364,6389)"} true;

    // assume WellFormed($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25

    // if ($t5) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    assume {:print "$at(82,6356,6408)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:44+16
L0:

    // $t6 := 1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:44+16
    assume {:print "$at(82,6391,6407)"} true;
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    assume {:print "$at(82,6356,6408)"} true;
    assume {:print "$track_abort(17,14):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    $t4 := $t6;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:30+7
    assume {:print "$at(82,6439,6446)"} true;
L2:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L6 else goto L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
L6:

    // assume And(option::$is_none<u64>($t3), Eq(262145, $t4)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(262145, $t4));

    // trace_abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume {:print "$track_abort(17,14):", $t4} $t4 == $t4;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    goto L4;

    // label L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
L5:

    // assume WellFormed($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29

    // trace_return[0]($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$track_return(17,14,0):", $t7} $t7 == $t7;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
L3:

    // return $t7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
    $ret0 := $t7;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
L4:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+218
procedure {:inline 1} $2_vec_map_get_idx'u64_$0_obc_dao_ProposalInfo'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+1
    assume {:print "$at(82,6235,6236)"} true;
    assume {:print "$track_local(17,14,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:164:5+1
    assume {:print "$track_local(17,14,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L4 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:165:23+22
    assume {:print "$at(82,6324,6346)"} true;
    call $t3 := $2_vec_map_get_idx_opt'u64_$0_obc_dao_ProposalInfo'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(82,6324,6346)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,14):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[idx_opt#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:165:13+7
    assume {:print "$track_local(17,14,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume {:print "$at(82,6364,6389)"} true;

    // assume WellFormed($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:17+25

    // if ($t5) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    assume {:print "$at(82,6356,6408)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:44+16
L0:

    // $t6 := 1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:44+16
    assume {:print "$at(82,6391,6407)"} true;
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    assume {:print "$at(82,6356,6408)"} true;
    assume {:print "$track_abort(17,14):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    $t4 := $t6;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:166:9+52
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:30+7
    assume {:print "$at(82,6439,6446)"} true;
L2:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L6 else goto L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
L6:

    // assume And(option::$is_none<u64>($t3), Eq(262145, $t4)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(262145, $t4));

    // trace_abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume {:print "$track_abort(17,14):", $t4} $t4 == $t4;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    goto L4;

    // label L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
L5:

    // assume WellFormed($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$at(82,6418,6447)"} true;
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29

    // trace_return[0]($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:167:9+29
    assume {:print "$track_return(17,14,0):", $t7} $t7 == $t7;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
L3:

    // return $t7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
    $ret0 := $t7;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
L4:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:168:5+1
    assume {:print "$at(82,6452,6453)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx_opt<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+331
procedure {:inline 1} $2_vec_map_get_idx_opt'u64_$0_obc_dao_OBCDaoAction'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', _$t1: int) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    var $t9: $2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: int;
    var $t16: $1_option_Option'u64';
    var $t17: $1_option_Option'u64';
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+1
    assume {:print "$at(82,5739,5740)"} true;
    assume {:print "$track_local(17,13,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+1
    assume {:print "$track_local(17,13,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:151:17+1
    assume {:print "$at(82,5834,5835)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i#1#0]($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:151:13+1
    assume {:print "$track_local(17,13,2):", $t4} $t4 == $t4;

    // $t5 := vec_map::size<#0, #1>($t0) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:152:17+10
    assume {:print "$at(82,5853,5863)"} true;
    call $t5 := $2_vec_map_size'u64_$0_obc_dao_OBCDaoAction'($t0);
    if ($abort_flag) {
        assume {:print "$at(82,5853,5863)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // trace_local[n#1#0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:152:13+1
    assume {:print "$track_local(17,13,3):", $t5} $t5 == $t5;

    // label L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$at(82,5880,5881)"} true;
L5:

    // $t2 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$at(82,5880,5881)"} true;
    havoc $t2;

    // assume WellFormed($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t7;

    // assume WellFormed($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t8;

    // assume WellFormed($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'''($t8);

    // $t9 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t9;

    // assume WellFormed($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''($t9);

    // $t10 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t10;

    // assume WellFormed($t10) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t11;

    // assume WellFormed($t11) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t12;

    // assume WellFormed($t12) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t13;

    // assume WellFormed($t13) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t13);

    // trace_local[i#1#0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(17,13,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:18+1
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:9+167
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:9+167
L1:

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:34+4
    assume {:print "$at(82,5922,5926)"} true;
L2:

    // $t8 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:33+14
    assume {:print "$at(82,5921,5935)"} true;
    $t8 := $contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($t0);

    // $t9 := vector::borrow<vec_map::Entry<#0, #1>>($t8, $t2) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:18+33
    call $t9 := $1_vector_borrow'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''($t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(82,5906,5939)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // $t10 := get_field<vec_map::Entry<#0, #1>>.key($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:17+38
    $t10 := $key#$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction'($t9);

    // $t11 := ==($t10, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:56+2
    $t11 := $IsEqual'u64'($t10, $t1);

    // if ($t11) goto L4 else goto L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:13+105
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    assume {:print "$at(82,5970,5992)"} true;
L4:

    // $t14 := opaque begin: option::some<u64>($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume {:print "$at(82,5977,5992)"} true;

    // $t15 := copy($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    $t15 := $t2;

    // assume WellFormed($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume $IsValid'$1_option_Option'u64''($t14);

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t15)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t15));

    // $t14 := opaque end: option::some<u64>($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15

    // trace_return[0]($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    assume {:print "$track_return(17,13,0):", $t14} $t14 == $t14;

    // $t16 := move($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    $t16 := $t14;

    // goto L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    goto L7;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:17+1
    assume {:print "$at(82,6024,6025)"} true;
L3:

    // $t12 := 1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:21+1
    assume {:print "$at(82,6028,6029)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t2, $t12) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:19+1
    call $t13 := $AddU64($t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(82,6026,6027)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // trace_local[i#1#0]($t13) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:13+1
    assume {:print "$track_local(17,13,2):", $t13} $t13 == $t13;

    // goto L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:22+1
    goto L6;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;
L0:

    // $t17 := opaque begin: option::none<u64>() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;

    // assume WellFormed($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume $IsValid'$1_option_Option'u64''($t17);

    // assume Eq<option::Option<u64>>($t17, option::spec_none<u64>()) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume $IsEqual'$1_option_Option'u64''($t17, $1_option_spec_none'u64'());

    // $t17 := opaque end: option::none<u64>() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14

    // trace_return[0]($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$track_return(17,13,0):", $t17} $t17 == $t17;

    // $t16 := move($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    $t16 := $t17;

    // goto L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    goto L7;

    // label L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;
    assume false;
    return;

    // label L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
L7:

    // return $t16 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
    $ret0 := $t16;
    return;

    // label L8 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
L8:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx_opt<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+331
procedure {:inline 1} $2_vec_map_get_idx_opt'u64_$0_obc_dao_ProposalInfo'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', _$t1: int) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    var $t9: $2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: int;
    var $t16: $1_option_Option'u64';
    var $t17: $1_option_Option'u64';
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+1
    assume {:print "$at(82,5739,5740)"} true;
    assume {:print "$track_local(17,13,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:150:5+1
    assume {:print "$track_local(17,13,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:151:17+1
    assume {:print "$at(82,5834,5835)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i#1#0]($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:151:13+1
    assume {:print "$track_local(17,13,2):", $t4} $t4 == $t4;

    // $t5 := vec_map::size<#0, #1>($t0) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:152:17+10
    assume {:print "$at(82,5853,5863)"} true;
    call $t5 := $2_vec_map_size'u64_$0_obc_dao_ProposalInfo'($t0);
    if ($abort_flag) {
        assume {:print "$at(82,5853,5863)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // trace_local[n#1#0]($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:152:13+1
    assume {:print "$track_local(17,13,3):", $t5} $t5 == $t5;

    // label L5 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$at(82,5880,5881)"} true;
L5:

    // $t2 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$at(82,5880,5881)"} true;
    havoc $t2;

    // assume WellFormed($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t7;

    // assume WellFormed($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t8;

    // assume WellFormed($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'vec'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'''($t8);

    // $t9 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t9;

    // assume WellFormed($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''($t9);

    // $t10 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t10;

    // assume WellFormed($t10) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t11;

    // assume WellFormed($t11) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t12;

    // assume WellFormed($t12) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    havoc $t13;

    // assume WellFormed($t13) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume $IsValid'u64'($t13);

    // trace_local[i#1#0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume {:print "$info(): enter loop, variable(s) i#1#0 havocked and reassigned"} true;
    assume {:print "$track_local(17,13,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:18+1
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:9+167
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:153:9+167
L1:

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:34+4
    assume {:print "$at(82,5922,5926)"} true;
L2:

    // $t8 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:33+14
    assume {:print "$at(82,5921,5935)"} true;
    $t8 := $contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($t0);

    // $t9 := vector::borrow<vec_map::Entry<#0, #1>>($t8, $t2) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:18+33
    call $t9 := $1_vector_borrow'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''($t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(82,5906,5939)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // $t10 := get_field<vec_map::Entry<#0, #1>>.key($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:17+38
    $t10 := $key#$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo'($t9);

    // $t11 := ==($t10, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:56+2
    $t11 := $IsEqual'u64'($t10, $t1);

    // if ($t11) goto L4 else goto L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:154:13+105
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    assume {:print "$at(82,5970,5992)"} true;
L4:

    // $t14 := opaque begin: option::some<u64>($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume {:print "$at(82,5977,5992)"} true;

    // $t15 := copy($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    $t15 := $t2;

    // assume WellFormed($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume $IsValid'$1_option_Option'u64''($t14);

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t15)) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t15));

    // $t14 := opaque end: option::some<u64>($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:24+15

    // trace_return[0]($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    assume {:print "$track_return(17,13,0):", $t14} $t14 == $t14;

    // $t16 := move($t14) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    $t16 := $t14;

    // goto L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:155:17+22
    goto L7;

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:17+1
    assume {:print "$at(82,6024,6025)"} true;
L3:

    // $t12 := 1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:21+1
    assume {:print "$at(82,6028,6029)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t2, $t12) on_abort goto L8 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:19+1
    call $t13 := $AddU64($t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(82,6026,6027)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,13):", $t6} $t6 == $t6;
        goto L8;
    }

    // trace_local[i#1#0]($t13) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:13+1
    assume {:print "$track_local(17,13,2):", $t13} $t13 == $t13;

    // goto L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:157:22+1
    goto L6;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;
L0:

    // $t17 := opaque begin: option::none<u64>() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;

    // assume WellFormed($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume $IsValid'$1_option_Option'u64''($t17);

    // assume Eq<option::Option<u64>>($t17, option::spec_none<u64>()) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume $IsEqual'$1_option_Option'u64''($t17, $1_option_spec_none'u64'());

    // $t17 := opaque end: option::none<u64>() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14

    // trace_return[0]($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$track_return(17,13,0):", $t17} $t17 == $t17;

    // $t16 := move($t17) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    $t16 := $t17;

    // goto L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    goto L7;

    // label L6 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:159:9+14
    assume {:print "$at(82,6050,6064)"} true;
    assume false;
    return;

    // label L7 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
L7:

    // return $t16 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
    $ret0 := $t16;
    return;

    // label L8 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
L8:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:160:5+1
    assume {:print "$at(82,6069,6070)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::size<u64, obc_dao::OBCDaoAction> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:98:5+99
procedure {:inline 1} $2_vec_map_size'u64_$0_obc_dao_OBCDaoAction'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction');
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'': $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:98:5+1
    assume {:print "$at(82,3750,3751)"} true;
    assume {:print "$track_local(17,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:24+14
    assume {:print "$at(82,3828,3842)"} true;
    $t1 := $contents#$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'($t0);

    // $t2 := vector::length<vec_map::Entry<#0, #1>>($t1) on_abort goto L2 with $t3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:9+30
    call $t2 := $1_vector_length'$2_vec_map_Entry'u64_$0_obc_dao_OBCDaoAction''($t1);
    if ($abort_flag) {
        assume {:print "$at(82,3813,3843)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(17,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:9+30
    assume {:print "$track_return(17,8,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
L2:

    // abort($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vec_map::size<u64, obc_dao::ProposalInfo> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:98:5+99
procedure {:inline 1} $2_vec_map_size'u64_$0_obc_dao_ProposalInfo'(_$t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo');
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'': $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:98:5+1
    assume {:print "$at(82,3750,3751)"} true;
    assume {:print "$track_local(17,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:24+14
    assume {:print "$at(82,3828,3842)"} true;
    $t1 := $contents#$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'($t0);

    // $t2 := vector::length<vec_map::Entry<#0, #1>>($t1) on_abort goto L2 with $t3 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:9+30
    call $t2 := $1_vector_length'$2_vec_map_Entry'u64_$0_obc_dao_ProposalInfo''($t1);
    if ($abort_flag) {
        assume {:print "$at(82,3813,3843)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(17,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:99:9+30
    assume {:print "$track_return(17,8,0):", $t2} $t2 == $t2;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
L1:

    // return $t2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
L2:

    // abort($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/vec_map.move:100:5+1
    assume {:print "$at(82,3848,3849)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct balance::Balance<obc::OBC> at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:33:5+62
type {:datatype} $2_balance_Balance'$2_obc_OBC';
function {:constructor} $2_balance_Balance'$2_obc_OBC'($value: int): $2_balance_Balance'$2_obc_OBC';
function {:inline} $Update'$2_balance_Balance'$2_obc_OBC''_value(s: $2_balance_Balance'$2_obc_OBC', x: int): $2_balance_Balance'$2_obc_OBC' {
    $2_balance_Balance'$2_obc_OBC'(x)
}
function $IsValid'$2_balance_Balance'$2_obc_OBC''(s: $2_balance_Balance'$2_obc_OBC'): bool {
    $IsValid'u64'($value#$2_balance_Balance'$2_obc_OBC'(s))
}
function {:inline} $IsEqual'$2_balance_Balance'$2_obc_OBC''(s1: $2_balance_Balance'$2_obc_OBC', s2: $2_balance_Balance'$2_obc_OBC'): bool {
    s1 == s2
}

// fun balance::value<obc::OBC> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:38:5+70
procedure {:inline 1} $2_balance_value'$2_obc_OBC'(_$t0: $2_balance_Balance'$2_obc_OBC') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:38:5+1
    assume {:print "$at(34,1152,1153)"} true;
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:39:9+10
    assume {:print "$at(34,1206,1216)"} true;
    $t1 := $value#$2_balance_Balance'$2_obc_OBC'($t0);

    // trace_return[0]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:39:9+10
    assume {:print "$track_return(20,0,0):", $t1} $t1 == $t1;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:40:5+1
    assume {:print "$at(34,1221,1222)"} true;
L1:

    // return $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:40:5+1
    assume {:print "$at(34,1221,1222)"} true;
    $ret0 := $t1;
    return;

}

// fun balance::join<obc::OBC> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:78:5+176
procedure {:inline 1} $2_balance_join'$2_obc_OBC'(_$t0: $Mutation ($2_balance_Balance'$2_obc_OBC'), _$t1: $2_balance_Balance'$2_obc_OBC') returns ($ret0: int, $ret1: $Mutation ($2_balance_Balance'$2_obc_OBC'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: int;
    var $t0: $Mutation ($2_balance_Balance'$2_obc_OBC');
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:78:5+1
    assume {:print "$at(34,2318,2319)"} true;
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,6,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // trace_local[balance]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:78:5+1
    assume {:print "$track_local(20,6,1):", $t1} $t1 == $t1;

    // $t3 := unpack balance::Balance<#0>($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:79:13+17
    assume {:print "$at(34,2400,2417)"} true;
    $t3 := $value#$2_balance_Balance'$2_obc_OBC'($t1);

    // trace_local[value#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:79:23+5
    assume {:print "$track_local(20,6,2):", $t3} $t3 == $t3;

    // $t4 := get_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:22+10
    assume {:print "$at(34,2450,2460)"} true;
    $t4 := $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0));

    // $t5 := +($t4, $t3) on_abort goto L2 with $t6 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:33+1
    call $t5 := $AddU64($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(34,2461,2462)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:9+10
    $t7 := $ChildMutation($t0, 0, $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0)));

    // write_ref($t7, $t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:9+31
    $t7 := $UpdateMutation($t7, $t5);

    // write_back[Reference($t0).value (u64)]($t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'$2_obc_OBC''_value($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:80:9+31
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,6,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // $t8 := get_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:81:9+10
    assume {:print "$at(34,2478,2488)"} true;
    $t8 := $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0));

    // trace_return[0]($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:81:9+10
    assume {:print "$track_return(20,6,0):", $t8} $t8 == $t8;

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:81:9+10
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,6,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:82:5+1
    assume {:print "$at(34,2493,2494)"} true;
L1:

    // return $t8 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:82:5+1
    assume {:print "$at(34,2493,2494)"} true;
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:82:5+1
L2:

    // abort($t6) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:82:5+1
    assume {:print "$at(34,2493,2494)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun balance::split<obc::OBC> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:90:5+191
procedure {:inline 1} $2_balance_split'$2_obc_OBC'(_$t0: $Mutation ($2_balance_Balance'$2_obc_OBC'), _$t1: int) returns ($ret0: $2_balance_Balance'$2_obc_OBC', $ret1: $Mutation ($2_balance_Balance'$2_obc_OBC'))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: $2_balance_Balance'$2_obc_OBC';
    var $t0: $Mutation ($2_balance_Balance'$2_obc_OBC');
    var $t1: int;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:90:5+1
    assume {:print "$at(34,2682,2683)"} true;
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,7,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // trace_local[value]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:90:5+1
    assume {:print "$track_local(20,7,1):", $t1} $t1 == $t1;

    // $t2 := get_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:17+10
    assume {:print "$at(34,2767,2777)"} true;
    $t2 := $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0));

    // $t3 := >=($t2, $t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:28+2
    call $t3 := $Ge($t2, $t1);

    // if ($t3) goto L1 else goto L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
L1:

    // goto L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    assume {:print "$at(34,2759,2799)"} true;
    goto L2;

    // label L0 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
L0:

    // destroy($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    assume {:print "$at(34,2759,2799)"} true;

    // $t4 := 2 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:38+10
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    assume {:print "$at(34,2759,2799)"} true;
    assume {:print "$track_abort(20,7):", $t4} $t4 == $t4;

    // $t5 := move($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    $t5 := $t4;

    // goto L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:91:9+40
    goto L4;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:22+4
    assume {:print "$at(34,2822,2826)"} true;
L2:

    // $t6 := get_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:22+10
    assume {:print "$at(34,2822,2832)"} true;
    $t6 := $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0));

    // $t7 := -($t6, $t1) on_abort goto L4 with $t5 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:33+1
    call $t7 := $Sub($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,2833,2834)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(20,7):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t8 := borrow_field<balance::Balance<#0>>.value($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:9+10
    $t8 := $ChildMutation($t0, 0, $value#$2_balance_Balance'$2_obc_OBC'($Dereference($t0)));

    // write_ref($t8, $t7) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:9+31
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).value (u64)]($t8) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'$2_obc_OBC''_value($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:92:9+31
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,7,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // $t9 := pack balance::Balance<#0>($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:93:9+17
    assume {:print "$at(34,2850,2867)"} true;
    $t9 := $2_balance_Balance'$2_obc_OBC'($t1);

    // trace_return[0]($t9) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:93:9+17
    assume {:print "$track_return(20,7,0):", $t9} $t9 == $t9;

    // trace_local[self]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:93:9+17
    $temp_0'$2_balance_Balance'$2_obc_OBC'' := $Dereference($t0);
    assume {:print "$track_local(20,7,0):", $temp_0'$2_balance_Balance'$2_obc_OBC''} $temp_0'$2_balance_Balance'$2_obc_OBC'' == $temp_0'$2_balance_Balance'$2_obc_OBC'';

    // label L3 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:94:5+1
    assume {:print "$at(34,2872,2873)"} true;
L3:

    // return $t9 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:94:5+1
    assume {:print "$at(34,2872,2873)"} true;
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L4 at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:94:5+1
L4:

    // abort($t5) at ./../../../crates/sui-framework/packages/sui-framework/sources/balance.move:94:5+1
    assume {:print "$at(34,2872,2873)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct coin::Coin<obc::OBC> at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:26:5+90
type {:datatype} $2_coin_Coin'$2_obc_OBC';
function {:constructor} $2_coin_Coin'$2_obc_OBC'($id: $2_object_UID, $balance: $2_balance_Balance'$2_obc_OBC'): $2_coin_Coin'$2_obc_OBC';
function {:inline} $Update'$2_coin_Coin'$2_obc_OBC''_id(s: $2_coin_Coin'$2_obc_OBC', x: $2_object_UID): $2_coin_Coin'$2_obc_OBC' {
    $2_coin_Coin'$2_obc_OBC'(x, $balance#$2_coin_Coin'$2_obc_OBC'(s))
}
function {:inline} $Update'$2_coin_Coin'$2_obc_OBC''_balance(s: $2_coin_Coin'$2_obc_OBC', x: $2_balance_Balance'$2_obc_OBC'): $2_coin_Coin'$2_obc_OBC' {
    $2_coin_Coin'$2_obc_OBC'($id#$2_coin_Coin'$2_obc_OBC'(s), x)
}
function $IsValid'$2_coin_Coin'$2_obc_OBC''(s: $2_coin_Coin'$2_obc_OBC'): bool {
    $IsValid'$2_object_UID'($id#$2_coin_Coin'$2_obc_OBC'(s))
      && $IsValid'$2_balance_Balance'$2_obc_OBC''($balance#$2_coin_Coin'$2_obc_OBC'(s))
}
function {:inline} $IsEqual'$2_coin_Coin'$2_obc_OBC''(s1: $2_coin_Coin'$2_obc_OBC', s2: $2_coin_Coin'$2_obc_OBC'): bool {
    s1 == s2
}
var $2_coin_Coin'$2_obc_OBC'_$memory: $Memory $2_coin_Coin'$2_obc_OBC';

// fun coin::from_balance<obc::OBC> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:102:5+132
procedure {:inline 1} $2_coin_from_balance'$2_obc_OBC'(_$t0: $2_balance_Balance'$2_obc_OBC', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'$2_obc_OBC', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_coin_Coin'$2_obc_OBC';
    var $t0: $2_balance_Balance'$2_obc_OBC';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_coin_Coin'$2_obc_OBC'': $2_coin_Coin'$2_obc_OBC';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:102:5+1
    assume {:print "$at(38,3555,3556)"} true;
    assume {:print "$track_local(21,7,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:102:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(21,7,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:103:20+16
    assume {:print "$at(38,3654,3670)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(38,3654,3670)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack coin::Coin<#0>($t2, $t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:103:9+38
    $t4 := $2_coin_Coin'$2_obc_OBC'($t2, $t0);

    // trace_return[0]($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:103:9+38
    assume {:print "$track_return(21,7,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:103:9+38
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(21,7,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:104:5+1
    assume {:print "$at(38,3686,3687)"} true;
L1:

    // return $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:104:5+1
    assume {:print "$at(38,3686,3687)"} true;
    $ret0 := $t4;
    $ret1 := $t1;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:104:5+1
L2:

    // abort($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:104:5+1
    assume {:print "$at(38,3686,3687)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::into_balance<obc::OBC> [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:107:5+146
procedure {:inline 1} $2_coin_into_balance'$2_obc_OBC'(_$t0: $2_coin_Coin'$2_obc_OBC') returns ($ret0: $2_balance_Balance'$2_obc_OBC')
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: $2_object_UID;
    var $t3: $2_balance_Balance'$2_obc_OBC';
    var $t4: int;
    var $t0: $2_coin_Coin'$2_obc_OBC';
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_coin_Coin'$2_obc_OBC'': $2_coin_Coin'$2_obc_OBC';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:107:5+1
    assume {:print "$at(38,3747,3748)"} true;
    assume {:print "$track_local(21,8,0):", $t0} $t0 == $t0;

    // ($t2, $t3) := unpack coin::Coin<#0>($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:108:13+20
    assume {:print "$at(38,3815,3835)"} true;
    $t2 := $id#$2_coin_Coin'$2_obc_OBC'($t0);
    $t3 := $balance#$2_coin_Coin'$2_obc_OBC'($t0);

    // trace_local[balance#1#0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:108:24+7
    assume {:print "$track_local(21,8,1):", $t3} $t3 == $t3;

    // object::delete($t2) on_abort goto L2 with $t4 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:109:9+18
    assume {:print "$at(38,3852,3870)"} true;
    call $2_object_delete($t2);
    if ($abort_flag) {
        assume {:print "$at(38,3852,3870)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(21,8):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:110:9+7
    assume {:print "$at(38,3880,3887)"} true;
    assume {:print "$track_return(21,8,0):", $t3} $t3 == $t3;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:111:5+1
    assume {:print "$at(38,3892,3893)"} true;
L1:

    // return $t3 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:111:5+1
    assume {:print "$at(38,3892,3893)"} true;
    $ret0 := $t3;
    return;

    // label L2 at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:111:5+1
L2:

    // abort($t4) at ./../../../crates/sui-framework/packages/sui-framework/sources/coin.move:111:5+1
    assume {:print "$at(38,3892,3893)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct obc::OBC at ./../../../crates/sui-framework/packages/sui-framework/sources/obc.move:28:5+22
type {:datatype} $2_obc_OBC;
function {:constructor} $2_obc_OBC($dummy_field: bool): $2_obc_OBC;
function {:inline} $Update'$2_obc_OBC'_dummy_field(s: $2_obc_OBC, x: bool): $2_obc_OBC {
    $2_obc_OBC(x)
}
function $IsValid'$2_obc_OBC'(s: $2_obc_OBC): bool {
    $IsValid'bool'($dummy_field#$2_obc_OBC(s))
}
function {:inline} $IsEqual'$2_obc_OBC'(s1: $2_obc_OBC, s2: $2_obc_OBC): bool {
    s1 == s2
}

// struct clock::Clock at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:22:5+293
type {:datatype} $2_clock_Clock;
function {:constructor} $2_clock_Clock($id: $2_object_UID, $timestamp_ms: int): $2_clock_Clock;
function {:inline} $Update'$2_clock_Clock'_id(s: $2_clock_Clock, x: $2_object_UID): $2_clock_Clock {
    $2_clock_Clock(x, $timestamp_ms#$2_clock_Clock(s))
}
function {:inline} $Update'$2_clock_Clock'_timestamp_ms(s: $2_clock_Clock, x: int): $2_clock_Clock {
    $2_clock_Clock($id#$2_clock_Clock(s), x)
}
function $IsValid'$2_clock_Clock'(s: $2_clock_Clock): bool {
    $IsValid'$2_object_UID'($id#$2_clock_Clock(s))
      && $IsValid'u64'($timestamp_ms#$2_clock_Clock(s))
}
function {:inline} $IsEqual'$2_clock_Clock'(s1: $2_clock_Clock, s2: $2_clock_Clock): bool {
    s1 == s2
}
var $2_clock_Clock_$memory: $Memory $2_clock_Clock;

// fun clock::timestamp_ms [baseline] at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:33:5+78
procedure {:inline 1} $2_clock_timestamp_ms(_$t0: $2_clock_Clock) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_clock_Clock;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[clock]($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:33:5+1
    assume {:print "$at(37,1315,1316)"} true;
    assume {:print "$track_local(23,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<clock::Clock>.timestamp_ms($t0) at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:34:9+18
    assume {:print "$at(37,1369,1387)"} true;
    $t1 := $timestamp_ms#$2_clock_Clock($t0);

    // trace_return[0]($t1) at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:34:9+18
    assume {:print "$track_return(23,0,0):", $t1} $t1 == $t1;

    // label L1 at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:35:5+1
    assume {:print "$at(37,1392,1393)"} true;
L1:

    // return $t1 at ./../../../crates/sui-framework/packages/sui-framework/sources/clock.move:35:5+1
    assume {:print "$at(37,1392,1393)"} true;
    $ret0 := $t1;
    return;

}

// struct obc_dao_manager::OBCDaoManageKey at ./sources/obc_dao_manager.move:9:5+62
type {:datatype} $0_obc_dao_manager_OBCDaoManageKey;
function {:constructor} $0_obc_dao_manager_OBCDaoManageKey($id: $2_object_UID): $0_obc_dao_manager_OBCDaoManageKey;
function {:inline} $Update'$0_obc_dao_manager_OBCDaoManageKey'_id(s: $0_obc_dao_manager_OBCDaoManageKey, x: $2_object_UID): $0_obc_dao_manager_OBCDaoManageKey {
    $0_obc_dao_manager_OBCDaoManageKey(x)
}
function $IsValid'$0_obc_dao_manager_OBCDaoManageKey'(s: $0_obc_dao_manager_OBCDaoManageKey): bool {
    $IsValid'$2_object_UID'($id#$0_obc_dao_manager_OBCDaoManageKey(s))
}
function {:inline} $IsEqual'$0_obc_dao_manager_OBCDaoManageKey'(s1: $0_obc_dao_manager_OBCDaoManageKey, s2: $0_obc_dao_manager_OBCDaoManageKey): bool {
    s1 == s2
}
var $0_obc_dao_manager_OBCDaoManageKey_$memory: $Memory $0_obc_dao_manager_OBCDaoManageKey;

// fun obc_dao_manager::new [baseline] at ./sources/obc_dao_manager.move:15:5+192
procedure {:inline 1} $0_obc_dao_manager_new(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $0_obc_dao_manager_OBCDaoManageKey;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[sender]($t0) at ./sources/obc_dao_manager.move:15:5+1
    assume {:print "$at(6,314,315)"} true;
    assume {:print "$track_local(24,0,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao_manager.move:15:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(24,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:17:17+16
    assume {:print "$at(6,430,446)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(6,430,446)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack obc_dao_manager::OBCDaoManageKey($t2) at ./sources/obc_dao_manager.move:16:19+62
    assume {:print "$at(6,396,458)"} true;
    $t4 := $0_obc_dao_manager_OBCDaoManageKey($t2);

    // transfer::transfer<obc_dao_manager::OBCDaoManageKey>($t4, $t0) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:20:9+31
    assume {:print "$at(6,468,499)"} true;
    call $2_transfer_transfer'$0_obc_dao_manager_OBCDaoManageKey'($t4, $t0);
    if ($abort_flag) {
        assume {:print "$at(6,468,499)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/obc_dao_manager.move:20:40+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(24,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
L1:

    // return () at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/obc_dao_manager.move:21:5+1
L2:

    // abort($t3) at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao_manager::new [verification] at ./sources/obc_dao_manager.move:15:5+192
procedure {:timeLimit 40} $0_obc_dao_manager_new$verify(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $0_obc_dao_manager_OBCDaoManageKey;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_manager.move:15:5+1
    assume {:print "$at(6,314,315)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao_manager.move:15:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[sender]($t0) at ./sources/obc_dao_manager.move:15:5+1
    assume {:print "$track_local(24,0,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao_manager.move:15:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(24,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:17:17+16
    assume {:print "$at(6,430,446)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(6,430,446)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack obc_dao_manager::OBCDaoManageKey($t2) at ./sources/obc_dao_manager.move:16:19+62
    assume {:print "$at(6,396,458)"} true;
    $t4 := $0_obc_dao_manager_OBCDaoManageKey($t2);

    // transfer::transfer<obc_dao_manager::OBCDaoManageKey>($t4, $t0) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:20:9+31
    assume {:print "$at(6,468,499)"} true;
    call $2_transfer_transfer'$0_obc_dao_manager_OBCDaoManageKey'($t4, $t0);
    if ($abort_flag) {
        assume {:print "$at(6,468,499)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/obc_dao_manager.move:20:40+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(24,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
L1:

    // return () at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/obc_dao_manager.move:21:5+1
L2:

    // abort($t3) at ./sources/obc_dao_manager.move:21:5+1
    assume {:print "$at(6,505,506)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao_manager::getKeyAddress [baseline] at ./sources/obc_dao_manager.move:23:5+113
procedure {:inline 1} $0_obc_dao_manager_getKeyAddress(_$t0: $0_obc_dao_manager_OBCDaoManageKey) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: int;
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[key]($t0) at ./sources/obc_dao_manager.move:23:5+1
    assume {:print "$at(6,512,513)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<obc_dao_manager::OBCDaoManageKey>.id($t0) at ./sources/obc_dao_manager.move:24:32+7
    assume {:print "$at(6,611,618)"} true;
    $t1 := $id#$0_obc_dao_manager_OBCDaoManageKey($t0);

    // $t2 := object::uid_to_address($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:24:9+31
    call $t2 := $2_object_uid_to_address($t1);
    if ($abort_flag) {
        assume {:print "$at(6,588,619)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/obc_dao_manager.move:24:9+31
    assume {:print "$track_return(24,1,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
L1:

    // return $t2 at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/obc_dao_manager.move:25:5+1
L2:

    // abort($t3) at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao_manager::getKeyAddress [verification] at ./sources/obc_dao_manager.move:23:5+113
procedure {:timeLimit 40} $0_obc_dao_manager_getKeyAddress$verify(_$t0: $0_obc_dao_manager_OBCDaoManageKey) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: int;
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_manager.move:23:5+1
    assume {:print "$at(6,512,513)"} true;
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t0);

    // trace_local[key]($t0) at ./sources/obc_dao_manager.move:23:5+1
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<obc_dao_manager::OBCDaoManageKey>.id($t0) at ./sources/obc_dao_manager.move:24:32+7
    assume {:print "$at(6,611,618)"} true;
    $t1 := $id#$0_obc_dao_manager_OBCDaoManageKey($t0);

    // $t2 := object::uid_to_address($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_manager.move:24:9+31
    call $t2 := $2_object_uid_to_address($t1);
    if ($abort_flag) {
        assume {:print "$at(6,588,619)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/obc_dao_manager.move:24:9+31
    assume {:print "$track_return(24,1,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
L1:

    // return $t2 at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/obc_dao_manager.move:25:5+1
L2:

    // abort($t3) at ./sources/obc_dao_manager.move:25:5+1
    assume {:print "$at(6,624,625)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct voting_pool::PoolTokenExchangeRate at ./sources/obc_dao_voting_pool.move:40:5+115
type {:datatype} $0_voting_pool_PoolTokenExchangeRate;
function {:constructor} $0_voting_pool_PoolTokenExchangeRate($obc_amount: int, $pool_token_amount: int): $0_voting_pool_PoolTokenExchangeRate;
function {:inline} $Update'$0_voting_pool_PoolTokenExchangeRate'_obc_amount(s: $0_voting_pool_PoolTokenExchangeRate, x: int): $0_voting_pool_PoolTokenExchangeRate {
    $0_voting_pool_PoolTokenExchangeRate(x, $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate(s))
}
function {:inline} $Update'$0_voting_pool_PoolTokenExchangeRate'_pool_token_amount(s: $0_voting_pool_PoolTokenExchangeRate, x: int): $0_voting_pool_PoolTokenExchangeRate {
    $0_voting_pool_PoolTokenExchangeRate($obc_amount#$0_voting_pool_PoolTokenExchangeRate(s), x)
}
function $IsValid'$0_voting_pool_PoolTokenExchangeRate'(s: $0_voting_pool_PoolTokenExchangeRate): bool {
    $IsValid'u64'($obc_amount#$0_voting_pool_PoolTokenExchangeRate(s))
      && $IsValid'u64'($pool_token_amount#$0_voting_pool_PoolTokenExchangeRate(s))
}
function {:inline} $IsEqual'$0_voting_pool_PoolTokenExchangeRate'(s1: $0_voting_pool_PoolTokenExchangeRate, s2: $0_voting_pool_PoolTokenExchangeRate): bool {
    s1 == s2
}

// struct voting_pool::VotingObc at ./sources/obc_dao_voting_pool.move:46:5+201
type {:datatype} $0_voting_pool_VotingObc;
function {:constructor} $0_voting_pool_VotingObc($id: $2_object_UID, $pool_id: $2_object_ID, $principal: $2_balance_Balance'$2_obc_OBC'): $0_voting_pool_VotingObc;
function {:inline} $Update'$0_voting_pool_VotingObc'_id(s: $0_voting_pool_VotingObc, x: $2_object_UID): $0_voting_pool_VotingObc {
    $0_voting_pool_VotingObc(x, $pool_id#$0_voting_pool_VotingObc(s), $principal#$0_voting_pool_VotingObc(s))
}
function {:inline} $Update'$0_voting_pool_VotingObc'_pool_id(s: $0_voting_pool_VotingObc, x: $2_object_ID): $0_voting_pool_VotingObc {
    $0_voting_pool_VotingObc($id#$0_voting_pool_VotingObc(s), x, $principal#$0_voting_pool_VotingObc(s))
}
function {:inline} $Update'$0_voting_pool_VotingObc'_principal(s: $0_voting_pool_VotingObc, x: $2_balance_Balance'$2_obc_OBC'): $0_voting_pool_VotingObc {
    $0_voting_pool_VotingObc($id#$0_voting_pool_VotingObc(s), $pool_id#$0_voting_pool_VotingObc(s), x)
}
function $IsValid'$0_voting_pool_VotingObc'(s: $0_voting_pool_VotingObc): bool {
    $IsValid'$2_object_UID'($id#$0_voting_pool_VotingObc(s))
      && $IsValid'$2_object_ID'($pool_id#$0_voting_pool_VotingObc(s))
      && $IsValid'$2_balance_Balance'$2_obc_OBC''($principal#$0_voting_pool_VotingObc(s))
}
function {:inline} $IsEqual'$0_voting_pool_VotingObc'(s1: $0_voting_pool_VotingObc, s2: $0_voting_pool_VotingObc): bool {
    s1 == s2
}
var $0_voting_pool_VotingObc_$memory: $Memory $0_voting_pool_VotingObc;

// struct voting_pool::VotingPool at ./sources/obc_dao_voting_pool.move:30:5+234
type {:datatype} $0_voting_pool_VotingPool;
function {:constructor} $0_voting_pool_VotingPool($id: $2_object_UID, $obc_balance: int, $pool_token_balance: int): $0_voting_pool_VotingPool;
function {:inline} $Update'$0_voting_pool_VotingPool'_id(s: $0_voting_pool_VotingPool, x: $2_object_UID): $0_voting_pool_VotingPool {
    $0_voting_pool_VotingPool(x, $obc_balance#$0_voting_pool_VotingPool(s), $pool_token_balance#$0_voting_pool_VotingPool(s))
}
function {:inline} $Update'$0_voting_pool_VotingPool'_obc_balance(s: $0_voting_pool_VotingPool, x: int): $0_voting_pool_VotingPool {
    $0_voting_pool_VotingPool($id#$0_voting_pool_VotingPool(s), x, $pool_token_balance#$0_voting_pool_VotingPool(s))
}
function {:inline} $Update'$0_voting_pool_VotingPool'_pool_token_balance(s: $0_voting_pool_VotingPool, x: int): $0_voting_pool_VotingPool {
    $0_voting_pool_VotingPool($id#$0_voting_pool_VotingPool(s), $obc_balance#$0_voting_pool_VotingPool(s), x)
}
function $IsValid'$0_voting_pool_VotingPool'(s: $0_voting_pool_VotingPool): bool {
    $IsValid'$2_object_UID'($id#$0_voting_pool_VotingPool(s))
      && $IsValid'u64'($obc_balance#$0_voting_pool_VotingPool(s))
      && $IsValid'u64'($pool_token_balance#$0_voting_pool_VotingPool(s))
}
function {:inline} $IsEqual'$0_voting_pool_VotingPool'(s1: $0_voting_pool_VotingPool, s2: $0_voting_pool_VotingPool): bool {
    s1 == s2
}
var $0_voting_pool_VotingPool_$memory: $Memory $0_voting_pool_VotingPool;

// fun voting_pool::new [baseline] at ./sources/obc_dao_voting_pool.move:57:5+192
procedure {:inline 1} $0_voting_pool_new(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingPool, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $0_voting_pool_VotingPool;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/obc_dao_voting_pool.move:57:5+1
    assume {:print "$at(8,1822,1823)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := object::new($t0) on_abort goto L2 with $t2 at ./sources/obc_dao_voting_pool.move:59:17+16
    assume {:print "$at(8,1918,1934)"} true;
    call $t1,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(8,1918,1934)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 0 at ./sources/obc_dao_voting_pool.move:60:26+1
    assume {:print "$at(8,1961,1962)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := 0 at ./sources/obc_dao_voting_pool.move:61:33+1
    assume {:print "$at(8,1996,1997)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := pack voting_pool::VotingPool($t1, $t3, $t4) at ./sources/obc_dao_voting_pool.move:58:9+119
    assume {:print "$at(8,1889,2008)"} true;
    $t5 := $0_voting_pool_VotingPool($t1, $t3, $t4);

    // trace_return[0]($t5) at ./sources/obc_dao_voting_pool.move:58:9+119
    assume {:print "$track_return(25,0,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t0) at ./sources/obc_dao_voting_pool.move:58:9+119
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
L1:

    // return $t5 at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:63:5+1
L2:

    // abort($t2) at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun voting_pool::new [verification] at ./sources/obc_dao_voting_pool.move:57:5+192
procedure {:timeLimit 40} $0_voting_pool_new$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingPool, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $0_voting_pool_VotingPool;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:57:5+1
    assume {:print "$at(8,1822,1823)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/obc_dao_voting_pool.move:57:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := object::new($t0) on_abort goto L2 with $t2 at ./sources/obc_dao_voting_pool.move:59:17+16
    assume {:print "$at(8,1918,1934)"} true;
    call $t1,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(8,1918,1934)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(25,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 0 at ./sources/obc_dao_voting_pool.move:60:26+1
    assume {:print "$at(8,1961,1962)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := 0 at ./sources/obc_dao_voting_pool.move:61:33+1
    assume {:print "$at(8,1996,1997)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := pack voting_pool::VotingPool($t1, $t3, $t4) at ./sources/obc_dao_voting_pool.move:58:9+119
    assume {:print "$at(8,1889,2008)"} true;
    $t5 := $0_voting_pool_VotingPool($t1, $t3, $t4);

    // trace_return[0]($t5) at ./sources/obc_dao_voting_pool.move:58:9+119
    assume {:print "$track_return(25,0,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t0) at ./sources/obc_dao_voting_pool.move:58:9+119
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
L1:

    // return $t5 at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:63:5+1
L2:

    // abort($t2) at ./sources/obc_dao_voting_pool.move:63:5+1
    assume {:print "$at(8,2013,2014)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun voting_pool::split [baseline] at ./sources/obc_dao_voting_pool.move:145:5+720
procedure {:inline 1} $0_voting_pool_split(_$t0: $Mutation ($0_voting_pool_VotingObc), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingObc, $ret1: $Mutation ($0_voting_pool_VotingObc), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: $2_object_UID;
    var $t17: $2_object_ID;
    var $t18: $Mutation ($2_balance_Balance'$2_obc_OBC');
    var $t19: $2_balance_Balance'$2_obc_OBC';
    var $t20: $0_voting_pool_VotingObc;
    var $t0: $Mutation ($0_voting_pool_VotingObc);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume {:print "$at(8,4979,4980)"} true;
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[split_amount]($t1) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume {:print "$track_local(25,8,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:145:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,8,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := get_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:146:46+15
    assume {:print "$at(8,5116,5131)"} true;
    $t4 := $principal#$0_voting_pool_VotingObc($Dereference($t0));

    // $t5 := balance::value<obc::OBC>($t4) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:146:31+31
    call $t5 := $2_balance_value'$2_obc_OBC'($t4);
    if ($abort_flag) {
        assume {:print "$at(8,5101,5132)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_local[original_amount#1#0]($t5) at ./sources/obc_dao_voting_pool.move:146:13+15
    assume {:print "$track_local(25,8,3):", $t5} $t5 == $t5;

    // $t7 := <=($t1, $t5) at ./sources/obc_dao_voting_pool.move:147:30+2
    assume {:print "$at(8,5163,5165)"} true;
    call $t7 := $Le($t1, $t5);

    // if ($t7) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:147:9+70
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:147:9+70
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:147:9+70
L0:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:147:9+70

    // $t8 := 3 at ./sources/obc_dao_voting_pool.move:147:50+28
    $t8 := 3;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;
    assume {:print "$track_abort(25,8):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/obc_dao_voting_pool.move:147:9+70
    $t6 := $t8;

    // goto L10 at ./sources/obc_dao_voting_pool.move:147:9+70
    goto L10;

    // label L2 at ./sources/obc_dao_voting_pool.move:148:32+15
    assume {:print "$at(8,5245,5260)"} true;
L2:

    // $t9 := -($t5, $t1) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:148:48+1
    assume {:print "$at(8,5261,5262)"} true;
    call $t9 := $Sub($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5261,5262)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // $t10 := 1000000000 at ./sources/obc_dao_voting_pool.move:150:37+21
    assume {:print "$at(8,5389,5410)"} true;
    $t10 := 1000000000;
    assume $IsValid'u64'($t10);

    // $t11 := >=($t9, $t10) at ./sources/obc_dao_voting_pool.move:150:34+2
    call $t11 := $Ge($t9, $t10);

    // if ($t11) goto L4 else goto L3 at ./sources/obc_dao_voting_pool.move:150:9+76
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao_voting_pool.move:150:9+76
L4:

    // goto L5 at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao_voting_pool.move:150:9+76
L3:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:150:9+76

    // $t12 := 18 at ./sources/obc_dao_voting_pool.move:150:60+24
    $t12 := 18;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;
    assume {:print "$track_abort(25,8):", $t12} $t12 == $t12;

    // $t6 := move($t12) at ./sources/obc_dao_voting_pool.move:150:9+76
    $t6 := $t12;

    // goto L10 at ./sources/obc_dao_voting_pool.move:150:9+76
    goto L10;

    // label L5 at ./sources/obc_dao_voting_pool.move:151:17+12
    assume {:print "$at(8,5455,5467)"} true;
L5:

    // $t13 := 1000000000 at ./sources/obc_dao_voting_pool.move:151:33+21
    assume {:print "$at(8,5471,5492)"} true;
    $t13 := 1000000000;
    assume $IsValid'u64'($t13);

    // $t14 := >=($t1, $t13) at ./sources/obc_dao_voting_pool.move:151:30+2
    call $t14 := $Ge($t1, $t13);

    // if ($t14) goto L7 else goto L6 at ./sources/obc_dao_voting_pool.move:151:9+72
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao_voting_pool.move:151:9+72
L7:

    // goto L8 at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao_voting_pool.move:151:9+72
L6:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:151:9+72

    // $t15 := 18 at ./sources/obc_dao_voting_pool.move:151:56+24
    $t15 := 18;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;
    assume {:print "$track_abort(25,8):", $t15} $t15 == $t15;

    // $t6 := move($t15) at ./sources/obc_dao_voting_pool.move:151:9+72
    $t6 := $t15;

    // goto L10 at ./sources/obc_dao_voting_pool.move:151:9+72
    goto L10;

    // label L8 at ./sources/obc_dao_voting_pool.move:153:29+3
    assume {:print "$at(8,5569,5572)"} true;
L8:

    // $t16 := object::new($t2) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:153:17+16
    assume {:print "$at(8,5557,5573)"} true;
    call $t16,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,5557,5573)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // $t17 := get_field<voting_pool::VotingObc>.pool_id($t0) at ./sources/obc_dao_voting_pool.move:154:22+12
    assume {:print "$at(8,5596,5608)"} true;
    $t17 := $pool_id#$0_voting_pool_VotingObc($Dereference($t0));

    // $t18 := borrow_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:155:39+19
    assume {:print "$at(8,5648,5667)"} true;
    $t18 := $ChildMutation($t0, 2, $principal#$0_voting_pool_VotingObc($Dereference($t0)));

    // $t19 := balance::split<obc::OBC>($t18, $t1) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:155:24+49
    call $t19,$t18 := $2_balance_split'$2_obc_OBC'($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5633,5682)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // write_back[Reference($t0).principal (balance::Balance<obc::OBC>)]($t18) at ./sources/obc_dao_voting_pool.move:155:24+49
    $t0 := $UpdateMutation($t0, $Update'$0_voting_pool_VotingObc'_principal($Dereference($t0), $Dereference($t18)));

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:155:24+49
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // $t20 := pack voting_pool::VotingObc($t16, $t17, $t19) at ./sources/obc_dao_voting_pool.move:152:9+164
    assume {:print "$at(8,5529,5693)"} true;
    $t20 := $0_voting_pool_VotingObc($t16, $t17, $t19);

    // trace_return[0]($t20) at ./sources/obc_dao_voting_pool.move:152:9+164
    assume {:print "$track_return(25,8,0):", $t20} $t20 == $t20;

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:152:9+164
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:152:9+164
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,8,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L9 at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
L9:

    // return $t20 at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
    $ret0 := $t20;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L10 at ./sources/obc_dao_voting_pool.move:157:5+1
L10:

    // abort($t6) at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun voting_pool::split [verification] at ./sources/obc_dao_voting_pool.move:145:5+720
procedure {:timeLimit 40} $0_voting_pool_split$verify(_$t0: $Mutation ($0_voting_pool_VotingObc), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingObc, $ret1: $Mutation ($0_voting_pool_VotingObc), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: $2_object_UID;
    var $t17: $2_object_ID;
    var $t18: $Mutation ($2_balance_Balance'$2_obc_OBC');
    var $t19: $2_balance_Balance'$2_obc_OBC';
    var $t20: $0_voting_pool_VotingObc;
    var $t0: $Mutation ($0_voting_pool_VotingObc);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume {:print "$at(8,4979,4980)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:145:5+1
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[split_amount]($t1) at ./sources/obc_dao_voting_pool.move:145:5+1
    assume {:print "$track_local(25,8,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:145:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,8,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := get_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:146:46+15
    assume {:print "$at(8,5116,5131)"} true;
    $t4 := $principal#$0_voting_pool_VotingObc($Dereference($t0));

    // $t5 := balance::value<obc::OBC>($t4) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:146:31+31
    call $t5 := $2_balance_value'$2_obc_OBC'($t4);
    if ($abort_flag) {
        assume {:print "$at(8,5101,5132)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_local[original_amount#1#0]($t5) at ./sources/obc_dao_voting_pool.move:146:13+15
    assume {:print "$track_local(25,8,3):", $t5} $t5 == $t5;

    // $t7 := <=($t1, $t5) at ./sources/obc_dao_voting_pool.move:147:30+2
    assume {:print "$at(8,5163,5165)"} true;
    call $t7 := $Le($t1, $t5);

    // if ($t7) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:147:9+70
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:147:9+70
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:147:9+70
L0:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:147:9+70

    // $t8 := 3 at ./sources/obc_dao_voting_pool.move:147:50+28
    $t8 := 3;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/obc_dao_voting_pool.move:147:9+70
    assume {:print "$at(8,5142,5212)"} true;
    assume {:print "$track_abort(25,8):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/obc_dao_voting_pool.move:147:9+70
    $t6 := $t8;

    // goto L10 at ./sources/obc_dao_voting_pool.move:147:9+70
    goto L10;

    // label L2 at ./sources/obc_dao_voting_pool.move:148:32+15
    assume {:print "$at(8,5245,5260)"} true;
L2:

    // $t9 := -($t5, $t1) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:148:48+1
    assume {:print "$at(8,5261,5262)"} true;
    call $t9 := $Sub($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5261,5262)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // $t10 := 1000000000 at ./sources/obc_dao_voting_pool.move:150:37+21
    assume {:print "$at(8,5389,5410)"} true;
    $t10 := 1000000000;
    assume $IsValid'u64'($t10);

    // $t11 := >=($t9, $t10) at ./sources/obc_dao_voting_pool.move:150:34+2
    call $t11 := $Ge($t9, $t10);

    // if ($t11) goto L4 else goto L3 at ./sources/obc_dao_voting_pool.move:150:9+76
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao_voting_pool.move:150:9+76
L4:

    // goto L5 at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao_voting_pool.move:150:9+76
L3:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:150:9+76

    // $t12 := 18 at ./sources/obc_dao_voting_pool.move:150:60+24
    $t12 := 18;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/obc_dao_voting_pool.move:150:9+76
    assume {:print "$at(8,5361,5437)"} true;
    assume {:print "$track_abort(25,8):", $t12} $t12 == $t12;

    // $t6 := move($t12) at ./sources/obc_dao_voting_pool.move:150:9+76
    $t6 := $t12;

    // goto L10 at ./sources/obc_dao_voting_pool.move:150:9+76
    goto L10;

    // label L5 at ./sources/obc_dao_voting_pool.move:151:17+12
    assume {:print "$at(8,5455,5467)"} true;
L5:

    // $t13 := 1000000000 at ./sources/obc_dao_voting_pool.move:151:33+21
    assume {:print "$at(8,5471,5492)"} true;
    $t13 := 1000000000;
    assume $IsValid'u64'($t13);

    // $t14 := >=($t1, $t13) at ./sources/obc_dao_voting_pool.move:151:30+2
    call $t14 := $Ge($t1, $t13);

    // if ($t14) goto L7 else goto L6 at ./sources/obc_dao_voting_pool.move:151:9+72
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao_voting_pool.move:151:9+72
L7:

    // goto L8 at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao_voting_pool.move:151:9+72
L6:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:151:9+72

    // $t15 := 18 at ./sources/obc_dao_voting_pool.move:151:56+24
    $t15 := 18;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at ./sources/obc_dao_voting_pool.move:151:9+72
    assume {:print "$at(8,5447,5519)"} true;
    assume {:print "$track_abort(25,8):", $t15} $t15 == $t15;

    // $t6 := move($t15) at ./sources/obc_dao_voting_pool.move:151:9+72
    $t6 := $t15;

    // goto L10 at ./sources/obc_dao_voting_pool.move:151:9+72
    goto L10;

    // label L8 at ./sources/obc_dao_voting_pool.move:153:29+3
    assume {:print "$at(8,5569,5572)"} true;
L8:

    // $t16 := object::new($t2) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:153:17+16
    assume {:print "$at(8,5557,5573)"} true;
    call $t16,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,5557,5573)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // $t17 := get_field<voting_pool::VotingObc>.pool_id($t0) at ./sources/obc_dao_voting_pool.move:154:22+12
    assume {:print "$at(8,5596,5608)"} true;
    $t17 := $pool_id#$0_voting_pool_VotingObc($Dereference($t0));

    // $t18 := borrow_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:155:39+19
    assume {:print "$at(8,5648,5667)"} true;
    $t18 := $ChildMutation($t0, 2, $principal#$0_voting_pool_VotingObc($Dereference($t0)));

    // $t19 := balance::split<obc::OBC>($t18, $t1) on_abort goto L10 with $t6 at ./sources/obc_dao_voting_pool.move:155:24+49
    call $t19,$t18 := $2_balance_split'$2_obc_OBC'($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5633,5682)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,8):", $t6} $t6 == $t6;
        goto L10;
    }

    // write_back[Reference($t0).principal (balance::Balance<obc::OBC>)]($t18) at ./sources/obc_dao_voting_pool.move:155:24+49
    $t0 := $UpdateMutation($t0, $Update'$0_voting_pool_VotingObc'_principal($Dereference($t0), $Dereference($t18)));

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:155:24+49
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // $t20 := pack voting_pool::VotingObc($t16, $t17, $t19) at ./sources/obc_dao_voting_pool.move:152:9+164
    assume {:print "$at(8,5529,5693)"} true;
    $t20 := $0_voting_pool_VotingObc($t16, $t17, $t19);

    // trace_return[0]($t20) at ./sources/obc_dao_voting_pool.move:152:9+164
    assume {:print "$track_return(25,8,0):", $t20} $t20 == $t20;

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:152:9+164
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,8,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:152:9+164
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,8,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L9 at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
L9:

    // return $t20 at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
    $ret0 := $t20;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L10 at ./sources/obc_dao_voting_pool.move:157:5+1
L10:

    // abort($t6) at ./sources/obc_dao_voting_pool.move:157:5+1
    assume {:print "$at(8,5698,5699)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun voting_pool::get_token_amount [baseline] at ./sources/obc_dao_voting_pool.move:215:5+544
procedure {:inline 1} $0_voting_pool_get_token_amount(_$t0: $0_voting_pool_PoolTokenExchangeRate, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $t1: int;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[exchange_rate]($t0) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume {:print "$at(8,7743,7744)"} true;
    assume {:print "$track_local(25,15,0):", $t0} $t0 == $t0;

    // trace_local[obc_amount]($t1) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume {:print "$track_local(25,15,1):", $t1} $t1 == $t1;

    // $t3 := get_field<voting_pool::PoolTokenExchangeRate>.obc_amount($t0) at ./sources/obc_dao_voting_pool.move:218:13+24
    assume {:print "$at(8,8002,8026)"} true;
    $t3 := $obc_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t4 := 0 at ./sources/obc_dao_voting_pool.move:218:41+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t3, $t4) at ./sources/obc_dao_voting_pool.move:218:38+2
    $t5 := $IsEqual'u64'($t3, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:218:13+69
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:218:13+69
L1:

    // $t6 := true at ./sources/obc_dao_voting_pool.move:218:13+69
    assume {:print "$at(8,8002,8071)"} true;
    $t6 := true;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/obc_dao_voting_pool.move:218:13+69
    $t2 := $t6;

    // goto L2 at ./sources/obc_dao_voting_pool.move:218:13+69
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:218:46+13
L0:

    // $t7 := get_field<voting_pool::PoolTokenExchangeRate>.pool_token_amount($t0) at ./sources/obc_dao_voting_pool.move:218:46+31
    assume {:print "$at(8,8035,8066)"} true;
    $t7 := $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t8 := 0 at ./sources/obc_dao_voting_pool.move:218:81+1
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t2 := ==($t7, $t8) at ./sources/obc_dao_voting_pool.move:218:78+2
    $t2 := $IsEqual'u64'($t7, $t8);

    // label L2 at ./sources/obc_dao_voting_pool.move:218:13+69
L2:

    // if ($t2) goto L4 else goto L3 at ./sources/obc_dao_voting_pool.move:218:9+116
    assume {:print "$at(8,7998,8114)"} true;
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao_voting_pool.move:219:13+17
    assume {:print "$at(8,8087,8104)"} true;
L4:

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:219:13+17
    assume {:print "$at(8,8087,8104)"} true;
    assume {:print "$track_return(25,15,0):", $t1} $t1 == $t1;

    // $t9 := move($t1) at ./sources/obc_dao_voting_pool.move:219:13+17
    $t9 := $t1;

    // goto L5 at ./sources/obc_dao_voting_pool.move:219:13+17
    goto L5;

    // label L3 at ./sources/obc_dao_voting_pool.move:221:20+13
    assume {:print "$at(8,8135,8148)"} true;
L3:

    // $t10 := get_field<voting_pool::PoolTokenExchangeRate>.pool_token_amount($t0) at ./sources/obc_dao_voting_pool.move:221:20+31
    assume {:print "$at(8,8135,8166)"} true;
    $t10 := $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t11 := (u128)($t10) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:221:19+41
    call $t11 := $CastU128($t10);
    if ($abort_flag) {
        assume {:print "$at(8,8134,8175)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t13 := (u128)($t1) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:222:15+20
    assume {:print "$at(8,8190,8210)"} true;
    call $t13 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(8,8190,8210)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t14 := *($t11, $t13) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:222:13+1
    call $t14 := $MulU128($t11, $t13);
    if ($abort_flag) {
        assume {:print "$at(8,8188,8189)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t15 := get_field<voting_pool::PoolTokenExchangeRate>.obc_amount($t0) at ./sources/obc_dao_voting_pool.move:223:16+24
    assume {:print "$at(8,8226,8250)"} true;
    $t15 := $obc_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t16 := (u128)($t15) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:223:15+34
    call $t16 := $CastU128($t15);
    if ($abort_flag) {
        assume {:print "$at(8,8225,8259)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t17 := /($t14, $t16) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:223:13+1
    call $t17 := $Div($t14, $t16);
    if ($abort_flag) {
        assume {:print "$at(8,8223,8224)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t18 := (u64)($t17) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:224:9+12
    assume {:print "$at(8,8269,8281)"} true;
    call $t18 := $CastU64($t17);
    if ($abort_flag) {
        assume {:print "$at(8,8269,8281)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // trace_return[0]($t18) at ./sources/obc_dao_voting_pool.move:224:9+12
    assume {:print "$track_return(25,15,0):", $t18} $t18 == $t18;

    // $t9 := move($t18) at ./sources/obc_dao_voting_pool.move:224:9+12
    $t9 := $t18;

    // label L5 at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
L5:

    // return $t9 at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
    $ret0 := $t9;
    return;

    // label L6 at ./sources/obc_dao_voting_pool.move:225:5+1
L6:

    // abort($t12) at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun voting_pool::get_token_amount [verification] at ./sources/obc_dao_voting_pool.move:215:5+544
procedure {:timeLimit 40} $0_voting_pool_get_token_amount$verify(_$t0: $0_voting_pool_PoolTokenExchangeRate, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $t1: int;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume {:print "$at(8,7743,7744)"} true;
    assume $IsValid'$0_voting_pool_PoolTokenExchangeRate'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume $IsValid'u64'($t1);

    // trace_local[exchange_rate]($t0) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume {:print "$track_local(25,15,0):", $t0} $t0 == $t0;

    // trace_local[obc_amount]($t1) at ./sources/obc_dao_voting_pool.move:215:5+1
    assume {:print "$track_local(25,15,1):", $t1} $t1 == $t1;

    // $t3 := get_field<voting_pool::PoolTokenExchangeRate>.obc_amount($t0) at ./sources/obc_dao_voting_pool.move:218:13+24
    assume {:print "$at(8,8002,8026)"} true;
    $t3 := $obc_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t4 := 0 at ./sources/obc_dao_voting_pool.move:218:41+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t3, $t4) at ./sources/obc_dao_voting_pool.move:218:38+2
    $t5 := $IsEqual'u64'($t3, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:218:13+69
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:218:13+69
L1:

    // $t6 := true at ./sources/obc_dao_voting_pool.move:218:13+69
    assume {:print "$at(8,8002,8071)"} true;
    $t6 := true;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/obc_dao_voting_pool.move:218:13+69
    $t2 := $t6;

    // goto L2 at ./sources/obc_dao_voting_pool.move:218:13+69
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:218:46+13
L0:

    // $t7 := get_field<voting_pool::PoolTokenExchangeRate>.pool_token_amount($t0) at ./sources/obc_dao_voting_pool.move:218:46+31
    assume {:print "$at(8,8035,8066)"} true;
    $t7 := $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t8 := 0 at ./sources/obc_dao_voting_pool.move:218:81+1
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t2 := ==($t7, $t8) at ./sources/obc_dao_voting_pool.move:218:78+2
    $t2 := $IsEqual'u64'($t7, $t8);

    // label L2 at ./sources/obc_dao_voting_pool.move:218:13+69
L2:

    // if ($t2) goto L4 else goto L3 at ./sources/obc_dao_voting_pool.move:218:9+116
    assume {:print "$at(8,7998,8114)"} true;
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao_voting_pool.move:219:13+17
    assume {:print "$at(8,8087,8104)"} true;
L4:

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:219:13+17
    assume {:print "$at(8,8087,8104)"} true;
    assume {:print "$track_return(25,15,0):", $t1} $t1 == $t1;

    // $t9 := move($t1) at ./sources/obc_dao_voting_pool.move:219:13+17
    $t9 := $t1;

    // goto L5 at ./sources/obc_dao_voting_pool.move:219:13+17
    goto L5;

    // label L3 at ./sources/obc_dao_voting_pool.move:221:20+13
    assume {:print "$at(8,8135,8148)"} true;
L3:

    // $t10 := get_field<voting_pool::PoolTokenExchangeRate>.pool_token_amount($t0) at ./sources/obc_dao_voting_pool.move:221:20+31
    assume {:print "$at(8,8135,8166)"} true;
    $t10 := $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t11 := (u128)($t10) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:221:19+41
    call $t11 := $CastU128($t10);
    if ($abort_flag) {
        assume {:print "$at(8,8134,8175)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t13 := (u128)($t1) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:222:15+20
    assume {:print "$at(8,8190,8210)"} true;
    call $t13 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(8,8190,8210)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t14 := *($t11, $t13) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:222:13+1
    call $t14 := $MulU128($t11, $t13);
    if ($abort_flag) {
        assume {:print "$at(8,8188,8189)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t15 := get_field<voting_pool::PoolTokenExchangeRate>.obc_amount($t0) at ./sources/obc_dao_voting_pool.move:223:16+24
    assume {:print "$at(8,8226,8250)"} true;
    $t15 := $obc_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // $t16 := (u128)($t15) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:223:15+34
    call $t16 := $CastU128($t15);
    if ($abort_flag) {
        assume {:print "$at(8,8225,8259)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t17 := /($t14, $t16) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:223:13+1
    call $t17 := $Div($t14, $t16);
    if ($abort_flag) {
        assume {:print "$at(8,8223,8224)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // $t18 := (u64)($t17) on_abort goto L6 with $t12 at ./sources/obc_dao_voting_pool.move:224:9+12
    assume {:print "$at(8,8269,8281)"} true;
    call $t18 := $CastU64($t17);
    if ($abort_flag) {
        assume {:print "$at(8,8269,8281)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(25,15):", $t12} $t12 == $t12;
        goto L6;
    }

    // trace_return[0]($t18) at ./sources/obc_dao_voting_pool.move:224:9+12
    assume {:print "$track_return(25,15,0):", $t18} $t18 == $t18;

    // $t9 := move($t18) at ./sources/obc_dao_voting_pool.move:224:9+12
    $t9 := $t18;

    // label L5 at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
L5:

    // return $t9 at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
    $ret0 := $t9;
    return;

    // label L6 at ./sources/obc_dao_voting_pool.move:225:5+1
L6:

    // abort($t12) at ./sources/obc_dao_voting_pool.move:225:5+1
    assume {:print "$at(8,8286,8287)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun voting_pool::obc_amount [verification] at ./sources/obc_dao_voting_pool.move:192:5+106
procedure {:timeLimit 40} $0_voting_pool_obc_amount$verify(_$t0: $0_voting_pool_PoolTokenExchangeRate) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:192:5+1
    assume {:print "$at(8,6940,6941)"} true;
    assume $IsValid'$0_voting_pool_PoolTokenExchangeRate'($t0);

    // trace_local[exchange_rate]($t0) at ./sources/obc_dao_voting_pool.move:192:5+1
    assume {:print "$track_local(25,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::PoolTokenExchangeRate>.obc_amount($t0) at ./sources/obc_dao_voting_pool.move:193:9+24
    assume {:print "$at(8,7016,7040)"} true;
    $t1 := $obc_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:193:9+24
    assume {:print "$track_return(25,13,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/obc_dao_voting_pool.move:194:5+1
    assume {:print "$at(8,7045,7046)"} true;
L1:

    // return $t1 at ./sources/obc_dao_voting_pool.move:194:5+1
    assume {:print "$at(8,7045,7046)"} true;
    $ret0 := $t1;
    return;

}

// fun voting_pool::initial_exchange_rate [baseline] at ./sources/obc_dao_voting_pool.move:227:5+128
procedure {:inline 1} $0_voting_pool_initial_exchange_rate() returns ($ret0: $0_voting_pool_PoolTokenExchangeRate)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;

    // bytecode translation starts here
    // $t0 := 0 at ./sources/obc_dao_voting_pool.move:228:45+1
    assume {:print "$at(8,8390,8391)"} true;
    $t0 := 0;
    assume $IsValid'u64'($t0);

    // $t1 := 0 at ./sources/obc_dao_voting_pool.move:228:67+1
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack voting_pool::PoolTokenExchangeRate($t0, $t1) at ./sources/obc_dao_voting_pool.move:228:9+61
    $t2 := $0_voting_pool_PoolTokenExchangeRate($t0, $t1);

    // trace_return[0]($t2) at ./sources/obc_dao_voting_pool.move:228:9+61
    assume {:print "$track_return(25,16,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_voting_pool.move:229:5+1
    assume {:print "$at(8,8420,8421)"} true;
L1:

    // return $t2 at ./sources/obc_dao_voting_pool.move:229:5+1
    assume {:print "$at(8,8420,8421)"} true;
    $ret0 := $t2;
    return;

}

// fun voting_pool::initial_exchange_rate [verification] at ./sources/obc_dao_voting_pool.move:227:5+128
procedure {:timeLimit 40} $0_voting_pool_initial_exchange_rate$verify() returns ($ret0: $0_voting_pool_PoolTokenExchangeRate)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := 0 at ./sources/obc_dao_voting_pool.move:228:45+1
    assume {:print "$at(8,8390,8391)"} true;
    $t0 := 0;
    assume $IsValid'u64'($t0);

    // $t1 := 0 at ./sources/obc_dao_voting_pool.move:228:67+1
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack voting_pool::PoolTokenExchangeRate($t0, $t1) at ./sources/obc_dao_voting_pool.move:228:9+61
    $t2 := $0_voting_pool_PoolTokenExchangeRate($t0, $t1);

    // trace_return[0]($t2) at ./sources/obc_dao_voting_pool.move:228:9+61
    assume {:print "$track_return(25,16,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_voting_pool.move:229:5+1
    assume {:print "$at(8,8420,8421)"} true;
L1:

    // return $t2 at ./sources/obc_dao_voting_pool.move:229:5+1
    assume {:print "$at(8,8420,8421)"} true;
    $ret0 := $t2;
    return;

}

// fun voting_pool::is_equal_staking_metadata [baseline] at ./sources/obc_dao_voting_pool.move:180:5+127
procedure {:inline 1} $0_voting_pool_is_equal_staking_metadata(_$t0: $0_voting_pool_VotingObc, _$t1: $0_voting_pool_VotingObc) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $2_object_ID;
    var $t3: $2_object_ID;
    var $t4: bool;
    var $t0: $0_voting_pool_VotingObc;
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume {:print "$at(8,6688,6689)"} true;
    assume {:print "$track_local(25,11,0):", $t0} $t0 == $t0;

    // trace_local[other]($t1) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume {:print "$track_local(25,11,1):", $t1} $t1 == $t1;

    // $t2 := get_field<voting_pool::VotingObc>.pool_id($t0) at ./sources/obc_dao_voting_pool.move:181:10+12
    assume {:print "$at(8,6779,6791)"} true;
    $t2 := $pool_id#$0_voting_pool_VotingObc($t0);

    // $t3 := get_field<voting_pool::VotingObc>.pool_id($t1) at ./sources/obc_dao_voting_pool.move:181:26+13
    $t3 := $pool_id#$0_voting_pool_VotingObc($t1);

    // $t4 := ==($t2, $t3) at ./sources/obc_dao_voting_pool.move:181:23+2
    $t4 := $IsEqual'$2_object_ID'($t2, $t3);

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:181:9+31
    assume {:print "$track_return(25,11,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao_voting_pool.move:182:5+1
    assume {:print "$at(8,6814,6815)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:182:5+1
    assume {:print "$at(8,6814,6815)"} true;
    $ret0 := $t4;
    return;

}

// fun voting_pool::is_equal_staking_metadata [verification] at ./sources/obc_dao_voting_pool.move:180:5+127
procedure {:timeLimit 40} $0_voting_pool_is_equal_staking_metadata$verify(_$t0: $0_voting_pool_VotingObc, _$t1: $0_voting_pool_VotingObc) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $2_object_ID;
    var $t3: $2_object_ID;
    var $t4: bool;
    var $t0: $0_voting_pool_VotingObc;
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume {:print "$at(8,6688,6689)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume {:print "$track_local(25,11,0):", $t0} $t0 == $t0;

    // trace_local[other]($t1) at ./sources/obc_dao_voting_pool.move:180:5+1
    assume {:print "$track_local(25,11,1):", $t1} $t1 == $t1;

    // $t2 := get_field<voting_pool::VotingObc>.pool_id($t0) at ./sources/obc_dao_voting_pool.move:181:10+12
    assume {:print "$at(8,6779,6791)"} true;
    $t2 := $pool_id#$0_voting_pool_VotingObc($t0);

    // $t3 := get_field<voting_pool::VotingObc>.pool_id($t1) at ./sources/obc_dao_voting_pool.move:181:26+13
    $t3 := $pool_id#$0_voting_pool_VotingObc($t1);

    // $t4 := ==($t2, $t3) at ./sources/obc_dao_voting_pool.move:181:23+2
    $t4 := $IsEqual'$2_object_ID'($t2, $t3);

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:181:9+31
    assume {:print "$track_return(25,11,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao_voting_pool.move:182:5+1
    assume {:print "$at(8,6814,6815)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:182:5+1
    assume {:print "$at(8,6814,6815)"} true;
    $ret0 := $t4;
    return;

}

// fun voting_pool::join_voting_obc [verification] at ./sources/obc_dao_voting_pool.move:167:5+352
procedure {:timeLimit 40} $0_voting_pool_join_voting_obc$verify(_$t0: $Mutation ($0_voting_pool_VotingObc), _$t1: $0_voting_pool_VotingObc) returns ($ret0: $Mutation ($0_voting_pool_VotingObc))
{
    // declare local variables
    var $t2: $0_voting_pool_VotingObc;
    var $t3: $2_balance_Balance'$2_obc_OBC';
    var $t4: $0_voting_pool_VotingObc;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $2_object_UID;
    var $t9: $2_object_ID;
    var $t10: $2_balance_Balance'$2_obc_OBC';
    var $t11: $Mutation ($2_balance_Balance'$2_obc_OBC');
    var $t12: int;
    var $t0: $Mutation ($0_voting_pool_VotingObc);
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:167:5+1
    assume {:print "$at(8,6226,6227)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:167:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:167:5+1
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,10,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[other]($t1) at ./sources/obc_dao_voting_pool.move:167:5+1
    assume {:print "$track_local(25,10,1):", $t1} $t1 == $t1;

    // $t4 := read_ref($t0) at ./sources/obc_dao_voting_pool.move:168:42+14
    assume {:print "$at(8,6342,6356)"} true;
    $t4 := $Dereference($t0);

    // $t5 := voting_pool::is_equal_staking_metadata($t4, $t1) on_abort goto L4 with $t6 at ./sources/obc_dao_voting_pool.move:168:17+39
    call $t5 := $0_voting_pool_is_equal_staking_metadata($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,6317,6356)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,10):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:168:9+72
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:168:9+72
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:168:9+72
    assume {:print "$at(8,6309,6381)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:168:9+72
L0:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:168:9+72
    assume {:print "$at(8,6309,6381)"} true;

    // $t7 := 12 at ./sources/obc_dao_voting_pool.move:168:58+22
    $t7 := 12;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/obc_dao_voting_pool.move:168:9+72
    assume {:print "$at(8,6309,6381)"} true;
    assume {:print "$track_abort(25,10):", $t7} $t7 == $t7;

    // $t6 := move($t7) at ./sources/obc_dao_voting_pool.move:168:9+72
    $t6 := $t7;

    // goto L4 at ./sources/obc_dao_voting_pool.move:168:9+72
    goto L4;

    // label L2 at ./sources/obc_dao_voting_pool.move:173:13+5
    assume {:print "$at(8,6482,6487)"} true;
L2:

    // ($t8, $t9, $t10) := unpack voting_pool::VotingObc($t1) at ./sources/obc_dao_voting_pool.move:169:13+84
    assume {:print "$at(8,6395,6479)"} true;
    $t8 := $id#$0_voting_pool_VotingObc($t1);
    $t9 := $pool_id#$0_voting_pool_VotingObc($t1);
    $t10 := $principal#$0_voting_pool_VotingObc($t1);

    // trace_local[principal#1#0]($t10) at ./sources/obc_dao_voting_pool.move:172:13+9
    assume {:print "$at(8,6459,6468)"} true;
    assume {:print "$track_local(25,10,3):", $t10} $t10 == $t10;

    // destroy($t9) at ./sources/obc_dao_voting_pool.move:171:22+1
    assume {:print "$at(8,6444,6445)"} true;

    // object::delete($t8) on_abort goto L4 with $t6 at ./sources/obc_dao_voting_pool.move:175:9+18
    assume {:print "$at(8,6498,6516)"} true;
    call $2_object_delete($t8);
    if ($abort_flag) {
        assume {:print "$at(8,6498,6516)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,10):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t11 := borrow_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:176:23+19
    assume {:print "$at(8,6540,6559)"} true;
    $t11 := $ChildMutation($t0, 2, $principal#$0_voting_pool_VotingObc($Dereference($t0)));

    // $t12 := balance::join<obc::OBC>($t11, $t10) on_abort goto L4 with $t6 at ./sources/obc_dao_voting_pool.move:176:9+45
    call $t12,$t11 := $2_balance_join'$2_obc_OBC'($t11, $t10);
    if ($abort_flag) {
        assume {:print "$at(8,6526,6571)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,10):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t0).principal (balance::Balance<obc::OBC>)]($t11) at ./sources/obc_dao_voting_pool.move:176:9+45
    $t0 := $UpdateMutation($t0, $Update'$0_voting_pool_VotingObc'_principal($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:176:9+45
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,10,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // destroy($t12) at ./sources/obc_dao_voting_pool.move:176:9+45

    // trace_local[self]($t0) at ./sources/obc_dao_voting_pool.move:176:54+1
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,10,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // label L3 at ./sources/obc_dao_voting_pool.move:177:5+1
    assume {:print "$at(8,6577,6578)"} true;
L3:

    // return () at ./sources/obc_dao_voting_pool.move:177:5+1
    assume {:print "$at(8,6577,6578)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./sources/obc_dao_voting_pool.move:177:5+1
L4:

    // abort($t6) at ./sources/obc_dao_voting_pool.move:177:5+1
    assume {:print "$at(8,6577,6578)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun voting_pool::obc_balance [verification] at ./sources/obc_dao_voting_pool.move:133:5+67
procedure {:timeLimit 40} $0_voting_pool_obc_balance$verify(_$t0: $0_voting_pool_VotingPool) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $0_voting_pool_VotingPool;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:133:5+1
    assume {:print "$at(8,4494,4495)"} true;
    assume $IsValid'$0_voting_pool_VotingPool'($t0);

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:133:5+1
    assume {:print "$track_local(25,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::VotingPool>.obc_balance($t0) at ./sources/obc_dao_voting_pool.move:133:54+16
    $t1 := $obc_balance#$0_voting_pool_VotingPool($t0);

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:133:54+16
    assume {:print "$track_return(25,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/obc_dao_voting_pool.move:133:71+1
L1:

    // return $t1 at ./sources/obc_dao_voting_pool.move:133:71+1
    assume {:print "$at(8,4560,4561)"} true;
    $ret0 := $t1;
    return;

}

// fun voting_pool::pool_id [verification] at ./sources/obc_dao_voting_pool.move:135:5+69
procedure {:timeLimit 40} $0_voting_pool_pool_id$verify(_$t0: $0_voting_pool_VotingObc) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:135:5+1
    assume {:print "$at(8,4567,4568)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($t0);

    // trace_local[voting_obc]($t0) at ./sources/obc_dao_voting_pool.move:135:5+1
    assume {:print "$track_local(25,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::VotingObc>.pool_id($t0) at ./sources/obc_dao_voting_pool.move:135:54+18
    $t1 := $pool_id#$0_voting_pool_VotingObc($t0);

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:135:54+18
    assume {:print "$track_return(25,6,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/obc_dao_voting_pool.move:135:73+1
L1:

    // return $t1 at ./sources/obc_dao_voting_pool.move:135:73+1
    assume {:print "$at(8,4635,4636)"} true;
    $ret0 := $t1;
    return;

}

// fun voting_pool::pool_token_amount [verification] at ./sources/obc_dao_voting_pool.move:196:5+120
procedure {:timeLimit 40} $0_voting_pool_pool_token_amount$verify(_$t0: $0_voting_pool_PoolTokenExchangeRate) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:196:5+1
    assume {:print "$at(8,7052,7053)"} true;
    assume $IsValid'$0_voting_pool_PoolTokenExchangeRate'($t0);

    // trace_local[exchange_rate]($t0) at ./sources/obc_dao_voting_pool.move:196:5+1
    assume {:print "$track_local(25,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::PoolTokenExchangeRate>.pool_token_amount($t0) at ./sources/obc_dao_voting_pool.move:197:9+31
    assume {:print "$at(8,7135,7166)"} true;
    $t1 := $pool_token_amount#$0_voting_pool_PoolTokenExchangeRate($t0);

    // trace_return[0]($t1) at ./sources/obc_dao_voting_pool.move:197:9+31
    assume {:print "$track_return(25,14,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/obc_dao_voting_pool.move:198:5+1
    assume {:print "$at(8,7171,7172)"} true;
L1:

    // return $t1 at ./sources/obc_dao_voting_pool.move:198:5+1
    assume {:print "$at(8,7171,7172)"} true;
    $ret0 := $t1;
    return;

}

// fun voting_pool::pool_token_exchange_rate_at_epoch [baseline] at ./sources/obc_dao_voting_pool.move:185:5+109
procedure {:inline 1} $0_voting_pool_pool_token_exchange_rate_at_epoch() returns ($ret0: $0_voting_pool_PoolTokenExchangeRate)
{
    // declare local variables
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $t1: int;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;

    // bytecode translation starts here
    // $t0 := voting_pool::initial_exchange_rate() on_abort goto L2 with $t1 at ./sources/obc_dao_voting_pool.move:186:9+23
    assume {:print "$at(8,6902,6925)"} true;
    call $t0 := $0_voting_pool_initial_exchange_rate();
    if ($abort_flag) {
        assume {:print "$at(8,6902,6925)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(25,12):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t0) at ./sources/obc_dao_voting_pool.move:186:9+23
    assume {:print "$track_return(25,12,0):", $t0} $t0 == $t0;

    // label L1 at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
L1:

    // return $t0 at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
    $ret0 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:187:5+1
L2:

    // abort($t1) at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun voting_pool::pool_token_exchange_rate_at_epoch [verification] at ./sources/obc_dao_voting_pool.move:185:5+109
procedure {:timeLimit 40} $0_voting_pool_pool_token_exchange_rate_at_epoch$verify() returns ($ret0: $0_voting_pool_PoolTokenExchangeRate)
{
    // declare local variables
    var $t0: $0_voting_pool_PoolTokenExchangeRate;
    var $t1: int;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := voting_pool::initial_exchange_rate() on_abort goto L2 with $t1 at ./sources/obc_dao_voting_pool.move:186:9+23
    assume {:print "$at(8,6902,6925)"} true;
    call $t0 := $0_voting_pool_initial_exchange_rate();
    if ($abort_flag) {
        assume {:print "$at(8,6902,6925)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(25,12):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t0) at ./sources/obc_dao_voting_pool.move:186:9+23
    assume {:print "$track_return(25,12,0):", $t0} $t0 == $t0;

    // label L1 at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
L1:

    // return $t0 at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
    $ret0 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:187:5+1
L2:

    // abort($t1) at ./sources/obc_dao_voting_pool.move:187:5+1
    assume {:print "$at(8,6930,6931)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun voting_pool::request_add_voting [baseline] at ./sources/obc_dao_voting_pool.move:68:5+427
procedure {:inline 1} $0_voting_pool_request_add_voting(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $2_balance_Balance'$2_obc_OBC', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingObc, $ret1: $Mutation ($0_voting_pool_VotingPool), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $2_object_UID;
    var $t9: $0_voting_pool_VotingPool;
    var $t10: $2_object_ID;
    var $t11: $0_voting_pool_VotingObc;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume {:print "$at(8,2162,2163)"} true;
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting]($t1) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume {:print "$track_local(25,1,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:68:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := balance::value<obc::OBC>($t1) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:73:26+23
    assume {:print "$at(8,2335,2358)"} true;
    call $t3 := $2_balance_value'$2_obc_OBC'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2335,2358)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := 0 at ./sources/obc_dao_voting_pool.move:74:30+1
    assume {:print "$at(8,2389,2390)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t3, $t5) at ./sources/obc_dao_voting_pool.move:74:28+1
    call $t6 := $Gt($t3, $t5);

    // if ($t6) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:74:9+45
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:74:9+45
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:74:9+45
L0:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:74:9+45

    // $t7 := 17 at ./sources/obc_dao_voting_pool.move:74:33+20
    $t7 := 17;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;
    assume {:print "$track_abort(25,1):", $t7} $t7 == $t7;

    // $t4 := move($t7) at ./sources/obc_dao_voting_pool.move:74:9+45
    $t4 := $t7;

    // goto L4 at ./sources/obc_dao_voting_pool.move:74:9+45
    goto L4;

    // label L2 at ./sources/obc_dao_voting_pool.move:76:29+3
    assume {:print "$at(8,2479,2482)"} true;
L2:

    // $t8 := object::new($t2) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:76:17+16
    assume {:print "$at(8,2467,2483)"} true;
    call $t8,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,2467,2483)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t9 := read_ref($t0) at ./sources/obc_dao_voting_pool.move:77:33+4
    assume {:print "$at(8,2517,2521)"} true;
    $t9 := $Dereference($t0);

    // $t10 := object::id<voting_pool::VotingPool>($t9) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:77:22+16
    call $t10 := $2_object_id'$0_voting_pool_VotingPool'($t9);
    if ($abort_flag) {
        assume {:print "$at(8,2506,2522)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t11 := pack voting_pool::VotingObc($t8, $t10, $t1) at ./sources/obc_dao_voting_pool.move:75:25+125
    assume {:print "$at(8,2439,2564)"} true;
    $t11 := $0_voting_pool_VotingObc($t8, $t10, $t1);

    // trace_return[0]($t11) at ./sources/obc_dao_voting_pool.move:80:9+9
    assume {:print "$at(8,2574,2583)"} true;
    assume {:print "$track_return(25,1,0):", $t11} $t11 == $t11;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:80:9+9
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:80:9+9
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
L3:

    // return $t11 at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
    $ret0 := $t11;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L4 at ./sources/obc_dao_voting_pool.move:81:5+1
L4:

    // abort($t4) at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun voting_pool::request_add_voting [verification] at ./sources/obc_dao_voting_pool.move:68:5+427
procedure {:timeLimit 40} $0_voting_pool_request_add_voting$verify(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $2_balance_Balance'$2_obc_OBC', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_voting_pool_VotingObc, $ret1: $Mutation ($0_voting_pool_VotingPool), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $2_object_UID;
    var $t9: $0_voting_pool_VotingPool;
    var $t10: $2_object_ID;
    var $t11: $0_voting_pool_VotingObc;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume {:print "$at(8,2162,2163)"} true;
    assume $IsValid'$0_voting_pool_VotingPool'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume $IsValid'$2_balance_Balance'$2_obc_OBC''($t1);

    // assume WellFormed($t2) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:68:5+1
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting]($t1) at ./sources/obc_dao_voting_pool.move:68:5+1
    assume {:print "$track_local(25,1,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:68:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := balance::value<obc::OBC>($t1) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:73:26+23
    assume {:print "$at(8,2335,2358)"} true;
    call $t3 := $2_balance_value'$2_obc_OBC'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2335,2358)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := 0 at ./sources/obc_dao_voting_pool.move:74:30+1
    assume {:print "$at(8,2389,2390)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t3, $t5) at ./sources/obc_dao_voting_pool.move:74:28+1
    call $t6 := $Gt($t3, $t5);

    // if ($t6) goto L1 else goto L0 at ./sources/obc_dao_voting_pool.move:74:9+45
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao_voting_pool.move:74:9+45
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:74:9+45
L0:

    // destroy($t0) at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;

    // destroy($t2) at ./sources/obc_dao_voting_pool.move:74:9+45

    // $t7 := 17 at ./sources/obc_dao_voting_pool.move:74:33+20
    $t7 := 17;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/obc_dao_voting_pool.move:74:9+45
    assume {:print "$at(8,2368,2413)"} true;
    assume {:print "$track_abort(25,1):", $t7} $t7 == $t7;

    // $t4 := move($t7) at ./sources/obc_dao_voting_pool.move:74:9+45
    $t4 := $t7;

    // goto L4 at ./sources/obc_dao_voting_pool.move:74:9+45
    goto L4;

    // label L2 at ./sources/obc_dao_voting_pool.move:76:29+3
    assume {:print "$at(8,2479,2482)"} true;
L2:

    // $t8 := object::new($t2) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:76:17+16
    assume {:print "$at(8,2467,2483)"} true;
    call $t8,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,2467,2483)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t9 := read_ref($t0) at ./sources/obc_dao_voting_pool.move:77:33+4
    assume {:print "$at(8,2517,2521)"} true;
    $t9 := $Dereference($t0);

    // $t10 := object::id<voting_pool::VotingPool>($t9) on_abort goto L4 with $t4 at ./sources/obc_dao_voting_pool.move:77:22+16
    call $t10 := $2_object_id'$0_voting_pool_VotingPool'($t9);
    if ($abort_flag) {
        assume {:print "$at(8,2506,2522)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t11 := pack voting_pool::VotingObc($t8, $t10, $t1) at ./sources/obc_dao_voting_pool.move:75:25+125
    assume {:print "$at(8,2439,2564)"} true;
    $t11 := $0_voting_pool_VotingObc($t8, $t10, $t1);

    // trace_return[0]($t11) at ./sources/obc_dao_voting_pool.move:80:9+9
    assume {:print "$at(8,2574,2583)"} true;
    assume {:print "$track_return(25,1,0):", $t11} $t11 == $t11;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:80:9+9
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:80:9+9
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
L3:

    // return $t11 at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
    $ret0 := $t11;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L4 at ./sources/obc_dao_voting_pool.move:81:5+1
L4:

    // abort($t4) at ./sources/obc_dao_voting_pool.move:81:5+1
    assume {:print "$at(8,2588,2589)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun voting_pool::request_withdraw_voting [baseline] at ./sources/obc_dao_voting_pool.move:86:5+434
procedure {:inline 1} $0_voting_pool_request_withdraw_voting(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $0_voting_pool_VotingObc) returns ($ret0: $2_balance_Balance'$2_obc_OBC', $ret1: $Mutation ($0_voting_pool_VotingPool))
{
    // declare local variables
    var $t2: $2_balance_Balance'$2_obc_OBC';
    var $t3: int;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t6: int;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:86:5+1
    assume {:print "$at(8,2850,2851)"} true;
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,2,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting_obc]($t1) at ./sources/obc_dao_voting_pool.move:86:5+1
    assume {:print "$track_local(25,2,1):", $t1} $t1 == $t1;

    // ($t3, $t4) := voting_pool::withdraw_from_principal($t0, $t1) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:91:13+41
    assume {:print "$at(8,3029,3070)"} true;
    call $t3,$t4,$t0 := $0_voting_pool_withdraw_from_principal($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3029,3070)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,2):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[principal_withdraw#1#0]($t4) at ./sources/obc_dao_voting_pool.move:90:17+18
    assume {:print "$at(8,2995,3013)"} true;
    assume {:print "$track_local(25,2,2):", $t4} $t4 == $t4;

    // destroy($t3) at ./sources/obc_dao_voting_pool.move:90:14+1

    // $t6 := balance::value<obc::OBC>($t4) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:92:41+35
    assume {:print "$at(8,3112,3147)"} true;
    call $t6 := $2_balance_value'$2_obc_OBC'($t4);
    if ($abort_flag) {
        assume {:print "$at(8,3112,3147)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,2):", $t5} $t5 == $t5;
        goto L2;
    }

    // destroy($t6) at ./sources/obc_dao_voting_pool.move:95:13+1
    assume {:print "$at(8,3163,3164)"} true;

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:98:9+18
    assume {:print "$at(8,3260,3278)"} true;
    assume {:print "$track_return(25,2,0):", $t4} $t4 == $t4;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:98:9+18
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,2,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // label L1 at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:99:5+1
L2:

    // abort($t5) at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun voting_pool::request_withdraw_voting [verification] at ./sources/obc_dao_voting_pool.move:86:5+434
procedure {:timeLimit 40} $0_voting_pool_request_withdraw_voting$verify(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $0_voting_pool_VotingObc) returns ($ret0: $2_balance_Balance'$2_obc_OBC', $ret1: $Mutation ($0_voting_pool_VotingPool))
{
    // declare local variables
    var $t2: $2_balance_Balance'$2_obc_OBC';
    var $t3: int;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t6: int;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:86:5+1
    assume {:print "$at(8,2850,2851)"} true;
    assume $IsValid'$0_voting_pool_VotingPool'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:86:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:86:5+1
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,2,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting_obc]($t1) at ./sources/obc_dao_voting_pool.move:86:5+1
    assume {:print "$track_local(25,2,1):", $t1} $t1 == $t1;

    // ($t3, $t4) := voting_pool::withdraw_from_principal($t0, $t1) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:91:13+41
    assume {:print "$at(8,3029,3070)"} true;
    call $t3,$t4,$t0 := $0_voting_pool_withdraw_from_principal($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3029,3070)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,2):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[principal_withdraw#1#0]($t4) at ./sources/obc_dao_voting_pool.move:90:17+18
    assume {:print "$at(8,2995,3013)"} true;
    assume {:print "$track_local(25,2,2):", $t4} $t4 == $t4;

    // destroy($t3) at ./sources/obc_dao_voting_pool.move:90:14+1

    // $t6 := balance::value<obc::OBC>($t4) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:92:41+35
    assume {:print "$at(8,3112,3147)"} true;
    call $t6 := $2_balance_value'$2_obc_OBC'($t4);
    if ($abort_flag) {
        assume {:print "$at(8,3112,3147)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,2):", $t5} $t5 == $t5;
        goto L2;
    }

    // destroy($t6) at ./sources/obc_dao_voting_pool.move:95:13+1
    assume {:print "$at(8,3163,3164)"} true;

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:98:9+18
    assume {:print "$at(8,3260,3278)"} true;
    assume {:print "$track_return(25,2,0):", $t4} $t4 == $t4;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:98:9+18
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,2,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // label L1 at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:99:5+1
L2:

    // abort($t5) at ./sources/obc_dao_voting_pool.move:99:5+1
    assume {:print "$at(8,3283,3284)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun voting_pool::split_voting_obc [verification] at ./sources/obc_dao_voting_pool.move:161:5+198
procedure {:timeLimit 40} $0_voting_pool_split_voting_obc$verify(_$t0: $Mutation ($0_voting_pool_VotingObc), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_voting_pool_VotingObc), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $0_voting_pool_VotingObc;
    var $t4: int;
    var $t5: $2_tx_context_TxContext;
    var $t6: int;
    var $t0: $Mutation ($0_voting_pool_VotingObc);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:161:5+1
    assume {:print "$at(8,5853,5854)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:161:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao_voting_pool.move:161:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[votingObc]($t0) at ./sources/obc_dao_voting_pool.move:161:5+1
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,9,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[split_amount]($t1) at ./sources/obc_dao_voting_pool.move:161:5+1
    assume {:print "$track_local(25,9,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:161:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := voting_pool::split($t0, $t1, $t2) on_abort goto L2 with $t4 at ./sources/obc_dao_voting_pool.move:162:28+35
    assume {:print "$at(8,5983,6018)"} true;
    call $t3,$t0,$t2 := $0_voting_pool_split($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,5983,6018)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,9):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := read_ref($t2) at ./sources/obc_dao_voting_pool.move:162:84+3
    $t5 := $Dereference($t2);

    // $t6 := tx_context::sender($t5) on_abort goto L2 with $t4 at ./sources/obc_dao_voting_pool.move:162:65+23
    call $t6 := $2_tx_context_sender($t5);
    if ($abort_flag) {
        assume {:print "$at(8,6020,6043)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,9):", $t4} $t4 == $t4;
        goto L2;
    }

    // transfer::transfer<voting_pool::VotingObc>($t3, $t6) on_abort goto L2 with $t4 at ./sources/obc_dao_voting_pool.move:162:9+80
    call $2_transfer_transfer'$0_voting_pool_VotingObc'($t3, $t6);
    if ($abort_flag) {
        assume {:print "$at(8,5964,6044)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(25,9):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[votingObc]($t0) at ./sources/obc_dao_voting_pool.move:162:89+1
    $temp_0'$0_voting_pool_VotingObc' := $Dereference($t0);
    assume {:print "$track_local(25,9,0):", $temp_0'$0_voting_pool_VotingObc'} $temp_0'$0_voting_pool_VotingObc' == $temp_0'$0_voting_pool_VotingObc';

    // trace_local[ctx]($t2) at ./sources/obc_dao_voting_pool.move:162:89+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(25,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao_voting_pool.move:163:5+1
    assume {:print "$at(8,6050,6051)"} true;
L1:

    // return () at ./sources/obc_dao_voting_pool.move:163:5+1
    assume {:print "$at(8,6050,6051)"} true;
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:163:5+1
L2:

    // abort($t4) at ./sources/obc_dao_voting_pool.move:163:5+1
    assume {:print "$at(8,6050,6051)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun voting_pool::unwrap_voting_obc [baseline] at ./sources/obc_dao_voting_pool.move:121:5+230
procedure {:inline 1} $0_voting_pool_unwrap_voting_obc(_$t0: $0_voting_pool_VotingObc) returns ($ret0: $2_balance_Balance'$2_obc_OBC')
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: $2_object_UID;
    var $t3: $2_object_ID;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t0: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[voting_obc]($t0) at ./sources/obc_dao_voting_pool.move:121:5+1
    assume {:print "$at(8,4205,4206)"} true;
    assume {:print "$track_local(25,4,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4) := unpack voting_pool::VotingObc($t0) at ./sources/obc_dao_voting_pool.move:122:13+84
    assume {:print "$at(8,4285,4369)"} true;
    $t2 := $id#$0_voting_pool_VotingObc($t0);
    $t3 := $pool_id#$0_voting_pool_VotingObc($t0);
    $t4 := $principal#$0_voting_pool_VotingObc($t0);

    // trace_local[principal#1#0]($t4) at ./sources/obc_dao_voting_pool.move:125:13+9
    assume {:print "$at(8,4349,4358)"} true;
    assume {:print "$track_local(25,4,1):", $t4} $t4 == $t4;

    // destroy($t3) at ./sources/obc_dao_voting_pool.move:124:22+1
    assume {:print "$at(8,4334,4335)"} true;

    // object::delete($t2) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:127:9+18
    assume {:print "$at(8,4392,4410)"} true;
    call $2_object_delete($t2);
    if ($abort_flag) {
        assume {:print "$at(8,4392,4410)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:128:9+9
    assume {:print "$at(8,4420,4429)"} true;
    assume {:print "$track_return(25,4,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
    $ret0 := $t4;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:129:5+1
L2:

    // abort($t5) at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun voting_pool::unwrap_voting_obc [verification] at ./sources/obc_dao_voting_pool.move:121:5+230
procedure {:timeLimit 40} $0_voting_pool_unwrap_voting_obc$verify(_$t0: $0_voting_pool_VotingObc) returns ($ret0: $2_balance_Balance'$2_obc_OBC')
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: $2_object_UID;
    var $t3: $2_object_ID;
    var $t4: $2_balance_Balance'$2_obc_OBC';
    var $t5: int;
    var $t0: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:121:5+1
    assume {:print "$at(8,4205,4206)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($t0);

    // trace_local[voting_obc]($t0) at ./sources/obc_dao_voting_pool.move:121:5+1
    assume {:print "$track_local(25,4,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4) := unpack voting_pool::VotingObc($t0) at ./sources/obc_dao_voting_pool.move:122:13+84
    assume {:print "$at(8,4285,4369)"} true;
    $t2 := $id#$0_voting_pool_VotingObc($t0);
    $t3 := $pool_id#$0_voting_pool_VotingObc($t0);
    $t4 := $principal#$0_voting_pool_VotingObc($t0);

    // trace_local[principal#1#0]($t4) at ./sources/obc_dao_voting_pool.move:125:13+9
    assume {:print "$at(8,4349,4358)"} true;
    assume {:print "$track_local(25,4,1):", $t4} $t4 == $t4;

    // destroy($t3) at ./sources/obc_dao_voting_pool.move:124:22+1
    assume {:print "$at(8,4334,4335)"} true;

    // object::delete($t2) on_abort goto L2 with $t5 at ./sources/obc_dao_voting_pool.move:127:9+18
    assume {:print "$at(8,4392,4410)"} true;
    call $2_object_delete($t2);
    if ($abort_flag) {
        assume {:print "$at(8,4392,4410)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/obc_dao_voting_pool.move:128:9+9
    assume {:print "$at(8,4420,4429)"} true;
    assume {:print "$track_return(25,4,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
L1:

    // return $t4 at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
    $ret0 := $t4;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:129:5+1
L2:

    // abort($t5) at ./sources/obc_dao_voting_pool.move:129:5+1
    assume {:print "$at(8,4434,4435)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun voting_pool::voting_obc_amount [baseline] at ./sources/obc_dao_voting_pool.move:137:5+99
procedure {:inline 1} $0_voting_pool_voting_obc_amount(_$t0: $0_voting_pool_VotingObc) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: int;
    var $t3: int;
    var $t0: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[voting_obc]($t0) at ./sources/obc_dao_voting_pool.move:137:5+1
    assume {:print "$at(8,4642,4643)"} true;
    assume {:print "$track_local(25,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:137:80+21
    $t1 := $principal#$0_voting_pool_VotingObc($t0);

    // $t2 := balance::value<obc::OBC>($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_voting_pool.move:137:65+37
    call $t2 := $2_balance_value'$2_obc_OBC'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,4702,4739)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(25,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/obc_dao_voting_pool.move:137:65+37
    assume {:print "$track_return(25,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_voting_pool.move:137:103+1
L1:

    // return $t2 at ./sources/obc_dao_voting_pool.move:137:103+1
    assume {:print "$at(8,4740,4741)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:137:103+1
L2:

    // abort($t3) at ./sources/obc_dao_voting_pool.move:137:103+1
    assume {:print "$at(8,4740,4741)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun voting_pool::voting_obc_amount [verification] at ./sources/obc_dao_voting_pool.move:137:5+99
procedure {:timeLimit 40} $0_voting_pool_voting_obc_amount$verify(_$t0: $0_voting_pool_VotingObc) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_obc_OBC';
    var $t2: int;
    var $t3: int;
    var $t0: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:137:5+1
    assume {:print "$at(8,4642,4643)"} true;
    assume $IsValid'$0_voting_pool_VotingObc'($t0);

    // trace_local[voting_obc]($t0) at ./sources/obc_dao_voting_pool.move:137:5+1
    assume {:print "$track_local(25,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<voting_pool::VotingObc>.principal($t0) at ./sources/obc_dao_voting_pool.move:137:80+21
    $t1 := $principal#$0_voting_pool_VotingObc($t0);

    // $t2 := balance::value<obc::OBC>($t1) on_abort goto L2 with $t3 at ./sources/obc_dao_voting_pool.move:137:65+37
    call $t2 := $2_balance_value'$2_obc_OBC'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,4702,4739)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(25,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/obc_dao_voting_pool.move:137:65+37
    assume {:print "$track_return(25,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/obc_dao_voting_pool.move:137:103+1
L1:

    // return $t2 at ./sources/obc_dao_voting_pool.move:137:103+1
    assume {:print "$at(8,4740,4741)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/obc_dao_voting_pool.move:137:103+1
L2:

    // abort($t3) at ./sources/obc_dao_voting_pool.move:137:103+1
    assume {:print "$at(8,4740,4741)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun voting_pool::withdraw_from_principal [baseline] at ./sources/obc_dao_voting_pool.move:104:5+643
procedure {:inline 1} $0_voting_pool_withdraw_from_principal(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $0_voting_pool_VotingObc) returns ($ret0: int, $ret1: $2_balance_Balance'$2_obc_OBC', $ret2: $Mutation ($0_voting_pool_VotingPool))
{
    // declare local variables
    var $t2: $0_voting_pool_PoolTokenExchangeRate;
    var $t3: $2_balance_Balance'$2_obc_OBC';
    var $t4: $2_object_ID;
    var $t5: $0_voting_pool_VotingPool;
    var $t6: $2_object_ID;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $0_voting_pool_PoolTokenExchangeRate;
    var $t11: $2_balance_Balance'$2_obc_OBC';
    var $t12: int;
    var $t13: int;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:104:5+1
    assume {:print "$at(8,3557,3558)"} true;
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,3,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting_obc]($t1) at ./sources/obc_dao_voting_pool.move:104:5+1
    assume {:print "$track_local(25,3,1):", $t1} $t1 == $t1;

    // $t4 := get_field<voting_pool::VotingObc>.pool_id($t1) at ./sources/obc_dao_voting_pool.move:110:17+18
    assume {:print "$at(8,3773,3791)"} true;
    $t4 := $pool_id#$0_voting_pool_VotingObc($t1);

    // $t5 := read_ref($t0) at ./sources/obc_dao_voting_pool.move:110:50+4
    $t5 := $Dereference($t0);

    // $t6 := object::id<voting_pool::VotingPool>($t5) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:110:39+16
    call $t6 := $2_object_id'$0_voting_pool_VotingPool'($t5);
    if ($abort_flag) {
        assume {:print "$at(8,3795,3811)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t8 := ==($t4, $t6) at ./sources/obc_dao_voting_pool.move:110:36+2
    $t8 := $IsEqual'$2_object_ID'($t4, $t6);

    // if ($t8) goto L1 else goto L3 at ./sources/obc_dao_voting_pool.move:110:9+59
    if ($t8) { goto L1; } else { goto L3; }

    // label L1 at ./sources/obc_dao_voting_pool.move:110:9+59
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:110:9+59
    assume {:print "$at(8,3765,3824)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:110:57+10
L0:

    // $t9 := 1 at ./sources/obc_dao_voting_pool.move:110:57+10
    assume {:print "$at(8,3813,3823)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao_voting_pool.move:110:9+59
    assume {:print "$at(8,3765,3824)"} true;
    assume {:print "$track_abort(25,3):", $t9} $t9 == $t9;

    // $t7 := move($t9) at ./sources/obc_dao_voting_pool.move:110:9+59
    $t7 := $t9;

    // goto L5 at ./sources/obc_dao_voting_pool.move:110:9+59
    goto L5;

    // label L2 at ./sources/obc_dao_voting_pool.move:112:46+35
    assume {:print "$at(8,3872,3907)"} true;
L2:

    // $t10 := voting_pool::pool_token_exchange_rate_at_epoch() on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:112:46+35
    assume {:print "$at(8,3872,3907)"} true;
    call $t10 := $0_voting_pool_pool_token_exchange_rate_at_epoch();
    if ($abort_flag) {
        assume {:print "$at(8,3872,3907)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[exchange_rate_at_staking_epoch#1#0]($t10) at ./sources/obc_dao_voting_pool.move:112:13+30
    assume {:print "$track_local(25,3,2):", $t10} $t10 == $t10;

    // $t11 := voting_pool::unwrap_voting_obc($t1) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:113:34+29
    assume {:print "$at(8,3942,3971)"} true;
    call $t11 := $0_voting_pool_unwrap_voting_obc($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3942,3971)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[principal_withdraw#1#0]($t11) at ./sources/obc_dao_voting_pool.move:113:13+18
    assume {:print "$track_local(25,3,3):", $t11} $t11 == $t11;

    // $t12 := balance::value<obc::OBC>($t11) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:114:92+35
    assume {:print "$at(8,4064,4099)"} true;
    call $t12 := $2_balance_value'$2_obc_OBC'($t11);
    if ($abort_flag) {
        assume {:print "$at(8,4064,4099)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t13 := voting_pool::get_token_amount($t10, $t12) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:114:42+86
    call $t13 := $0_voting_pool_get_token_amount($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(8,4014,4100)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_return[0]($t13) at ./sources/obc_dao_voting_pool.move:116:9+83
    assume {:print "$at(8,4111,4194)"} true;
    assume {:print "$track_return(25,3,0):", $t13} $t13 == $t13;

    // trace_return[1]($t11) at ./sources/obc_dao_voting_pool.move:116:9+83
    assume {:print "$track_return(25,3,1):", $t11} $t11 == $t11;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:116:9+83
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,3,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // goto L4 at ./sources/obc_dao_voting_pool.move:116:9+83
    goto L4;

    // label L3 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L3:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L4 at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
L4:

    // return ($t13, $t11) at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
    $ret0 := $t13;
    $ret1 := $t11;
    $ret2 := $t0;
    return;

    // label L5 at ./sources/obc_dao_voting_pool.move:120:5+1
L5:

    // abort($t7) at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun voting_pool::withdraw_from_principal [verification] at ./sources/obc_dao_voting_pool.move:104:5+643
procedure {:timeLimit 40} $0_voting_pool_withdraw_from_principal$verify(_$t0: $Mutation ($0_voting_pool_VotingPool), _$t1: $0_voting_pool_VotingObc) returns ($ret0: int, $ret1: $2_balance_Balance'$2_obc_OBC', $ret2: $Mutation ($0_voting_pool_VotingPool))
{
    // declare local variables
    var $t2: $0_voting_pool_PoolTokenExchangeRate;
    var $t3: $2_balance_Balance'$2_obc_OBC';
    var $t4: $2_object_ID;
    var $t5: $0_voting_pool_VotingPool;
    var $t6: $2_object_ID;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $0_voting_pool_PoolTokenExchangeRate;
    var $t11: $2_balance_Balance'$2_obc_OBC';
    var $t12: int;
    var $t13: int;
    var $t0: $Mutation ($0_voting_pool_VotingPool);
    var $t1: $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_PoolTokenExchangeRate': $0_voting_pool_PoolTokenExchangeRate;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao_voting_pool.move:104:5+1
    assume {:print "$at(8,3557,3558)"} true;
    assume $IsValid'$0_voting_pool_VotingPool'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao_voting_pool.move:104:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:104:5+1
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,3,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // trace_local[voting_obc]($t1) at ./sources/obc_dao_voting_pool.move:104:5+1
    assume {:print "$track_local(25,3,1):", $t1} $t1 == $t1;

    // $t4 := get_field<voting_pool::VotingObc>.pool_id($t1) at ./sources/obc_dao_voting_pool.move:110:17+18
    assume {:print "$at(8,3773,3791)"} true;
    $t4 := $pool_id#$0_voting_pool_VotingObc($t1);

    // $t5 := read_ref($t0) at ./sources/obc_dao_voting_pool.move:110:50+4
    $t5 := $Dereference($t0);

    // $t6 := object::id<voting_pool::VotingPool>($t5) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:110:39+16
    call $t6 := $2_object_id'$0_voting_pool_VotingPool'($t5);
    if ($abort_flag) {
        assume {:print "$at(8,3795,3811)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t8 := ==($t4, $t6) at ./sources/obc_dao_voting_pool.move:110:36+2
    $t8 := $IsEqual'$2_object_ID'($t4, $t6);

    // if ($t8) goto L1 else goto L3 at ./sources/obc_dao_voting_pool.move:110:9+59
    if ($t8) { goto L1; } else { goto L3; }

    // label L1 at ./sources/obc_dao_voting_pool.move:110:9+59
L1:

    // goto L2 at ./sources/obc_dao_voting_pool.move:110:9+59
    assume {:print "$at(8,3765,3824)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao_voting_pool.move:110:57+10
L0:

    // $t9 := 1 at ./sources/obc_dao_voting_pool.move:110:57+10
    assume {:print "$at(8,3813,3823)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao_voting_pool.move:110:9+59
    assume {:print "$at(8,3765,3824)"} true;
    assume {:print "$track_abort(25,3):", $t9} $t9 == $t9;

    // $t7 := move($t9) at ./sources/obc_dao_voting_pool.move:110:9+59
    $t7 := $t9;

    // goto L5 at ./sources/obc_dao_voting_pool.move:110:9+59
    goto L5;

    // label L2 at ./sources/obc_dao_voting_pool.move:112:46+35
    assume {:print "$at(8,3872,3907)"} true;
L2:

    // $t10 := voting_pool::pool_token_exchange_rate_at_epoch() on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:112:46+35
    assume {:print "$at(8,3872,3907)"} true;
    call $t10 := $0_voting_pool_pool_token_exchange_rate_at_epoch();
    if ($abort_flag) {
        assume {:print "$at(8,3872,3907)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[exchange_rate_at_staking_epoch#1#0]($t10) at ./sources/obc_dao_voting_pool.move:112:13+30
    assume {:print "$track_local(25,3,2):", $t10} $t10 == $t10;

    // $t11 := voting_pool::unwrap_voting_obc($t1) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:113:34+29
    assume {:print "$at(8,3942,3971)"} true;
    call $t11 := $0_voting_pool_unwrap_voting_obc($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3942,3971)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_local[principal_withdraw#1#0]($t11) at ./sources/obc_dao_voting_pool.move:113:13+18
    assume {:print "$track_local(25,3,3):", $t11} $t11 == $t11;

    // $t12 := balance::value<obc::OBC>($t11) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:114:92+35
    assume {:print "$at(8,4064,4099)"} true;
    call $t12 := $2_balance_value'$2_obc_OBC'($t11);
    if ($abort_flag) {
        assume {:print "$at(8,4064,4099)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t13 := voting_pool::get_token_amount($t10, $t12) on_abort goto L5 with $t7 at ./sources/obc_dao_voting_pool.move:114:42+86
    call $t13 := $0_voting_pool_get_token_amount($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(8,4014,4100)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,3):", $t7} $t7 == $t7;
        goto L5;
    }

    // trace_return[0]($t13) at ./sources/obc_dao_voting_pool.move:116:9+83
    assume {:print "$at(8,4111,4194)"} true;
    assume {:print "$track_return(25,3,0):", $t13} $t13 == $t13;

    // trace_return[1]($t11) at ./sources/obc_dao_voting_pool.move:116:9+83
    assume {:print "$track_return(25,3,1):", $t11} $t11 == $t11;

    // trace_local[pool]($t0) at ./sources/obc_dao_voting_pool.move:116:9+83
    $temp_0'$0_voting_pool_VotingPool' := $Dereference($t0);
    assume {:print "$track_local(25,3,0):", $temp_0'$0_voting_pool_VotingPool'} $temp_0'$0_voting_pool_VotingPool' == $temp_0'$0_voting_pool_VotingPool';

    // goto L4 at ./sources/obc_dao_voting_pool.move:116:9+83
    goto L4;

    // label L3 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L3:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L4 at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
L4:

    // return ($t13, $t11) at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
    $ret0 := $t13;
    $ret1 := $t11;
    $ret2 := $t0;
    return;

    // label L5 at ./sources/obc_dao_voting_pool.move:120:5+1
L5:

    // abort($t7) at ./sources/obc_dao_voting_pool.move:120:5+1
    assume {:print "$at(8,4199,4200)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct obc_dao::ActionCreateEvent at ./sources/obc_dao.move:86:5+165
type {:datatype} $0_obc_dao_ActionCreateEvent;
function {:constructor} $0_obc_dao_ActionCreateEvent($actionId: int, $name: $1_string_String, $creator: int): $0_obc_dao_ActionCreateEvent;
function {:inline} $Update'$0_obc_dao_ActionCreateEvent'_actionId(s: $0_obc_dao_ActionCreateEvent, x: int): $0_obc_dao_ActionCreateEvent {
    $0_obc_dao_ActionCreateEvent(x, $name#$0_obc_dao_ActionCreateEvent(s), $creator#$0_obc_dao_ActionCreateEvent(s))
}
function {:inline} $Update'$0_obc_dao_ActionCreateEvent'_name(s: $0_obc_dao_ActionCreateEvent, x: $1_string_String): $0_obc_dao_ActionCreateEvent {
    $0_obc_dao_ActionCreateEvent($actionId#$0_obc_dao_ActionCreateEvent(s), x, $creator#$0_obc_dao_ActionCreateEvent(s))
}
function {:inline} $Update'$0_obc_dao_ActionCreateEvent'_creator(s: $0_obc_dao_ActionCreateEvent, x: int): $0_obc_dao_ActionCreateEvent {
    $0_obc_dao_ActionCreateEvent($actionId#$0_obc_dao_ActionCreateEvent(s), $name#$0_obc_dao_ActionCreateEvent(s), x)
}
function $IsValid'$0_obc_dao_ActionCreateEvent'(s: $0_obc_dao_ActionCreateEvent): bool {
    $IsValid'u64'($actionId#$0_obc_dao_ActionCreateEvent(s))
      && $IsValid'$1_string_String'($name#$0_obc_dao_ActionCreateEvent(s))
      && $IsValid'address'($creator#$0_obc_dao_ActionCreateEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_ActionCreateEvent'(s1: $0_obc_dao_ActionCreateEvent, s2: $0_obc_dao_ActionCreateEvent): bool {
    $IsEqual'u64'($actionId#$0_obc_dao_ActionCreateEvent(s1), $actionId#$0_obc_dao_ActionCreateEvent(s2))
    && $IsEqual'$1_string_String'($name#$0_obc_dao_ActionCreateEvent(s1), $name#$0_obc_dao_ActionCreateEvent(s2))
    && $IsEqual'address'($creator#$0_obc_dao_ActionCreateEvent(s1), $creator#$0_obc_dao_ActionCreateEvent(s2))}

// struct obc_dao::BooleanEvent at ./sources/obc_dao.move:97:5+69
type {:datatype} $0_obc_dao_BooleanEvent;
function {:constructor} $0_obc_dao_BooleanEvent($value: bool): $0_obc_dao_BooleanEvent;
function {:inline} $Update'$0_obc_dao_BooleanEvent'_value(s: $0_obc_dao_BooleanEvent, x: bool): $0_obc_dao_BooleanEvent {
    $0_obc_dao_BooleanEvent(x)
}
function $IsValid'$0_obc_dao_BooleanEvent'(s: $0_obc_dao_BooleanEvent): bool {
    $IsValid'bool'($value#$0_obc_dao_BooleanEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_BooleanEvent'(s1: $0_obc_dao_BooleanEvent, s2: $0_obc_dao_BooleanEvent): bool {
    s1 == s2
}

// struct obc_dao::Dao at ./sources/obc_dao.move:136:5+388
type {:datatype} $0_obc_dao_Dao;
function {:constructor} $0_obc_dao_Dao($id: $2_object_UID, $admin: int, $config: $0_obc_dao_DaoConfig, $info: $0_obc_dao_DaoGlobalInfo, $proposalRecord: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo', $actionRecord: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction', $votesRecord: $2_vec_map_VecMap'u64_u64', $votingPool: $0_voting_pool_VotingPool): $0_obc_dao_Dao;
function {:inline} $Update'$0_obc_dao_Dao'_id(s: $0_obc_dao_Dao, x: $2_object_UID): $0_obc_dao_Dao {
    $0_obc_dao_Dao(x, $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_admin(s: $0_obc_dao_Dao, x: int): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), x, $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_config(s: $0_obc_dao_Dao, x: $0_obc_dao_DaoConfig): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), x, $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_info(s: $0_obc_dao_Dao, x: $0_obc_dao_DaoGlobalInfo): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), x, $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_proposalRecord(s: $0_obc_dao_Dao, x: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo'): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), x, $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_actionRecord(s: $0_obc_dao_Dao, x: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction'): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), x, $votesRecord#$0_obc_dao_Dao(s), $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_votesRecord(s: $0_obc_dao_Dao, x: $2_vec_map_VecMap'u64_u64'): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), x, $votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $Update'$0_obc_dao_Dao'_votingPool(s: $0_obc_dao_Dao, x: $0_voting_pool_VotingPool): $0_obc_dao_Dao {
    $0_obc_dao_Dao($id#$0_obc_dao_Dao(s), $admin#$0_obc_dao_Dao(s), $config#$0_obc_dao_Dao(s), $info#$0_obc_dao_Dao(s), $proposalRecord#$0_obc_dao_Dao(s), $actionRecord#$0_obc_dao_Dao(s), $votesRecord#$0_obc_dao_Dao(s), x)
}
function $IsValid'$0_obc_dao_Dao'(s: $0_obc_dao_Dao): bool {
    $IsValid'$2_object_UID'($id#$0_obc_dao_Dao(s))
      && $IsValid'address'($admin#$0_obc_dao_Dao(s))
      && $IsValid'$0_obc_dao_DaoConfig'($config#$0_obc_dao_Dao(s))
      && $IsValid'$0_obc_dao_DaoGlobalInfo'($info#$0_obc_dao_Dao(s))
      && $IsValid'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''($proposalRecord#$0_obc_dao_Dao(s))
      && $IsValid'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''($actionRecord#$0_obc_dao_Dao(s))
      && $IsValid'$2_vec_map_VecMap'u64_u64''($votesRecord#$0_obc_dao_Dao(s))
      && $IsValid'$0_voting_pool_VotingPool'($votingPool#$0_obc_dao_Dao(s))
}
function {:inline} $IsEqual'$0_obc_dao_Dao'(s1: $0_obc_dao_Dao, s2: $0_obc_dao_Dao): bool {
    $IsEqual'$2_object_UID'($id#$0_obc_dao_Dao(s1), $id#$0_obc_dao_Dao(s2))
    && $IsEqual'address'($admin#$0_obc_dao_Dao(s1), $admin#$0_obc_dao_Dao(s2))
    && $IsEqual'$0_obc_dao_DaoConfig'($config#$0_obc_dao_Dao(s1), $config#$0_obc_dao_Dao(s2))
    && $IsEqual'$0_obc_dao_DaoGlobalInfo'($info#$0_obc_dao_Dao(s1), $info#$0_obc_dao_Dao(s2))
    && $IsEqual'$2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo''($proposalRecord#$0_obc_dao_Dao(s1), $proposalRecord#$0_obc_dao_Dao(s2))
    && $IsEqual'$2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction''($actionRecord#$0_obc_dao_Dao(s1), $actionRecord#$0_obc_dao_Dao(s2))
    && $IsEqual'$2_vec_map_VecMap'u64_u64''($votesRecord#$0_obc_dao_Dao(s1), $votesRecord#$0_obc_dao_Dao(s2))
    && $IsEqual'$0_voting_pool_VotingPool'($votingPool#$0_obc_dao_Dao(s1), $votingPool#$0_obc_dao_Dao(s2))}
var $0_obc_dao_Dao_$memory: $Memory $0_obc_dao_Dao;

// struct obc_dao::DaoConfig at ./sources/obc_dao.move:117:5+583
type {:datatype} $0_obc_dao_DaoConfig;
function {:constructor} $0_obc_dao_DaoConfig($voting_delay: int, $voting_period: int, $voting_quorum_rate: int, $min_action_delay: int): $0_obc_dao_DaoConfig;
function {:inline} $Update'$0_obc_dao_DaoConfig'_voting_delay(s: $0_obc_dao_DaoConfig, x: int): $0_obc_dao_DaoConfig {
    $0_obc_dao_DaoConfig(x, $voting_period#$0_obc_dao_DaoConfig(s), $voting_quorum_rate#$0_obc_dao_DaoConfig(s), $min_action_delay#$0_obc_dao_DaoConfig(s))
}
function {:inline} $Update'$0_obc_dao_DaoConfig'_voting_period(s: $0_obc_dao_DaoConfig, x: int): $0_obc_dao_DaoConfig {
    $0_obc_dao_DaoConfig($voting_delay#$0_obc_dao_DaoConfig(s), x, $voting_quorum_rate#$0_obc_dao_DaoConfig(s), $min_action_delay#$0_obc_dao_DaoConfig(s))
}
function {:inline} $Update'$0_obc_dao_DaoConfig'_voting_quorum_rate(s: $0_obc_dao_DaoConfig, x: int): $0_obc_dao_DaoConfig {
    $0_obc_dao_DaoConfig($voting_delay#$0_obc_dao_DaoConfig(s), $voting_period#$0_obc_dao_DaoConfig(s), x, $min_action_delay#$0_obc_dao_DaoConfig(s))
}
function {:inline} $Update'$0_obc_dao_DaoConfig'_min_action_delay(s: $0_obc_dao_DaoConfig, x: int): $0_obc_dao_DaoConfig {
    $0_obc_dao_DaoConfig($voting_delay#$0_obc_dao_DaoConfig(s), $voting_period#$0_obc_dao_DaoConfig(s), $voting_quorum_rate#$0_obc_dao_DaoConfig(s), x)
}
function $IsValid'$0_obc_dao_DaoConfig'(s: $0_obc_dao_DaoConfig): bool {
    $IsValid'u64'($voting_delay#$0_obc_dao_DaoConfig(s))
      && $IsValid'u64'($voting_period#$0_obc_dao_DaoConfig(s))
      && $IsValid'u8'($voting_quorum_rate#$0_obc_dao_DaoConfig(s))
      && $IsValid'u64'($min_action_delay#$0_obc_dao_DaoConfig(s))
}
function {:inline} $IsEqual'$0_obc_dao_DaoConfig'(s1: $0_obc_dao_DaoConfig, s2: $0_obc_dao_DaoConfig): bool {
    s1 == s2
}

// struct obc_dao::DaoGlobalInfo at ./sources/obc_dao.move:102:5+340
type {:datatype} $0_obc_dao_DaoGlobalInfo;
function {:constructor} $0_obc_dao_DaoGlobalInfo($id: $2_object_UID, $next_proposal_id: int, $next_action_id: int, $proposal_create_event: $0_obc_dao_ProposalCreatedEvent, $vote_changed_event: $0_obc_dao_VoteChangedEvent): $0_obc_dao_DaoGlobalInfo;
function {:inline} $Update'$0_obc_dao_DaoGlobalInfo'_id(s: $0_obc_dao_DaoGlobalInfo, x: $2_object_UID): $0_obc_dao_DaoGlobalInfo {
    $0_obc_dao_DaoGlobalInfo(x, $next_proposal_id#$0_obc_dao_DaoGlobalInfo(s), $next_action_id#$0_obc_dao_DaoGlobalInfo(s), $proposal_create_event#$0_obc_dao_DaoGlobalInfo(s), $vote_changed_event#$0_obc_dao_DaoGlobalInfo(s))
}
function {:inline} $Update'$0_obc_dao_DaoGlobalInfo'_next_proposal_id(s: $0_obc_dao_DaoGlobalInfo, x: int): $0_obc_dao_DaoGlobalInfo {
    $0_obc_dao_DaoGlobalInfo($id#$0_obc_dao_DaoGlobalInfo(s), x, $next_action_id#$0_obc_dao_DaoGlobalInfo(s), $proposal_create_event#$0_obc_dao_DaoGlobalInfo(s), $vote_changed_event#$0_obc_dao_DaoGlobalInfo(s))
}
function {:inline} $Update'$0_obc_dao_DaoGlobalInfo'_next_action_id(s: $0_obc_dao_DaoGlobalInfo, x: int): $0_obc_dao_DaoGlobalInfo {
    $0_obc_dao_DaoGlobalInfo($id#$0_obc_dao_DaoGlobalInfo(s), $next_proposal_id#$0_obc_dao_DaoGlobalInfo(s), x, $proposal_create_event#$0_obc_dao_DaoGlobalInfo(s), $vote_changed_event#$0_obc_dao_DaoGlobalInfo(s))
}
function {:inline} $Update'$0_obc_dao_DaoGlobalInfo'_proposal_create_event(s: $0_obc_dao_DaoGlobalInfo, x: $0_obc_dao_ProposalCreatedEvent): $0_obc_dao_DaoGlobalInfo {
    $0_obc_dao_DaoGlobalInfo($id#$0_obc_dao_DaoGlobalInfo(s), $next_proposal_id#$0_obc_dao_DaoGlobalInfo(s), $next_action_id#$0_obc_dao_DaoGlobalInfo(s), x, $vote_changed_event#$0_obc_dao_DaoGlobalInfo(s))
}
function {:inline} $Update'$0_obc_dao_DaoGlobalInfo'_vote_changed_event(s: $0_obc_dao_DaoGlobalInfo, x: $0_obc_dao_VoteChangedEvent): $0_obc_dao_DaoGlobalInfo {
    $0_obc_dao_DaoGlobalInfo($id#$0_obc_dao_DaoGlobalInfo(s), $next_proposal_id#$0_obc_dao_DaoGlobalInfo(s), $next_action_id#$0_obc_dao_DaoGlobalInfo(s), $proposal_create_event#$0_obc_dao_DaoGlobalInfo(s), x)
}
function $IsValid'$0_obc_dao_DaoGlobalInfo'(s: $0_obc_dao_DaoGlobalInfo): bool {
    $IsValid'$2_object_UID'($id#$0_obc_dao_DaoGlobalInfo(s))
      && $IsValid'u64'($next_proposal_id#$0_obc_dao_DaoGlobalInfo(s))
      && $IsValid'u64'($next_action_id#$0_obc_dao_DaoGlobalInfo(s))
      && $IsValid'$0_obc_dao_ProposalCreatedEvent'($proposal_create_event#$0_obc_dao_DaoGlobalInfo(s))
      && $IsValid'$0_obc_dao_VoteChangedEvent'($vote_changed_event#$0_obc_dao_DaoGlobalInfo(s))
}
function {:inline} $IsEqual'$0_obc_dao_DaoGlobalInfo'(s1: $0_obc_dao_DaoGlobalInfo, s2: $0_obc_dao_DaoGlobalInfo): bool {
    s1 == s2
}
var $0_obc_dao_DaoGlobalInfo_$memory: $Memory $0_obc_dao_DaoGlobalInfo;

// struct obc_dao::DaoManagerEvent at ./sources/obc_dao.move:60:5+102
type {:datatype} $0_obc_dao_DaoManagerEvent;
function {:constructor} $0_obc_dao_DaoManagerEvent($msg: $1_string_String, $key: int): $0_obc_dao_DaoManagerEvent;
function {:inline} $Update'$0_obc_dao_DaoManagerEvent'_msg(s: $0_obc_dao_DaoManagerEvent, x: $1_string_String): $0_obc_dao_DaoManagerEvent {
    $0_obc_dao_DaoManagerEvent(x, $key#$0_obc_dao_DaoManagerEvent(s))
}
function {:inline} $Update'$0_obc_dao_DaoManagerEvent'_key(s: $0_obc_dao_DaoManagerEvent, x: int): $0_obc_dao_DaoManagerEvent {
    $0_obc_dao_DaoManagerEvent($msg#$0_obc_dao_DaoManagerEvent(s), x)
}
function $IsValid'$0_obc_dao_DaoManagerEvent'(s: $0_obc_dao_DaoManagerEvent): bool {
    $IsValid'$1_string_String'($msg#$0_obc_dao_DaoManagerEvent(s))
      && $IsValid'address'($key#$0_obc_dao_DaoManagerEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_DaoManagerEvent'(s1: $0_obc_dao_DaoManagerEvent, s2: $0_obc_dao_DaoManagerEvent): bool {
    $IsEqual'$1_string_String'($msg#$0_obc_dao_DaoManagerEvent(s1), $msg#$0_obc_dao_DaoManagerEvent(s2))
    && $IsEqual'address'($key#$0_obc_dao_DaoManagerEvent(s1), $key#$0_obc_dao_DaoManagerEvent(s2))}

// struct obc_dao::OBCDaoAction at ./sources/obc_dao.move:148:5+133
type {:datatype} $0_obc_dao_OBCDaoAction;
function {:constructor} $0_obc_dao_OBCDaoAction($actionId: int, $name: $1_string_String): $0_obc_dao_OBCDaoAction;
function {:inline} $Update'$0_obc_dao_OBCDaoAction'_actionId(s: $0_obc_dao_OBCDaoAction, x: int): $0_obc_dao_OBCDaoAction {
    $0_obc_dao_OBCDaoAction(x, $name#$0_obc_dao_OBCDaoAction(s))
}
function {:inline} $Update'$0_obc_dao_OBCDaoAction'_name(s: $0_obc_dao_OBCDaoAction, x: $1_string_String): $0_obc_dao_OBCDaoAction {
    $0_obc_dao_OBCDaoAction($actionId#$0_obc_dao_OBCDaoAction(s), x)
}
function $IsValid'$0_obc_dao_OBCDaoAction'(s: $0_obc_dao_OBCDaoAction): bool {
    $IsValid'u64'($actionId#$0_obc_dao_OBCDaoAction(s))
      && $IsValid'$1_string_String'($name#$0_obc_dao_OBCDaoAction(s))
}
function {:inline} $IsEqual'$0_obc_dao_OBCDaoAction'(s1: $0_obc_dao_OBCDaoAction, s2: $0_obc_dao_OBCDaoAction): bool {
    $IsEqual'u64'($actionId#$0_obc_dao_OBCDaoAction(s1), $actionId#$0_obc_dao_OBCDaoAction(s2))
    && $IsEqual'$1_string_String'($name#$0_obc_dao_OBCDaoAction(s1), $name#$0_obc_dao_OBCDaoAction(s2))}

// struct obc_dao::Proposal at ./sources/obc_dao.move:180:5+111
type {:datatype} $0_obc_dao_Proposal;
function {:constructor} $0_obc_dao_Proposal($id: $2_object_UID, $proposal: $0_obc_dao_ProposalInfo): $0_obc_dao_Proposal;
function {:inline} $Update'$0_obc_dao_Proposal'_id(s: $0_obc_dao_Proposal, x: $2_object_UID): $0_obc_dao_Proposal {
    $0_obc_dao_Proposal(x, $proposal#$0_obc_dao_Proposal(s))
}
function {:inline} $Update'$0_obc_dao_Proposal'_proposal(s: $0_obc_dao_Proposal, x: $0_obc_dao_ProposalInfo): $0_obc_dao_Proposal {
    $0_obc_dao_Proposal($id#$0_obc_dao_Proposal(s), x)
}
function $IsValid'$0_obc_dao_Proposal'(s: $0_obc_dao_Proposal): bool {
    $IsValid'$2_object_UID'($id#$0_obc_dao_Proposal(s))
      && $IsValid'$0_obc_dao_ProposalInfo'($proposal#$0_obc_dao_Proposal(s))
}
function {:inline} $IsEqual'$0_obc_dao_Proposal'(s1: $0_obc_dao_Proposal, s2: $0_obc_dao_Proposal): bool {
    $IsEqual'$2_object_UID'($id#$0_obc_dao_Proposal(s1), $id#$0_obc_dao_Proposal(s2))
    && $IsEqual'$0_obc_dao_ProposalInfo'($proposal#$0_obc_dao_Proposal(s1), $proposal#$0_obc_dao_Proposal(s2))}
var $0_obc_dao_Proposal_$memory: $Memory $0_obc_dao_Proposal;

// struct obc_dao::ProposalCreatedEvent at ./sources/obc_dao.move:65:5+236
type {:datatype} $0_obc_dao_ProposalCreatedEvent;
function {:constructor} $0_obc_dao_ProposalCreatedEvent($proposal_uid_address: int, $proposal_id: int, $proposer: int): $0_obc_dao_ProposalCreatedEvent;
function {:inline} $Update'$0_obc_dao_ProposalCreatedEvent'_proposal_uid_address(s: $0_obc_dao_ProposalCreatedEvent, x: int): $0_obc_dao_ProposalCreatedEvent {
    $0_obc_dao_ProposalCreatedEvent(x, $proposal_id#$0_obc_dao_ProposalCreatedEvent(s), $proposer#$0_obc_dao_ProposalCreatedEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalCreatedEvent'_proposal_id(s: $0_obc_dao_ProposalCreatedEvent, x: int): $0_obc_dao_ProposalCreatedEvent {
    $0_obc_dao_ProposalCreatedEvent($proposal_uid_address#$0_obc_dao_ProposalCreatedEvent(s), x, $proposer#$0_obc_dao_ProposalCreatedEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalCreatedEvent'_proposer(s: $0_obc_dao_ProposalCreatedEvent, x: int): $0_obc_dao_ProposalCreatedEvent {
    $0_obc_dao_ProposalCreatedEvent($proposal_uid_address#$0_obc_dao_ProposalCreatedEvent(s), $proposal_id#$0_obc_dao_ProposalCreatedEvent(s), x)
}
function $IsValid'$0_obc_dao_ProposalCreatedEvent'(s: $0_obc_dao_ProposalCreatedEvent): bool {
    $IsValid'address'($proposal_uid_address#$0_obc_dao_ProposalCreatedEvent(s))
      && $IsValid'u64'($proposal_id#$0_obc_dao_ProposalCreatedEvent(s))
      && $IsValid'address'($proposer#$0_obc_dao_ProposalCreatedEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_ProposalCreatedEvent'(s1: $0_obc_dao_ProposalCreatedEvent, s2: $0_obc_dao_ProposalCreatedEvent): bool {
    s1 == s2
}

// struct obc_dao::ProposalInfo at ./sources/obc_dao.move:157:5+702
type {:datatype} $0_obc_dao_ProposalInfo;
function {:constructor} $0_obc_dao_ProposalInfo($pid: int, $proposer: int, $start_time: int, $end_time: int, $for_votes: int, $against_votes: int, $eta: int, $action_delay: int, $quorum_votes: int, $action: $0_obc_dao_OBCDaoAction): $0_obc_dao_ProposalInfo;
function {:inline} $Update'$0_obc_dao_ProposalInfo'_pid(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo(x, $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_proposer(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), x, $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_start_time(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), x, $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_end_time(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), x, $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_for_votes(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), x, $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_against_votes(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), x, $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_eta(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), x, $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_action_delay(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), x, $quorum_votes#$0_obc_dao_ProposalInfo(s), $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_quorum_votes(s: $0_obc_dao_ProposalInfo, x: int): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), x, $action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfo'_action(s: $0_obc_dao_ProposalInfo, x: $0_obc_dao_OBCDaoAction): $0_obc_dao_ProposalInfo {
    $0_obc_dao_ProposalInfo($pid#$0_obc_dao_ProposalInfo(s), $proposer#$0_obc_dao_ProposalInfo(s), $start_time#$0_obc_dao_ProposalInfo(s), $end_time#$0_obc_dao_ProposalInfo(s), $for_votes#$0_obc_dao_ProposalInfo(s), $against_votes#$0_obc_dao_ProposalInfo(s), $eta#$0_obc_dao_ProposalInfo(s), $action_delay#$0_obc_dao_ProposalInfo(s), $quorum_votes#$0_obc_dao_ProposalInfo(s), x)
}
function $IsValid'$0_obc_dao_ProposalInfo'(s: $0_obc_dao_ProposalInfo): bool {
    $IsValid'u64'($pid#$0_obc_dao_ProposalInfo(s))
      && $IsValid'address'($proposer#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($start_time#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($end_time#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($for_votes#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($against_votes#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($eta#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($action_delay#$0_obc_dao_ProposalInfo(s))
      && $IsValid'u64'($quorum_votes#$0_obc_dao_ProposalInfo(s))
      && $IsValid'$0_obc_dao_OBCDaoAction'($action#$0_obc_dao_ProposalInfo(s))
}
function {:inline} $IsEqual'$0_obc_dao_ProposalInfo'(s1: $0_obc_dao_ProposalInfo, s2: $0_obc_dao_ProposalInfo): bool {
    $IsEqual'u64'($pid#$0_obc_dao_ProposalInfo(s1), $pid#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'address'($proposer#$0_obc_dao_ProposalInfo(s1), $proposer#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($start_time#$0_obc_dao_ProposalInfo(s1), $start_time#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($end_time#$0_obc_dao_ProposalInfo(s1), $end_time#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($for_votes#$0_obc_dao_ProposalInfo(s1), $for_votes#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($against_votes#$0_obc_dao_ProposalInfo(s1), $against_votes#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($eta#$0_obc_dao_ProposalInfo(s1), $eta#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($action_delay#$0_obc_dao_ProposalInfo(s1), $action_delay#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'u64'($quorum_votes#$0_obc_dao_ProposalInfo(s1), $quorum_votes#$0_obc_dao_ProposalInfo(s2))
    && $IsEqual'$0_obc_dao_OBCDaoAction'($action#$0_obc_dao_ProposalInfo(s1), $action#$0_obc_dao_ProposalInfo(s2))}

// struct obc_dao::ProposalInfoEvent at ./sources/obc_dao.move:775:5+178
type {:datatype} $0_obc_dao_ProposalInfoEvent;
function {:constructor} $0_obc_dao_ProposalInfoEvent($proposal_id: int, $start_time: int, $end_time: int, $for_votes: int, $against_votes: int): $0_obc_dao_ProposalInfoEvent;
function {:inline} $Update'$0_obc_dao_ProposalInfoEvent'_proposal_id(s: $0_obc_dao_ProposalInfoEvent, x: int): $0_obc_dao_ProposalInfoEvent {
    $0_obc_dao_ProposalInfoEvent(x, $start_time#$0_obc_dao_ProposalInfoEvent(s), $end_time#$0_obc_dao_ProposalInfoEvent(s), $for_votes#$0_obc_dao_ProposalInfoEvent(s), $against_votes#$0_obc_dao_ProposalInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfoEvent'_start_time(s: $0_obc_dao_ProposalInfoEvent, x: int): $0_obc_dao_ProposalInfoEvent {
    $0_obc_dao_ProposalInfoEvent($proposal_id#$0_obc_dao_ProposalInfoEvent(s), x, $end_time#$0_obc_dao_ProposalInfoEvent(s), $for_votes#$0_obc_dao_ProposalInfoEvent(s), $against_votes#$0_obc_dao_ProposalInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfoEvent'_end_time(s: $0_obc_dao_ProposalInfoEvent, x: int): $0_obc_dao_ProposalInfoEvent {
    $0_obc_dao_ProposalInfoEvent($proposal_id#$0_obc_dao_ProposalInfoEvent(s), $start_time#$0_obc_dao_ProposalInfoEvent(s), x, $for_votes#$0_obc_dao_ProposalInfoEvent(s), $against_votes#$0_obc_dao_ProposalInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfoEvent'_for_votes(s: $0_obc_dao_ProposalInfoEvent, x: int): $0_obc_dao_ProposalInfoEvent {
    $0_obc_dao_ProposalInfoEvent($proposal_id#$0_obc_dao_ProposalInfoEvent(s), $start_time#$0_obc_dao_ProposalInfoEvent(s), $end_time#$0_obc_dao_ProposalInfoEvent(s), x, $against_votes#$0_obc_dao_ProposalInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalInfoEvent'_against_votes(s: $0_obc_dao_ProposalInfoEvent, x: int): $0_obc_dao_ProposalInfoEvent {
    $0_obc_dao_ProposalInfoEvent($proposal_id#$0_obc_dao_ProposalInfoEvent(s), $start_time#$0_obc_dao_ProposalInfoEvent(s), $end_time#$0_obc_dao_ProposalInfoEvent(s), $for_votes#$0_obc_dao_ProposalInfoEvent(s), x)
}
function $IsValid'$0_obc_dao_ProposalInfoEvent'(s: $0_obc_dao_ProposalInfoEvent): bool {
    $IsValid'u64'($proposal_id#$0_obc_dao_ProposalInfoEvent(s))
      && $IsValid'u64'($start_time#$0_obc_dao_ProposalInfoEvent(s))
      && $IsValid'u64'($end_time#$0_obc_dao_ProposalInfoEvent(s))
      && $IsValid'u64'($for_votes#$0_obc_dao_ProposalInfoEvent(s))
      && $IsValid'u64'($against_votes#$0_obc_dao_ProposalInfoEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_ProposalInfoEvent'(s1: $0_obc_dao_ProposalInfoEvent, s2: $0_obc_dao_ProposalInfoEvent): bool {
    s1 == s2
}

// struct obc_dao::ProposalStateEvent at ./sources/obc_dao.move:93:5+98
type {:datatype} $0_obc_dao_ProposalStateEvent;
function {:constructor} $0_obc_dao_ProposalStateEvent($proposalId: int, $state: int): $0_obc_dao_ProposalStateEvent;
function {:inline} $Update'$0_obc_dao_ProposalStateEvent'_proposalId(s: $0_obc_dao_ProposalStateEvent, x: int): $0_obc_dao_ProposalStateEvent {
    $0_obc_dao_ProposalStateEvent(x, $state#$0_obc_dao_ProposalStateEvent(s))
}
function {:inline} $Update'$0_obc_dao_ProposalStateEvent'_state(s: $0_obc_dao_ProposalStateEvent, x: int): $0_obc_dao_ProposalStateEvent {
    $0_obc_dao_ProposalStateEvent($proposalId#$0_obc_dao_ProposalStateEvent(s), x)
}
function $IsValid'$0_obc_dao_ProposalStateEvent'(s: $0_obc_dao_ProposalStateEvent): bool {
    $IsValid'u64'($proposalId#$0_obc_dao_ProposalStateEvent(s))
      && $IsValid'u8'($state#$0_obc_dao_ProposalStateEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_ProposalStateEvent'(s1: $0_obc_dao_ProposalStateEvent, s2: $0_obc_dao_ProposalStateEvent): bool {
    s1 == s2
}

// struct obc_dao::Vote at ./sources/obc_dao.move:188:5+275
type {:datatype} $0_obc_dao_Vote;
function {:constructor} $0_obc_dao_Vote($id: $2_object_UID, $vid: int, $proposer: int, $vote: $0_voting_pool_VotingObc, $agree: bool): $0_obc_dao_Vote;
function {:inline} $Update'$0_obc_dao_Vote'_id(s: $0_obc_dao_Vote, x: $2_object_UID): $0_obc_dao_Vote {
    $0_obc_dao_Vote(x, $vid#$0_obc_dao_Vote(s), $proposer#$0_obc_dao_Vote(s), $vote#$0_obc_dao_Vote(s), $agree#$0_obc_dao_Vote(s))
}
function {:inline} $Update'$0_obc_dao_Vote'_vid(s: $0_obc_dao_Vote, x: int): $0_obc_dao_Vote {
    $0_obc_dao_Vote($id#$0_obc_dao_Vote(s), x, $proposer#$0_obc_dao_Vote(s), $vote#$0_obc_dao_Vote(s), $agree#$0_obc_dao_Vote(s))
}
function {:inline} $Update'$0_obc_dao_Vote'_proposer(s: $0_obc_dao_Vote, x: int): $0_obc_dao_Vote {
    $0_obc_dao_Vote($id#$0_obc_dao_Vote(s), $vid#$0_obc_dao_Vote(s), x, $vote#$0_obc_dao_Vote(s), $agree#$0_obc_dao_Vote(s))
}
function {:inline} $Update'$0_obc_dao_Vote'_vote(s: $0_obc_dao_Vote, x: $0_voting_pool_VotingObc): $0_obc_dao_Vote {
    $0_obc_dao_Vote($id#$0_obc_dao_Vote(s), $vid#$0_obc_dao_Vote(s), $proposer#$0_obc_dao_Vote(s), x, $agree#$0_obc_dao_Vote(s))
}
function {:inline} $Update'$0_obc_dao_Vote'_agree(s: $0_obc_dao_Vote, x: bool): $0_obc_dao_Vote {
    $0_obc_dao_Vote($id#$0_obc_dao_Vote(s), $vid#$0_obc_dao_Vote(s), $proposer#$0_obc_dao_Vote(s), $vote#$0_obc_dao_Vote(s), x)
}
function $IsValid'$0_obc_dao_Vote'(s: $0_obc_dao_Vote): bool {
    $IsValid'$2_object_UID'($id#$0_obc_dao_Vote(s))
      && $IsValid'u64'($vid#$0_obc_dao_Vote(s))
      && $IsValid'address'($proposer#$0_obc_dao_Vote(s))
      && $IsValid'$0_voting_pool_VotingObc'($vote#$0_obc_dao_Vote(s))
      && $IsValid'bool'($agree#$0_obc_dao_Vote(s))
}
function {:inline} $IsEqual'$0_obc_dao_Vote'(s1: $0_obc_dao_Vote, s2: $0_obc_dao_Vote): bool {
    s1 == s2
}
var $0_obc_dao_Vote_$memory: $Memory $0_obc_dao_Vote;

// struct obc_dao::VoteChangedEvent at ./sources/obc_dao.move:74:5+346
type {:datatype} $0_obc_dao_VoteChangedEvent;
function {:constructor} $0_obc_dao_VoteChangedEvent($proposal_id: int, $voter: int, $proposer: int, $agree: bool, $vote: int): $0_obc_dao_VoteChangedEvent;
function {:inline} $Update'$0_obc_dao_VoteChangedEvent'_proposal_id(s: $0_obc_dao_VoteChangedEvent, x: int): $0_obc_dao_VoteChangedEvent {
    $0_obc_dao_VoteChangedEvent(x, $voter#$0_obc_dao_VoteChangedEvent(s), $proposer#$0_obc_dao_VoteChangedEvent(s), $agree#$0_obc_dao_VoteChangedEvent(s), $vote#$0_obc_dao_VoteChangedEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteChangedEvent'_voter(s: $0_obc_dao_VoteChangedEvent, x: int): $0_obc_dao_VoteChangedEvent {
    $0_obc_dao_VoteChangedEvent($proposal_id#$0_obc_dao_VoteChangedEvent(s), x, $proposer#$0_obc_dao_VoteChangedEvent(s), $agree#$0_obc_dao_VoteChangedEvent(s), $vote#$0_obc_dao_VoteChangedEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteChangedEvent'_proposer(s: $0_obc_dao_VoteChangedEvent, x: int): $0_obc_dao_VoteChangedEvent {
    $0_obc_dao_VoteChangedEvent($proposal_id#$0_obc_dao_VoteChangedEvent(s), $voter#$0_obc_dao_VoteChangedEvent(s), x, $agree#$0_obc_dao_VoteChangedEvent(s), $vote#$0_obc_dao_VoteChangedEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteChangedEvent'_agree(s: $0_obc_dao_VoteChangedEvent, x: bool): $0_obc_dao_VoteChangedEvent {
    $0_obc_dao_VoteChangedEvent($proposal_id#$0_obc_dao_VoteChangedEvent(s), $voter#$0_obc_dao_VoteChangedEvent(s), $proposer#$0_obc_dao_VoteChangedEvent(s), x, $vote#$0_obc_dao_VoteChangedEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteChangedEvent'_vote(s: $0_obc_dao_VoteChangedEvent, x: int): $0_obc_dao_VoteChangedEvent {
    $0_obc_dao_VoteChangedEvent($proposal_id#$0_obc_dao_VoteChangedEvent(s), $voter#$0_obc_dao_VoteChangedEvent(s), $proposer#$0_obc_dao_VoteChangedEvent(s), $agree#$0_obc_dao_VoteChangedEvent(s), x)
}
function $IsValid'$0_obc_dao_VoteChangedEvent'(s: $0_obc_dao_VoteChangedEvent): bool {
    $IsValid'u64'($proposal_id#$0_obc_dao_VoteChangedEvent(s))
      && $IsValid'address'($voter#$0_obc_dao_VoteChangedEvent(s))
      && $IsValid'address'($proposer#$0_obc_dao_VoteChangedEvent(s))
      && $IsValid'bool'($agree#$0_obc_dao_VoteChangedEvent(s))
      && $IsValid'u64'($vote#$0_obc_dao_VoteChangedEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_VoteChangedEvent'(s1: $0_obc_dao_VoteChangedEvent, s2: $0_obc_dao_VoteChangedEvent): bool {
    s1 == s2
}

// struct obc_dao::VoteInfoEvent at ./sources/obc_dao.move:603:5+165
type {:datatype} $0_obc_dao_VoteInfoEvent;
function {:constructor} $0_obc_dao_VoteInfoEvent($proposal_id: int, $voter: int, $proposer: int, $agree: bool, $vote: int): $0_obc_dao_VoteInfoEvent;
function {:inline} $Update'$0_obc_dao_VoteInfoEvent'_proposal_id(s: $0_obc_dao_VoteInfoEvent, x: int): $0_obc_dao_VoteInfoEvent {
    $0_obc_dao_VoteInfoEvent(x, $voter#$0_obc_dao_VoteInfoEvent(s), $proposer#$0_obc_dao_VoteInfoEvent(s), $agree#$0_obc_dao_VoteInfoEvent(s), $vote#$0_obc_dao_VoteInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteInfoEvent'_voter(s: $0_obc_dao_VoteInfoEvent, x: int): $0_obc_dao_VoteInfoEvent {
    $0_obc_dao_VoteInfoEvent($proposal_id#$0_obc_dao_VoteInfoEvent(s), x, $proposer#$0_obc_dao_VoteInfoEvent(s), $agree#$0_obc_dao_VoteInfoEvent(s), $vote#$0_obc_dao_VoteInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteInfoEvent'_proposer(s: $0_obc_dao_VoteInfoEvent, x: int): $0_obc_dao_VoteInfoEvent {
    $0_obc_dao_VoteInfoEvent($proposal_id#$0_obc_dao_VoteInfoEvent(s), $voter#$0_obc_dao_VoteInfoEvent(s), x, $agree#$0_obc_dao_VoteInfoEvent(s), $vote#$0_obc_dao_VoteInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteInfoEvent'_agree(s: $0_obc_dao_VoteInfoEvent, x: bool): $0_obc_dao_VoteInfoEvent {
    $0_obc_dao_VoteInfoEvent($proposal_id#$0_obc_dao_VoteInfoEvent(s), $voter#$0_obc_dao_VoteInfoEvent(s), $proposer#$0_obc_dao_VoteInfoEvent(s), x, $vote#$0_obc_dao_VoteInfoEvent(s))
}
function {:inline} $Update'$0_obc_dao_VoteInfoEvent'_vote(s: $0_obc_dao_VoteInfoEvent, x: int): $0_obc_dao_VoteInfoEvent {
    $0_obc_dao_VoteInfoEvent($proposal_id#$0_obc_dao_VoteInfoEvent(s), $voter#$0_obc_dao_VoteInfoEvent(s), $proposer#$0_obc_dao_VoteInfoEvent(s), $agree#$0_obc_dao_VoteInfoEvent(s), x)
}
function $IsValid'$0_obc_dao_VoteInfoEvent'(s: $0_obc_dao_VoteInfoEvent): bool {
    $IsValid'u64'($proposal_id#$0_obc_dao_VoteInfoEvent(s))
      && $IsValid'address'($voter#$0_obc_dao_VoteInfoEvent(s))
      && $IsValid'address'($proposer#$0_obc_dao_VoteInfoEvent(s))
      && $IsValid'bool'($agree#$0_obc_dao_VoteInfoEvent(s))
      && $IsValid'u64'($vote#$0_obc_dao_VoteInfoEvent(s))
}
function {:inline} $IsEqual'$0_obc_dao_VoteInfoEvent'(s1: $0_obc_dao_VoteInfoEvent, s2: $0_obc_dao_VoteInfoEvent): bool {
    s1 == s2
}

// fun obc_dao::add_admin [verification] at ./sources/obc_dao.move:956:5+166
procedure {:timeLimit 40} $0_obc_dao_add_admin$verify(_$t0: $0_obc_dao_manager_OBCDaoManageKey, _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:956:5+1
    assume {:print "$at(4,28955,28956)"} true;
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:956:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:956:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[_]($t0) at ./sources/obc_dao.move:956:5+1
    assume {:print "$track_local(26,35,0):", $t0} $t0 == $t0;

    // trace_local[new_admin]($t1) at ./sources/obc_dao.move:956:5+1
    assume {:print "$track_local(26,35,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:956:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,35,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // obc_dao_manager::new($t1, $t2) on_abort goto L2 with $t3 at ./sources/obc_dao.move:961:9+36
    assume {:print "$at(4,29078,29114)"} true;
    call $t2 := $0_obc_dao_manager_new($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,29078,29114)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,35):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:961:45+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,35,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:962:5+1
    assume {:print "$at(4,29120,29121)"} true;
L1:

    // return () at ./sources/obc_dao.move:962:5+1
    assume {:print "$at(4,29120,29121)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/obc_dao.move:962:5+1
L2:

    // abort($t3) at ./sources/obc_dao.move:962:5+1
    assume {:print "$at(4,29120,29121)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao::cast_vote [verification] at ./sources/obc_dao.move:377:5+1718
procedure {:timeLimit 40} $0_obc_dao_cast_vote$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $0_voting_pool_VotingObc, _$t2: int, _$t3: $2_clock_Clock, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_clock_Clock;
    var $t6: bool;
    var $t7: $0_obc_dao_Vote;
    var $t8: int;
    var $t9: int;
    var $t10: $0_voting_pool_VotingObc;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: $0_obc_dao_Proposal;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: $2_tx_context_TxContext;
    var $t28: int;
    var $t29: $2_object_UID;
    var $t30: $0_obc_dao_ProposalInfo;
    var $t31: int;
    var $t32: $0_obc_dao_ProposalInfo;
    var $t33: int;
    var $t34: $0_obc_dao_Vote;
    var $t35: $0_obc_dao_ProposalInfo;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation ($0_obc_dao_ProposalInfo);
    var $t39: $Mutation (int);
    var $t40: $0_obc_dao_ProposalInfo;
    var $t41: int;
    var $t42: int;
    var $t43: $Mutation ($0_obc_dao_ProposalInfo);
    var $t44: $Mutation (int);
    var $t45: $0_obc_dao_ProposalInfo;
    var $t46: int;
    var $t47: $0_obc_dao_ProposalInfo;
    var $t48: int;
    var $t49: $0_obc_dao_VoteChangedEvent;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $0_voting_pool_VotingObc;
    var $t2: int;
    var $t3: $2_clock_Clock;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:377:5+1
    assume {:print "$at(4,11567,11568)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:377:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:377:5+1
    assume $IsValid'u8'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:377:5+1
    assume $IsValid'$2_clock_Clock'($t3);

    // assume WellFormed($t4) at ./sources/obc_dao.move:377:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:377:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,6,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[coin]($t1) at ./sources/obc_dao.move:377:5+1
    assume {:print "$track_local(26,6,1):", $t1} $t1 == $t1;

    // trace_local[agreeInt]($t2) at ./sources/obc_dao.move:377:5+1
    assume {:print "$track_local(26,6,2):", $t2} $t2 == $t2;

    // trace_local[clock]($t3) at ./sources/obc_dao.move:377:5+1
    assume {:print "$track_local(26,6,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:377:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t12 := 1 at ./sources/obc_dao.move:384:33+1
    assume {:print "$at(4,11769,11770)"} true;
    $t12 := 1;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t2, $t12) at ./sources/obc_dao.move:384:30+2
    $t13 := $IsEqual'u8'($t2, $t12);

    // trace_local[agree#1#0]($t13) at ./sources/obc_dao.move:384:13+5
    assume {:print "$track_local(26,6,6):", $t13} $t13 == $t13;

    // $t14 := read_ref($t0) at ./sources/obc_dao.move:387:39+16
    assume {:print "$at(4,11821,11837)"} true;
    $t14 := $Dereference($t0);

    // $t15 := obc_dao::proposal_state($t14, $t3) on_abort goto L11 with $t16 at ./sources/obc_dao.move:387:25+30
    call $t15 := $0_obc_dao_proposal_state($t14, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,11807,11837)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // $t17 := 2 at ./sources/obc_dao.move:389:30+6
    assume {:print "$at(4,11932,11938)"} true;
    $t17 := 2;
    assume $IsValid'u8'($t17);

    // $t18 := ==($t15, $t17) at ./sources/obc_dao.move:389:27+2
    $t18 := $IsEqual'u8'($t15, $t17);

    // if ($t18) goto L1 else goto L0 at ./sources/obc_dao.move:389:13+54
    if ($t18) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:389:13+54
L1:

    // goto L2 at ./sources/obc_dao.move:389:13+54
    assume {:print "$at(4,11915,11969)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:389:13+54
L0:

    // destroy($t0) at ./sources/obc_dao.move:389:13+54
    assume {:print "$at(4,11915,11969)"} true;

    // destroy($t4) at ./sources/obc_dao.move:389:13+54

    // $t19 := 1403 at ./sources/obc_dao.move:389:38+28
    $t19 := 1403;
    assume $IsValid'u64'($t19);

    // trace_abort($t19) at ./sources/obc_dao.move:389:13+54
    assume {:print "$at(4,11915,11969)"} true;
    assume {:print "$track_abort(26,6):", $t19} $t19 == $t19;

    // $t16 := move($t19) at ./sources/obc_dao.move:389:13+54
    $t16 := $t19;

    // goto L11 at ./sources/obc_dao.move:389:13+54
    goto L11;

    // label L2 at ./sources/obc_dao.move:392:58+5
    assume {:print "$at(4,12040,12045)"} true;
L2:

    // $t20 := voting_pool::voting_obc_amount($t1) on_abort goto L11 with $t16 at ./sources/obc_dao.move:392:27+37
    assume {:print "$at(4,12009,12046)"} true;
    call $t20 := $0_voting_pool_voting_obc_amount($t1);
    if ($abort_flag) {
        assume {:print "$at(4,12009,12046)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[vote_amount#1#0]($t20) at ./sources/obc_dao.move:392:13+11
    assume {:print "$track_local(26,6,11):", $t20} $t20 == $t20;

    // $t21 := 0 at ./sources/obc_dao.move:394:31+1
    assume {:print "$at(4,12088,12089)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := <=($t20, $t21) at ./sources/obc_dao.move:394:28+2
    call $t22 := $Le($t20, $t21);

    // if ($t22) goto L4 else goto L3 at ./sources/obc_dao.move:394:13+90
    if ($t22) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:395:17+36
    assume {:print "$at(4,12109,12145)"} true;
L4:

    // destroy($t0) at ./sources/obc_dao.move:395:17+36
    assume {:print "$at(4,12109,12145)"} true;

    // destroy($t4) at ./sources/obc_dao.move:395:17+36

    // $t23 := 1411 at ./sources/obc_dao.move:395:32+20
    $t23 := 1411;
    assume $IsValid'u64'($t23);

    // trace_abort($t23) at ./sources/obc_dao.move:395:17+36
    assume {:print "$at(4,12109,12145)"} true;
    assume {:print "$track_abort(26,6):", $t23} $t23 == $t23;

    // $t16 := move($t23) at ./sources/obc_dao.move:395:17+36
    $t16 := $t23;

    // goto L11 at ./sources/obc_dao.move:395:17+36
    goto L11;

    // label L3 at ./sources/obc_dao.move:397:16+11
    assume {:print "$at(4,12177,12188)"} true;
L3:

    // $t24 := voting_pool::voting_obc_amount($t1) on_abort goto L11 with $t16 at ./sources/obc_dao.move:397:30+37
    assume {:print "$at(4,12191,12228)"} true;
    call $t24 := $0_voting_pool_voting_obc_amount($t1);
    if ($abort_flag) {
        assume {:print "$at(4,12191,12228)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // $t25 := >($t20, $t24) at ./sources/obc_dao.move:397:28+1
    call $t25 := $Gt($t20, $t24);

    // if ($t25) goto L6 else goto L5 at ./sources/obc_dao.move:397:13+124
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at ./sources/obc_dao.move:398:17+36
    assume {:print "$at(4,12247,12283)"} true;
L6:

    // destroy($t0) at ./sources/obc_dao.move:398:17+36
    assume {:print "$at(4,12247,12283)"} true;

    // destroy($t4) at ./sources/obc_dao.move:398:17+36

    // $t26 := 1411 at ./sources/obc_dao.move:398:32+20
    $t26 := 1411;
    assume $IsValid'u64'($t26);

    // trace_abort($t26) at ./sources/obc_dao.move:398:17+36
    assume {:print "$at(4,12247,12283)"} true;
    assume {:print "$track_abort(26,6):", $t26} $t26 == $t26;

    // $t16 := move($t26) at ./sources/obc_dao.move:398:17+36
    $t16 := $t26;

    // goto L11 at ./sources/obc_dao.move:398:17+36
    goto L11;

    // label L5 at ./sources/obc_dao.move:402:41+3
    assume {:print "$at(4,12352,12355)"} true;
L5:

    // $t27 := read_ref($t4) at ./sources/obc_dao.move:402:41+3
    assume {:print "$at(4,12352,12355)"} true;
    $t27 := $Dereference($t4);

    // $t28 := tx_context::sender($t27) on_abort goto L11 with $t16 at ./sources/obc_dao.move:402:22+23
    call $t28 := $2_tx_context_sender($t27);
    if ($abort_flag) {
        assume {:print "$at(4,12333,12356)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[sender#1#0]($t28) at ./sources/obc_dao.move:402:13+6
    assume {:print "$track_local(26,6,8):", $t28} $t28 == $t28;

    // trace_local[voteCoin#1#0]($t1) at ./sources/obc_dao.move:406:17+8
    assume {:print "$at(4,12404,12412)"} true;
    assume {:print "$track_local(26,6,10):", $t1} $t1 == $t1;

    // $t29 := object::new($t4) on_abort goto L11 with $t16 at ./sources/obc_dao.move:409:21+16
    assume {:print "$at(4,12475,12491)"} true;
    call $t29,$t4 := $2_object_new($t4);
    if ($abort_flag) {
        assume {:print "$at(4,12475,12491)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // $t30 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:410:22+17
    assume {:print "$at(4,12514,12531)"} true;
    $t30 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t31 := get_field<obc_dao::ProposalInfo>.pid($t30) at ./sources/obc_dao.move:410:22+21
    $t31 := $pid#$0_obc_dao_ProposalInfo($t30);

    // $t32 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:411:27+17
    assume {:print "$at(4,12563,12580)"} true;
    $t32 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t33 := get_field<obc_dao::ProposalInfo>.proposer($t32) at ./sources/obc_dao.move:411:27+26
    $t33 := $proposer#$0_obc_dao_ProposalInfo($t32);

    // $t34 := pack obc_dao::Vote($t29, $t31, $t33, $t1, $t13) at ./sources/obc_dao.move:408:27+211
    assume {:print "$at(4,12448,12659)"} true;
    $t34 := $0_obc_dao_Vote($t29, $t31, $t33, $t1, $t13);

    // trace_local[my_vote#1#0]($t34) at ./sources/obc_dao.move:408:17+7
    assume {:print "$track_local(26,6,7):", $t34} $t34 == $t34;

    // if ($t13) goto L8 else goto L7 at ./sources/obc_dao.move:416:13+233
    assume {:print "$at(4,12674,12907)"} true;
    if ($t13) { goto L8; } else { goto L7; }

    // label L8 at ./sources/obc_dao.move:417:47+8
    assume {:print "$at(4,12733,12741)"} true;
L8:

    // $t35 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:417:47+17
    assume {:print "$at(4,12733,12750)"} true;
    $t35 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t36 := get_field<obc_dao::ProposalInfo>.for_votes($t35) at ./sources/obc_dao.move:417:47+27
    $t36 := $for_votes#$0_obc_dao_ProposalInfo($t35);

    // $t37 := +($t36, $t20) on_abort goto L11 with $t16 at ./sources/obc_dao.move:417:75+1
    call $t37 := $AddU64($t36, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,12761,12762)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // $t38 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:417:17+17
    $t38 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t39 := borrow_field<obc_dao::ProposalInfo>.for_votes($t38) at ./sources/obc_dao.move:417:17+27
    $t39 := $ChildMutation($t38, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t38)));

    // write_ref($t39, $t37) at ./sources/obc_dao.move:417:17+71
    $t39 := $UpdateMutation($t39, $t37);

    // write_back[Reference($t38).for_votes (u64)]($t39) at ./sources/obc_dao.move:417:17+71
    $t38 := $UpdateMutation($t38, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t38), $Dereference($t39)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t38) at ./sources/obc_dao.move:417:17+71
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t38)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:417:17+71
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,6,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L9 at ./sources/obc_dao.move:417:88+1
    goto L9;

    // label L7 at ./sources/obc_dao.move:419:51+8
    assume {:print "$at(4,12847,12855)"} true;
L7:

    // $t40 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:419:51+17
    assume {:print "$at(4,12847,12864)"} true;
    $t40 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t41 := get_field<obc_dao::ProposalInfo>.against_votes($t40) at ./sources/obc_dao.move:419:51+31
    $t41 := $against_votes#$0_obc_dao_ProposalInfo($t40);

    // $t42 := +($t41, $t20) on_abort goto L11 with $t16 at ./sources/obc_dao.move:419:83+1
    call $t42 := $AddU64($t41, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,12879,12880)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // $t43 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:419:17+17
    $t43 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t44 := borrow_field<obc_dao::ProposalInfo>.against_votes($t43) at ./sources/obc_dao.move:419:17+31
    $t44 := $ChildMutation($t43, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t43)));

    // write_ref($t44, $t42) at ./sources/obc_dao.move:419:17+79
    $t44 := $UpdateMutation($t44, $t42);

    // write_back[Reference($t43).against_votes (u64)]($t44) at ./sources/obc_dao.move:419:17+79
    $t43 := $UpdateMutation($t43, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t43), $Dereference($t44)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t43) at ./sources/obc_dao.move:419:17+79
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t43)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:419:17+79
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,6,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L9 at ./sources/obc_dao.move:421:32+7
    assume {:print "$at(4,12940,12947)"} true;
L9:

    // transfer::transfer<obc_dao::Vote>($t34, $t28) on_abort goto L11 with $t16 at ./sources/obc_dao.move:421:13+35
    assume {:print "$at(4,12921,12956)"} true;
    call $2_transfer_transfer'$0_obc_dao_Vote'($t34, $t28);
    if ($abort_flag) {
        assume {:print "$at(4,12921,12956)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[total_voted#1#0]($t20) at ./sources/obc_dao.move:404:13+11
    assume {:print "$at(4,12371,12382)"} true;
    assume {:print "$track_local(26,6,9):", $t20} $t20 == $t20;

    // $t45 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:430:30+17
    assume {:print "$at(4,13098,13115)"} true;
    $t45 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t46 := get_field<obc_dao::ProposalInfo>.pid($t45) at ./sources/obc_dao.move:430:30+21
    $t46 := $pid#$0_obc_dao_ProposalInfo($t45);

    // $t47 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:432:27+17
    assume {:print "$at(4,13178,13195)"} true;
    $t47 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t48 := get_field<obc_dao::ProposalInfo>.proposer($t47) at ./sources/obc_dao.move:432:27+26
    $t48 := $proposer#$0_obc_dao_ProposalInfo($t47);

    // $t49 := pack obc_dao::VoteChangedEvent($t46, $t28, $t48, $t13, $t20) at ./sources/obc_dao.move:429:13+226
    assume {:print "$at(4,13051,13277)"} true;
    $t49 := $0_obc_dao_VoteChangedEvent($t46, $t28, $t48, $t13, $t20);

    // event::emit<obc_dao::VoteChangedEvent>($t49) on_abort goto L11 with $t16 at ./sources/obc_dao.move:428:9+252
    assume {:print "$at(4,13026,13278)"} true;
    call $2_event_emit'$0_obc_dao_VoteChangedEvent'($t49);
    if ($abort_flag) {
        assume {:print "$at(4,13026,13278)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(26,6):", $t16} $t16 == $t16;
        goto L11;
    }

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:435:15+1
    assume {:print "$at(4,13278,13279)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,6,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:435:15+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L10 at ./sources/obc_dao.move:436:5+1
    assume {:print "$at(4,13284,13285)"} true;
L10:

    // return () at ./sources/obc_dao.move:436:5+1
    assume {:print "$at(4,13284,13285)"} true;
    $ret0 := $t0;
    $ret1 := $t4;
    return;

    // label L11 at ./sources/obc_dao.move:436:5+1
L11:

    // abort($t16) at ./sources/obc_dao.move:436:5+1
    assume {:print "$at(4,13284,13285)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun obc_dao::change_vote [verification] at ./sources/obc_dao.move:441:5+1140
procedure {:timeLimit 40} $0_obc_dao_change_vote$verify(_$t0: $Mutation ($0_obc_dao_Vote), _$t1: $Mutation ($0_obc_dao_Proposal), _$t2: bool, _$t3: $2_clock_Clock, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Vote), $ret1: $Mutation ($0_obc_dao_Proposal), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_clock_Clock;
    var $t6: int;
    var $t7: int;
    var $t8: $0_obc_dao_Proposal;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $2_tx_context_TxContext;
    var $t15: int;
    var $t16: int;
    var $t17: $0_obc_dao_ProposalInfo;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $0_obc_dao_ProposalInfo;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: $0_obc_dao_ProposalInfo;
    var $t30: int;
    var $t31: $0_obc_dao_ProposalInfo;
    var $t32: int;
    var $t33: $0_obc_dao_VoteChangedEvent;
    var $t0: $Mutation ($0_obc_dao_Vote);
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $t2: bool;
    var $t3: $2_clock_Clock;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:441:5+1
    assume {:print "$at(4,13352,13353)"} true;
    assume $IsValid'$0_obc_dao_Vote'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:441:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t1));

    // assume WellFormed($t2) at ./sources/obc_dao.move:441:5+1
    assume $IsValid'bool'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:441:5+1
    assume $IsValid'$2_clock_Clock'($t3);

    // assume WellFormed($t4) at ./sources/obc_dao.move:441:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:441:5+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,7,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:441:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,7,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[agree]($t2) at ./sources/obc_dao.move:441:5+1
    assume {:print "$track_local(26,7,2):", $t2} $t2 == $t2;

    // trace_local[clock]($t3) at ./sources/obc_dao.move:441:5+1
    assume {:print "$track_local(26,7,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:441:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,7,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := read_ref($t1) at ./sources/obc_dao.move:449:39+17
    assume {:print "$at(4,13574,13591)"} true;
    $t8 := $Dereference($t1);

    // $t9 := obc_dao::proposal_state($t8, $t3) on_abort goto L15 with $t10 at ./sources/obc_dao.move:449:25+31
    call $t9 := $0_obc_dao_proposal_state($t8, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,13560,13591)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,7):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t11 := 2 at ./sources/obc_dao.move:451:30+6
    assume {:print "$at(4,13689,13695)"} true;
    $t11 := 2;
    assume $IsValid'u8'($t11);

    // $t12 := ==($t9, $t11) at ./sources/obc_dao.move:451:27+2
    $t12 := $IsEqual'u8'($t9, $t11);

    // if ($t12) goto L1 else goto L0 at ./sources/obc_dao.move:451:13+54
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:451:13+54
L1:

    // goto L2 at ./sources/obc_dao.move:451:13+54
    assume {:print "$at(4,13672,13726)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:451:13+54
L0:

    // destroy($t1) at ./sources/obc_dao.move:451:13+54
    assume {:print "$at(4,13672,13726)"} true;

    // destroy($t0) at ./sources/obc_dao.move:451:13+54

    // destroy($t4) at ./sources/obc_dao.move:451:13+54

    // $t13 := 1403 at ./sources/obc_dao.move:451:38+28
    $t13 := 1403;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/obc_dao.move:451:13+54
    assume {:print "$at(4,13672,13726)"} true;
    assume {:print "$track_abort(26,7):", $t13} $t13 == $t13;

    // $t10 := move($t13) at ./sources/obc_dao.move:451:13+54
    $t10 := $t13;

    // goto L15 at ./sources/obc_dao.move:451:13+54
    goto L15;

    // label L2 at ./sources/obc_dao.move:456:41+3
    assume {:print "$at(4,13807,13810)"} true;
L2:

    // $t14 := read_ref($t4) at ./sources/obc_dao.move:456:41+3
    assume {:print "$at(4,13807,13810)"} true;
    $t14 := $Dereference($t4);

    // $t15 := tx_context::sender($t14) on_abort goto L15 with $t10 at ./sources/obc_dao.move:456:22+23
    call $t15 := $2_tx_context_sender($t14);
    if ($abort_flag) {
        assume {:print "$at(4,13788,13811)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,7):", $t10} $t10 == $t10;
        goto L15;
    }

    // trace_local[sender#1#0]($t15) at ./sources/obc_dao.move:456:13+6
    assume {:print "$track_local(26,7,6):", $t15} $t15 == $t15;

    // $t16 := get_field<obc_dao::Vote>.proposer($t0) at ./sources/obc_dao.move:459:21+16
    assume {:print "$at(4,13872,13888)"} true;
    $t16 := $proposer#$0_obc_dao_Vote($Dereference($t0));

    // $t17 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:459:41+17
    $t17 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t18 := get_field<obc_dao::ProposalInfo>.proposer($t17) at ./sources/obc_dao.move:459:41+26
    $t18 := $proposer#$0_obc_dao_ProposalInfo($t17);

    // $t19 := ==($t16, $t18) at ./sources/obc_dao.move:459:38+2
    $t19 := $IsEqual'address'($t16, $t18);

    // if ($t19) goto L4 else goto L12 at ./sources/obc_dao.move:459:13+80
    if ($t19) { goto L4; } else { goto L12; }

    // label L4 at ./sources/obc_dao.move:459:13+80
L4:

    // goto L5 at ./sources/obc_dao.move:459:13+80
    assume {:print "$at(4,13864,13944)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:459:13+80
L3:

    // destroy($t1) at ./sources/obc_dao.move:459:13+80
    assume {:print "$at(4,13864,13944)"} true;

    // destroy($t0) at ./sources/obc_dao.move:459:13+80

    // $t20 := 1405 at ./sources/obc_dao.move:459:69+23
    $t20 := 1405;
    assume $IsValid'u64'($t20);

    // trace_abort($t20) at ./sources/obc_dao.move:459:13+80
    assume {:print "$at(4,13864,13944)"} true;
    assume {:print "$track_abort(26,7):", $t20} $t20 == $t20;

    // $t10 := move($t20) at ./sources/obc_dao.move:459:13+80
    $t10 := $t20;

    // goto L15 at ./sources/obc_dao.move:459:13+80
    goto L15;

    // label L5 at ./sources/obc_dao.move:460:21+7
    assume {:print "$at(4,13966,13973)"} true;
L5:

    // $t21 := get_field<obc_dao::Vote>.vid($t0) at ./sources/obc_dao.move:460:21+11
    assume {:print "$at(4,13966,13977)"} true;
    $t21 := $vid#$0_obc_dao_Vote($Dereference($t0));

    // $t22 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:460:36+17
    $t22 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t23 := get_field<obc_dao::ProposalInfo>.pid($t22) at ./sources/obc_dao.move:460:36+21
    $t23 := $pid#$0_obc_dao_ProposalInfo($t22);

    // $t24 := ==($t21, $t23) at ./sources/obc_dao.move:460:33+2
    $t24 := $IsEqual'u64'($t21, $t23);

    // if ($t24) goto L7 else goto L13 at ./sources/obc_dao.move:460:13+73
    if ($t24) { goto L7; } else { goto L13; }

    // label L7 at ./sources/obc_dao.move:460:13+73
L7:

    // goto L8 at ./sources/obc_dao.move:460:13+73
    assume {:print "$at(4,13958,14031)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao.move:460:13+73
L6:

    // destroy($t1) at ./sources/obc_dao.move:460:13+73
    assume {:print "$at(4,13958,14031)"} true;

    // destroy($t0) at ./sources/obc_dao.move:460:13+73

    // $t25 := 1410 at ./sources/obc_dao.move:460:59+26
    $t25 := 1410;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at ./sources/obc_dao.move:460:13+73
    assume {:print "$at(4,13958,14031)"} true;
    assume {:print "$track_abort(26,7):", $t25} $t25 == $t25;

    // $t10 := move($t25) at ./sources/obc_dao.move:460:13+73
    $t10 := $t25;

    // goto L15 at ./sources/obc_dao.move:460:13+73
    goto L15;

    // label L8 at ./sources/obc_dao.move:464:13+7
    assume {:print "$at(4,14082,14089)"} true;
L8:

    // $t26 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:464:13+13
    assume {:print "$at(4,14082,14095)"} true;
    $t26 := $agree#$0_obc_dao_Vote($Dereference($t0));

    // $t27 := !=($t26, $t2) at ./sources/obc_dao.move:464:27+2
    $t27 := !$IsEqual'bool'($t26, $t2);

    // if ($t27) goto L10 else goto L9 at ./sources/obc_dao.move:464:9+407
    if ($t27) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:465:44+7
    assume {:print "$at(4,14151,14158)"} true;
L10:

    // $t28 := obc_dao::do_flip_vote($t0, $t1) on_abort goto L15 with $t10 at ./sources/obc_dao.move:465:31+31
    assume {:print "$at(4,14138,14169)"} true;
    call $t28,$t0,$t1 := $0_obc_dao_do_flip_vote($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,14138,14169)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,7):", $t10} $t10 == $t10;
        goto L15;
    }

    // trace_local[total_voted#1#0]($t28) at ./sources/obc_dao.move:465:17+11
    assume {:print "$track_local(26,7,7):", $t28} $t28 == $t28;

    // $t29 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:469:34+17
    assume {:print "$at(4,14289,14306)"} true;
    $t29 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t30 := get_field<obc_dao::ProposalInfo>.pid($t29) at ./sources/obc_dao.move:469:34+21
    $t30 := $pid#$0_obc_dao_ProposalInfo($t29);

    // $t31 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:471:31+17
    assume {:print "$at(4,14377,14394)"} true;
    $t31 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t32 := get_field<obc_dao::ProposalInfo>.proposer($t31) at ./sources/obc_dao.move:471:31+26
    $t32 := $proposer#$0_obc_dao_ProposalInfo($t31);

    // $t33 := pack obc_dao::VoteChangedEvent($t30, $t15, $t32, $t2, $t28) at ./sources/obc_dao.move:468:17+234
    assume {:print "$at(4,14238,14472)"} true;
    $t33 := $0_obc_dao_VoteChangedEvent($t30, $t15, $t32, $t2, $t28);

    // event::emit<obc_dao::VoteChangedEvent>($t33) on_abort goto L15 with $t10 at ./sources/obc_dao.move:467:13+264
    assume {:print "$at(4,14209,14473)"} true;
    call $2_event_emit'$0_obc_dao_VoteChangedEvent'($t33);
    if ($abort_flag) {
        assume {:print "$at(4,14209,14473)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,7):", $t10} $t10 == $t10;
        goto L15;
    }

    // goto L11 at ./sources/obc_dao.move:473:42+1
    assume {:print "$at(4,14473,14474)"} true;
    goto L11;

    // label L9 at ./sources/obc_dao.move:464:9+407
    assume {:print "$at(4,14078,14485)"} true;
L9:

    // destroy($t1) at ./sources/obc_dao.move:464:9+407
    assume {:print "$at(4,14078,14485)"} true;

    // destroy($t0) at ./sources/obc_dao.move:464:9+407

    // label L11 at ./sources/obc_dao.move:475:10+1
    assume {:print "$at(4,14485,14486)"} true;
L11:

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:475:10+1
    assume {:print "$at(4,14485,14486)"} true;
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,7,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:475:10+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,7,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:475:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,7,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L14 at ./sources/obc_dao.move:475:10+1
    goto L14;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t4) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L13 at <internal>:1:1+10
L13:

    // destroy($t4) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L14 at ./sources/obc_dao.move:476:5+1
    assume {:print "$at(4,14491,14492)"} true;
L14:

    // return () at ./sources/obc_dao.move:476:5+1
    assume {:print "$at(4,14491,14492)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t4;
    return;

    // label L15 at ./sources/obc_dao.move:476:5+1
L15:

    // abort($t10) at ./sources/obc_dao.move:476:5+1
    assume {:print "$at(4,14491,14492)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun obc_dao::create_dao [verification] at ./sources/obc_dao.move:232:5+1656
procedure {:timeLimit 40} $0_obc_dao_create_dao$verify(_$t0: Vec (int), _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $0_obc_dao_DaoConfig;
    var $t3: $0_obc_dao_DaoGlobalInfo;
    var $t4: int;
    var $t5: $0_voting_pool_VotingPool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $0_obc_dao_DaoConfig;
    var $t11: int;
    var $t12: $2_object_UID;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $0_obc_dao_ProposalCreatedEvent;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: $0_obc_dao_VoteChangedEvent;
    var $t25: $0_obc_dao_DaoGlobalInfo;
    var $t26: $0_voting_pool_VotingPool;
    var $t27: int;
    var $t28: int;
    var $t29: $2_object_UID;
    var $t30: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t31: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t32: $2_vec_map_VecMap'u64_u64';
    var $t33: $0_obc_dao_Dao;
    var $t0: Vec (int);
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:232:5+1
    assume {:print "$at(4,7035,7036)"} true;
    assume $IsValid'vec'address''($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:232:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[admins]($t0) at ./sources/obc_dao.move:232:5+1
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:232:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := 259200000 at ./sources/obc_dao.move:237:40+18
    assume {:print "$at(4,7274,7292)"} true;
    $t6 := 259200000;
    assume $IsValid'u64'($t6);

    // $t7 := 604800000 at ./sources/obc_dao.move:238:53+19
    assume {:print "$at(4,7346,7365)"} true;
    $t7 := 604800000;
    assume $IsValid'u64'($t7);

    // $t8 := 50 at ./sources/obc_dao.move:239:53+24
    assume {:print "$at(4,7419,7443)"} true;
    $t8 := 50;
    assume $IsValid'u8'($t8);

    // $t9 := 604800000 at ./sources/obc_dao.move:240:53+24
    assume {:print "$at(4,7497,7521)"} true;
    $t9 := 604800000;
    assume $IsValid'u64'($t9);

    // $t10 := obc_dao::new_dao_config($t6, $t7, $t8, $t9) on_abort goto L2 with $t11 at ./sources/obc_dao.move:237:25+263
    assume {:print "$at(4,7259,7522)"} true;
    call $t10 := $0_obc_dao_new_dao_config($t6, $t7, $t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(4,7259,7522)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[daoConfig#1#0]($t10) at ./sources/obc_dao.move:237:13+9
    assume {:print "$track_local(26,2,2):", $t10} $t10 == $t10;

    // $t12 := object::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:244:17+16
    assume {:print "$at(4,7579,7595)"} true;
    call $t12,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,7579,7595)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t13 := 0 at ./sources/obc_dao.move:245:31+1
    assume {:print "$at(4,7627,7628)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := 0 at ./sources/obc_dao.move:246:29+1
    assume {:print "$at(4,7658,7659)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := 0x0 at ./sources/obc_dao.move:248:39+21
    assume {:print "$at(4,7756,7777)"} true;
    $t15 := 0;
    assume $IsValid'address'($t15);

    // $t16 := 0 at ./sources/obc_dao.move:249:30+1
    assume {:print "$at(4,7808,7809)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := 0x0 at ./sources/obc_dao.move:250:27+21
    assume {:print "$at(4,7837,7858)"} true;
    $t17 := 0;
    assume $IsValid'address'($t17);

    // $t18 := pack obc_dao::ProposalCreatedEvent($t15, $t16, $t17) at ./sources/obc_dao.move:247:36+177
    assume {:print "$at(4,7696,7873)"} true;
    $t18 := $0_obc_dao_ProposalCreatedEvent($t15, $t16, $t17);

    // $t19 := 0 at ./sources/obc_dao.move:253:30+1
    assume {:print "$at(4,7954,7955)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := 0x0 at ./sources/obc_dao.move:254:24+21
    assume {:print "$at(4,7980,8001)"} true;
    $t20 := 0;
    assume $IsValid'address'($t20);

    // $t21 := 0x0 at ./sources/obc_dao.move:255:27+21
    assume {:print "$at(4,8029,8050)"} true;
    $t21 := 0;
    assume $IsValid'address'($t21);

    // $t22 := false at ./sources/obc_dao.move:256:24+5
    assume {:print "$at(4,8075,8080)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // $t23 := 0 at ./sources/obc_dao.move:257:23+1
    assume {:print "$at(4,8104,8105)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := pack obc_dao::VoteChangedEvent($t19, $t20, $t21, $t22, $t23) at ./sources/obc_dao.move:252:33+213
    assume {:print "$at(4,7907,8120)"} true;
    $t24 := $0_obc_dao_VoteChangedEvent($t19, $t20, $t21, $t22, $t23);

    // $t25 := pack obc_dao::DaoGlobalInfo($t12, $t13, $t14, $t18, $t24) at ./sources/obc_dao.move:243:23+582
    assume {:print "$at(4,7548,8130)"} true;
    $t25 := $0_obc_dao_DaoGlobalInfo($t12, $t13, $t14, $t18, $t24);

    // trace_local[daoInfo#1#0]($t25) at ./sources/obc_dao.move:243:13+7
    assume {:print "$track_local(26,2,3):", $t25} $t25 == $t25;

    // $t26 := voting_pool::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:261:26+21
    assume {:print "$at(4,8158,8179)"} true;
    call $t26,$t1 := $0_voting_pool_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,8158,8179)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[votingPool#1#0]($t26) at ./sources/obc_dao.move:261:13+10
    assume {:print "$track_local(26,2,5):", $t26} $t26 == $t26;

    // $t27 := 0 at ./sources/obc_dao.move:262:49+1
    assume {:print "$at(4,8229,8230)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := vector::borrow<address>($t0, $t27) on_abort goto L2 with $t11 at ./sources/obc_dao.move:262:25+26
    call $t28 := $1_vector_borrow'address'($t0, $t27);
    if ($abort_flag) {
        assume {:print "$at(4,8205,8231)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[rootAdmin#1#0]($t28) at ./sources/obc_dao.move:262:13+9
    assume {:print "$track_local(26,2,4):", $t28} $t28 == $t28;

    // $t29 := object::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:264:17+16
    assume {:print "$at(4,8276,8292)"} true;
    call $t29,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,8276,8292)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t30 := vec_map::empty<u64, obc_dao::ProposalInfo>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:268:29+16
    assume {:print "$at(4,8468,8484)"} true;
    call $t30 := $2_vec_map_empty'u64_$0_obc_dao_ProposalInfo'();
    if ($abort_flag) {
        assume {:print "$at(4,8468,8484)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t31 := vec_map::empty<u64, obc_dao::OBCDaoAction>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:269:27+16
    assume {:print "$at(4,8512,8528)"} true;
    call $t31 := $2_vec_map_empty'u64_$0_obc_dao_OBCDaoAction'();
    if ($abort_flag) {
        assume {:print "$at(4,8512,8528)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t32 := vec_map::empty<u64, u64>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:270:26+16
    assume {:print "$at(4,8555,8571)"} true;
    call $t32 := $2_vec_map_empty'u64_u64'();
    if ($abort_flag) {
        assume {:print "$at(4,8555,8571)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t33 := pack obc_dao::Dao($t29, $t28, $t10, $t25, $t30, $t31, $t32, $t26) at ./sources/obc_dao.move:263:23+351
    assume {:print "$at(4,8255,8606)"} true;
    $t33 := $0_obc_dao_Dao($t29, $t28, $t10, $t25, $t30, $t31, $t32, $t26);

    // transfer::share_object<obc_dao::Dao>($t33) on_abort goto L2 with $t11 at ./sources/obc_dao.move:274:9+31
    assume {:print "$at(4,8617,8648)"} true;
    call $2_transfer_share_object'$0_obc_dao_Dao'($t33);
    if ($abort_flag) {
        assume {:print "$at(4,8617,8648)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // obc_dao::set_admins($t0, $t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:276:9+23
    assume {:print "$at(4,8659,8682)"} true;
    call $t1 := $0_obc_dao_set_admins($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,8659,8682)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,2):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:276:32+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:279:5+1
    assume {:print "$at(4,8690,8691)"} true;
L1:

    // return () at ./sources/obc_dao.move:279:5+1
    assume {:print "$at(4,8690,8691)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/obc_dao.move:279:5+1
L2:

    // abort($t11) at ./sources/obc_dao.move:279:5+1
    assume {:print "$at(4,8690,8691)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun obc_dao::create_dao_test [verification] at ./sources/obc_dao.move:1080:5+1451
procedure {:timeLimit 40} $0_obc_dao_create_dao_test$verify(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $0_obc_dao_DaoConfig;
    var $t3: $0_obc_dao_DaoGlobalInfo;
    var $t4: int;
    var $t5: $0_voting_pool_VotingPool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $0_obc_dao_DaoConfig;
    var $t11: int;
    var $t12: $2_object_UID;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $0_obc_dao_ProposalCreatedEvent;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: $0_obc_dao_VoteChangedEvent;
    var $t25: $0_obc_dao_DaoGlobalInfo;
    var $t26: $0_voting_pool_VotingPool;
    var $t27: $2_object_UID;
    var $t28: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t29: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t30: $2_vec_map_VecMap'u64_u64';
    var $t31: $0_obc_dao_Dao;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'$0_voting_pool_VotingPool': $0_voting_pool_VotingPool;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:1080:5+1
    assume {:print "$at(4,33399,33400)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:1080:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[admin]($t0) at ./sources/obc_dao.move:1080:5+1
    assume {:print "$track_local(26,41,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:1080:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,41,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := 259200000 at ./sources/obc_dao.move:1083:40+18
    assume {:print "$at(4,33565,33583)"} true;
    $t6 := 259200000;
    assume $IsValid'u64'($t6);

    // $t7 := 604800000 at ./sources/obc_dao.move:1084:13+19
    assume {:print "$at(4,33597,33616)"} true;
    $t7 := 604800000;
    assume $IsValid'u64'($t7);

    // $t8 := 50 at ./sources/obc_dao.move:1085:13+24
    assume {:print "$at(4,33630,33654)"} true;
    $t8 := 50;
    assume $IsValid'u8'($t8);

    // $t9 := 604800000 at ./sources/obc_dao.move:1086:13+24
    assume {:print "$at(4,33668,33692)"} true;
    $t9 := 604800000;
    assume $IsValid'u64'($t9);

    // $t10 := obc_dao::new_dao_config($t6, $t7, $t8, $t9) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1083:25+143
    assume {:print "$at(4,33550,33693)"} true;
    call $t10 := $0_obc_dao_new_dao_config($t6, $t7, $t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(4,33550,33693)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[daoConfig#1#0]($t10) at ./sources/obc_dao.move:1083:13+9
    assume {:print "$track_local(26,41,2):", $t10} $t10 == $t10;

    // $t12 := object::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1090:17+16
    assume {:print "$at(4,33750,33766)"} true;
    call $t12,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,33750,33766)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t13 := 0 at ./sources/obc_dao.move:1091:31+1
    assume {:print "$at(4,33798,33799)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := 0 at ./sources/obc_dao.move:1092:29+1
    assume {:print "$at(4,33829,33830)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := 0x0 at ./sources/obc_dao.move:1094:39+21
    assume {:print "$at(4,33927,33948)"} true;
    $t15 := 0;
    assume $IsValid'address'($t15);

    // $t16 := 0 at ./sources/obc_dao.move:1095:30+1
    assume {:print "$at(4,33979,33980)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := 0x0 at ./sources/obc_dao.move:1096:27+21
    assume {:print "$at(4,34008,34029)"} true;
    $t17 := 0;
    assume $IsValid'address'($t17);

    // $t18 := pack obc_dao::ProposalCreatedEvent($t15, $t16, $t17) at ./sources/obc_dao.move:1093:36+177
    assume {:print "$at(4,33867,34044)"} true;
    $t18 := $0_obc_dao_ProposalCreatedEvent($t15, $t16, $t17);

    // $t19 := 0 at ./sources/obc_dao.move:1099:30+1
    assume {:print "$at(4,34125,34126)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := 0x0 at ./sources/obc_dao.move:1100:24+21
    assume {:print "$at(4,34151,34172)"} true;
    $t20 := 0;
    assume $IsValid'address'($t20);

    // $t21 := 0x0 at ./sources/obc_dao.move:1101:27+21
    assume {:print "$at(4,34200,34221)"} true;
    $t21 := 0;
    assume $IsValid'address'($t21);

    // $t22 := false at ./sources/obc_dao.move:1102:24+5
    assume {:print "$at(4,34246,34251)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // $t23 := 0 at ./sources/obc_dao.move:1103:23+1
    assume {:print "$at(4,34275,34276)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := pack obc_dao::VoteChangedEvent($t19, $t20, $t21, $t22, $t23) at ./sources/obc_dao.move:1098:33+213
    assume {:print "$at(4,34078,34291)"} true;
    $t24 := $0_obc_dao_VoteChangedEvent($t19, $t20, $t21, $t22, $t23);

    // $t25 := pack obc_dao::DaoGlobalInfo($t12, $t13, $t14, $t18, $t24) at ./sources/obc_dao.move:1089:23+582
    assume {:print "$at(4,33719,34301)"} true;
    $t25 := $0_obc_dao_DaoGlobalInfo($t12, $t13, $t14, $t18, $t24);

    // trace_local[daoInfo#1#0]($t25) at ./sources/obc_dao.move:1089:13+7
    assume {:print "$track_local(26,41,3):", $t25} $t25 == $t25;

    // $t26 := voting_pool::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1107:26+21
    assume {:print "$at(4,34329,34350)"} true;
    call $t26,$t1 := $0_voting_pool_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,34329,34350)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[votingPool#1#0]($t26) at ./sources/obc_dao.move:1107:13+10
    assume {:print "$track_local(26,41,5):", $t26} $t26 == $t26;

    // trace_local[rootAdmin#1#0]($t0) at ./sources/obc_dao.move:1108:13+9
    assume {:print "$at(4,34364,34373)"} true;
    assume {:print "$track_local(26,41,4):", $t0} $t0 == $t0;

    // $t27 := object::new($t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1110:17+16
    assume {:print "$at(4,34426,34442)"} true;
    call $t27,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,34426,34442)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t28 := vec_map::empty<u64, obc_dao::ProposalInfo>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:1114:29+16
    assume {:print "$at(4,34617,34633)"} true;
    call $t28 := $2_vec_map_empty'u64_$0_obc_dao_ProposalInfo'();
    if ($abort_flag) {
        assume {:print "$at(4,34617,34633)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t29 := vec_map::empty<u64, obc_dao::OBCDaoAction>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:1115:27+16
    assume {:print "$at(4,34661,34677)"} true;
    call $t29 := $2_vec_map_empty'u64_$0_obc_dao_OBCDaoAction'();
    if ($abort_flag) {
        assume {:print "$at(4,34661,34677)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t30 := vec_map::empty<u64, u64>() on_abort goto L2 with $t11 at ./sources/obc_dao.move:1116:26+16
    assume {:print "$at(4,34704,34720)"} true;
    call $t30 := $2_vec_map_empty'u64_u64'();
    if ($abort_flag) {
        assume {:print "$at(4,34704,34720)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t31 := pack obc_dao::Dao($t27, $t0, $t10, $t25, $t28, $t29, $t30, $t26) at ./sources/obc_dao.move:1109:23+350
    assume {:print "$at(4,34405,34755)"} true;
    $t31 := $0_obc_dao_Dao($t27, $t0, $t10, $t25, $t28, $t29, $t30, $t26);

    // transfer::share_object<obc_dao::Dao>($t31) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1120:9+31
    assume {:print "$at(4,34766,34797)"} true;
    call $2_transfer_share_object'$0_obc_dao_Dao'($t31);
    if ($abort_flag) {
        assume {:print "$at(4,34766,34797)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // obc_dao_manager::new($t0, $t1) on_abort goto L2 with $t11 at ./sources/obc_dao.move:1122:9+32
    assume {:print "$at(4,34808,34840)"} true;
    call $t1 := $0_obc_dao_manager_new($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,34808,34840)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,41):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:1122:41+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,41,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:1126:5+1
    assume {:print "$at(4,34849,34850)"} true;
L1:

    // return () at ./sources/obc_dao.move:1126:5+1
    assume {:print "$at(4,34849,34850)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/obc_dao.move:1126:5+1
L2:

    // abort($t11) at ./sources/obc_dao.move:1126:5+1
    assume {:print "$at(4,34849,34850)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun obc_dao::create_obcdao_action [verification] at ./sources/obc_dao.move:203:5+790
procedure {:timeLimit 40} $0_obc_dao_create_obcdao_action$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: Vec (int), _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $0_obc_dao_OBCDaoAction, $ret1: $Mutation ($0_obc_dao_Dao), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $0_obc_dao_OBCDaoAction;
    var $t5: int;
    var $t6: int;
    var $t7: $2_tx_context_TxContext;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_string_String;
    var $t12: $0_obc_dao_OBCDaoAction;
    var $t13: $1_string_String;
    var $t14: $0_obc_dao_ActionCreateEvent;
    var $t15: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction');
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: Vec (int);
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:203:5+1
    assume {:print "$at(4,6182,6183)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:203:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:203:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:203:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:203:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,1,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[_]($t1) at ./sources/obc_dao.move:203:5+1
    assume {:print "$track_local(26,1,1):", $t1} $t1 == $t1;

    // trace_local[actionName]($t2) at ./sources/obc_dao.move:203:5+1
    assume {:print "$track_local(26,1,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:203:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := read_ref($t3) at ./sources/obc_dao.move:211:41+3
    assume {:print "$at(4,6447,6450)"} true;
    $t7 := $Dereference($t3);

    // $t8 := tx_context::sender($t7) on_abort goto L2 with $t9 at ./sources/obc_dao.move:211:22+23
    call $t8 := $2_tx_context_sender($t7);
    if ($abort_flag) {
        assume {:print "$at(4,6428,6451)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[sender#1#0]($t8) at ./sources/obc_dao.move:211:13+6
    assume {:print "$track_local(26,1,6):", $t8} $t8 == $t8;

    // $t10 := obc_dao::generate_next_action_id($t0) on_abort goto L2 with $t9 at ./sources/obc_dao.move:212:25+28
    assume {:print "$at(4,6477,6505)"} true;
    call $t10,$t0 := $0_obc_dao_generate_next_action_id($t0);
    if ($abort_flag) {
        assume {:print "$at(4,6477,6505)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[action_id#1#0]($t10) at ./sources/obc_dao.move:212:13+9
    assume {:print "$track_local(26,1,5):", $t10} $t10 == $t10;

    // $t11 := string::utf8($t2) on_abort goto L2 with $t9 at ./sources/obc_dao.move:216:19+24
    assume {:print "$at(4,6594,6618)"} true;
    call $t11 := $1_string_utf8($t2);
    if ($abort_flag) {
        assume {:print "$at(4,6594,6618)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t12 := pack obc_dao::OBCDaoAction($t10, $t11) at ./sources/obc_dao.move:214:22+153
    assume {:print "$at(4,6529,6682)"} true;
    $t12 := $0_obc_dao_OBCDaoAction($t10, $t11);

    // trace_local[action#1#0]($t12) at ./sources/obc_dao.move:214:13+6
    assume {:print "$track_local(26,1,4):", $t12} $t12 == $t12;

    // $t13 := string::utf8($t2) on_abort goto L2 with $t9 at ./sources/obc_dao.move:223:23+24
    assume {:print "$at(4,6796,6820)"} true;
    call $t13 := $1_string_utf8($t2);
    if ($abort_flag) {
        assume {:print "$at(4,6796,6820)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t14 := pack obc_dao::ActionCreateEvent($t10, $t13, $t8) at ./sources/obc_dao.move:221:13+150
    assume {:print "$at(4,6718,6868)"} true;
    $t14 := $0_obc_dao_ActionCreateEvent($t10, $t13, $t8);

    // event::emit<obc_dao::ActionCreateEvent>($t14) on_abort goto L2 with $t9 at ./sources/obc_dao.move:220:9+185
    assume {:print "$at(4,6693,6878)"} true;
    call $2_event_emit'$0_obc_dao_ActionCreateEvent'($t14);
    if ($abort_flag) {
        assume {:print "$at(4,6693,6878)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t15 := borrow_field<obc_dao::Dao>.actionRecord($t0) at ./sources/obc_dao.move:227:25+21
    assume {:print "$at(4,6904,6925)"} true;
    $t15 := $ChildMutation($t0, 5, $actionRecord#$0_obc_dao_Dao($Dereference($t0)));

    // vec_map::insert<u64, obc_dao::OBCDaoAction>($t15, $t10, $t12) on_abort goto L2 with $t9 at ./sources/obc_dao.move:227:9+62
    call $t15 := $2_vec_map_insert'u64_$0_obc_dao_OBCDaoAction'($t15, $t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(4,6888,6950)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,1):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[Reference($t0).actionRecord (vec_map::VecMap<u64, obc_dao::OBCDaoAction>)]($t15) at ./sources/obc_dao.move:227:9+62
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_actionRecord($Dereference($t0), $Dereference($t15)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:227:9+62
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,1,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t12) at ./sources/obc_dao.move:228:9+6
    assume {:print "$at(4,6960,6966)"} true;
    assume {:print "$track_return(26,1,0):", $t12} $t12 == $t12;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:228:9+6
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,1,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:228:9+6
    assume {:print "$at(4,6960,6966)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:229:5+1
    assume {:print "$at(4,6971,6972)"} true;
L1:

    // return $t12 at ./sources/obc_dao.move:229:5+1
    assume {:print "$at(4,6971,6972)"} true;
    $ret0 := $t12;
    $ret1 := $t0;
    $ret2 := $t3;
    return;

    // label L2 at ./sources/obc_dao.move:229:5+1
L2:

    // abort($t9) at ./sources/obc_dao.move:229:5+1
    assume {:print "$at(4,6971,6972)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun obc_dao::create_proposal_for_test [verification] at ./sources/obc_dao.move:1047:5+803
procedure {:timeLimit 40} $0_obc_dao_create_proposal_for_test$verify(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $0_obc_dao_OBCDaoAction;
    var $t3: $0_obc_dao_ProposalInfo;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: $1_string_String;
    var $t7: int;
    var $t8: $0_obc_dao_OBCDaoAction;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: $0_obc_dao_ProposalInfo;
    var $t18: $2_object_UID;
    var $t19: $0_obc_dao_Proposal;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_ProposalInfo': $0_obc_dao_ProposalInfo;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:1047:5+1
    assume {:print "$at(4,32571,32572)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:1047:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[sender]($t0) at ./sources/obc_dao.move:1047:5+1
    assume {:print "$track_local(26,40,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:1047:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,40,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := 100 at ./sources/obc_dao.move:1050:23+3
    assume {:print "$at(4,32710,32713)"} true;
    $t4 := 100;
    assume $IsValid'u64'($t4);

    // $t5 := [104, 101, 108, 108, 111] at ./sources/obc_dao.move:1051:32+8
    assume {:print "$at(4,32746,32754)"} true;
    $t5 := ConcatVec(MakeVec4(104, 101, 108, 108), MakeVec1(111));
    assume $IsValid'vec'u8''($t5);

    // $t6 := string::utf8($t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1051:19+22
    call $t6 := $1_string_utf8($t5);
    if ($abort_flag) {
        assume {:print "$at(4,32733,32755)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,40):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := pack obc_dao::OBCDaoAction($t4, $t6) at ./sources/obc_dao.move:1049:22+145
    assume {:print "$at(4,32674,32819)"} true;
    $t8 := $0_obc_dao_OBCDaoAction($t4, $t6);

    // trace_local[action#1#0]($t8) at ./sources/obc_dao.move:1049:13+6
    assume {:print "$track_local(26,40,2):", $t8} $t8 == $t8;

    // $t9 := 1 at ./sources/obc_dao.move:1057:18+1
    assume {:print "$at(4,32882,32883)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := 10000000 at ./sources/obc_dao.move:1059:24+11
    assume {:print "$at(4,32938,32949)"} true;
    $t10 := 10000000;
    assume $IsValid'u64'($t10);

    // $t11 := 1000000000 at ./sources/obc_dao.move:1060:23+13
    assume {:print "$at(4,32973,32986)"} true;
    $t11 := 1000000000;
    assume $IsValid'u64'($t11);

    // $t12 := 0 at ./sources/obc_dao.move:1061:24+1
    assume {:print "$at(4,33011,33012)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := 0 at ./sources/obc_dao.move:1062:28+1
    assume {:print "$at(4,33041,33042)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := 0 at ./sources/obc_dao.move:1063:18+1
    assume {:print "$at(4,33061,33062)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := 1000000 at ./sources/obc_dao.move:1064:27+10
    assume {:print "$at(4,33090,33100)"} true;
    $t15 := 1000000;
    assume $IsValid'u64'($t15);

    // $t16 := 20 at ./sources/obc_dao.move:1065:27+5
    assume {:print "$at(4,33128,33133)"} true;
    $t16 := 20;
    assume $IsValid'u64'($t16);

    // $t17 := pack obc_dao::ProposalInfo($t9, $t0, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t8) at ./sources/obc_dao.move:1056:28+314
    assume {:print "$at(4,32850,33164)"} true;
    $t17 := $0_obc_dao_ProposalInfo($t9, $t0, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t8);

    // trace_local[proposalInfo#1#0]($t17) at ./sources/obc_dao.move:1056:13+12
    assume {:print "$track_local(26,40,3):", $t17} $t17 == $t17;

    // $t18 := object::new($t1) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1069:25+16
    assume {:print "$at(4,33191,33207)"} true;
    call $t18,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(4,33191,33207)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,40):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t19 := pack obc_dao::Proposal($t18, $t17) at ./sources/obc_dao.move:1071:24+87
    assume {:print "$at(4,33233,33320)"} true;
    $t19 := $0_obc_dao_Proposal($t18, $t17);

    // transfer::transfer<obc_dao::Proposal>($t19, $t0) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1076:9+36
    assume {:print "$at(4,33331,33367)"} true;
    call $2_transfer_transfer'$0_obc_dao_Proposal'($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(4,33331,33367)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,40):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:1076:45+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,40,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:1077:5+1
    assume {:print "$at(4,33373,33374)"} true;
L1:

    // return () at ./sources/obc_dao.move:1077:5+1
    assume {:print "$at(4,33373,33374)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/obc_dao.move:1077:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:1077:5+1
    assume {:print "$at(4,33373,33374)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::create_voting_obc [verification] at ./sources/obc_dao.move:1024:5+444
procedure {:timeLimit 40} $0_obc_dao_create_voting_obc$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $2_coin_Coin'$2_obc_OBC', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Dao), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_balance_Balance'$2_obc_OBC';
    var $t4: int;
    var $t5: $2_tx_context_TxContext;
    var $t6: int;
    var $t7: int;
    var $t8: $2_balance_Balance'$2_obc_OBC';
    var $t9: $Mutation ($0_voting_pool_VotingPool);
    var $t10: $0_voting_pool_VotingObc;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $2_coin_Coin'$2_obc_OBC';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_coin_Coin'$2_obc_OBC'': $2_coin_Coin'$2_obc_OBC';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:1024:5+1
    assume {:print "$at(4,31641,31642)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:1024:5+1
    assume $IsValid'$2_coin_Coin'$2_obc_OBC''($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:1024:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1024:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,38,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[coin]($t1) at ./sources/obc_dao.move:1024:5+1
    assume {:print "$track_local(26,38,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:1024:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,38,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := read_ref($t2) at ./sources/obc_dao.move:1028:41+3
    assume {:print "$at(4,31877,31880)"} true;
    $t5 := $Dereference($t2);

    // $t6 := tx_context::sender($t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1028:22+23
    call $t6 := $2_tx_context_sender($t5);
    if ($abort_flag) {
        assume {:print "$at(4,31858,31881)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,38):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[sender#1#0]($t6) at ./sources/obc_dao.move:1028:13+6
    assume {:print "$track_local(26,38,4):", $t6} $t6 == $t6;

    // $t8 := coin::into_balance<obc::OBC>($t1) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1029:23+24
    assume {:print "$at(4,31905,31929)"} true;
    call $t8 := $2_coin_into_balance'$2_obc_OBC'($t1);
    if ($abort_flag) {
        assume {:print "$at(4,31905,31929)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,38):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[balance#1#0]($t8) at ./sources/obc_dao.move:1029:13+7
    assume {:print "$track_local(26,38,3):", $t8} $t8 == $t8;

    // $t9 := borrow_field<obc_dao::Dao>.votingPool($t0) at ./sources/obc_dao.move:1030:58+19
    assume {:print "$at(4,31988,32007)"} true;
    $t9 := $ChildMutation($t0, 7, $votingPool#$0_obc_dao_Dao($Dereference($t0)));

    // $t10 := voting_pool::request_add_voting($t9, $t8, $t2) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1030:26+66
    call $t10,$t9,$t2 := $0_voting_pool_request_add_voting($t9, $t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,31956,32022)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,38):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).votingPool (voting_pool::VotingPool)]($t9) at ./sources/obc_dao.move:1030:26+66
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_votingPool($Dereference($t0), $Dereference($t9)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1030:26+66
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,38,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // transfer::public_transfer<voting_pool::VotingObc>($t10, $t6) on_abort goto L2 with $t7 at ./sources/obc_dao.move:1032:9+45
    assume {:print "$at(4,32033,32078)"} true;
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t10, $t6);
    if ($abort_flag) {
        assume {:print "$at(4,32033,32078)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,38):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1032:54+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,38,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:1032:54+1
    assume {:print "$at(4,32078,32079)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,38,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:1033:5+1
    assume {:print "$at(4,32084,32085)"} true;
L1:

    // return () at ./sources/obc_dao.move:1033:5+1
    assume {:print "$at(4,32084,32085)"} true;
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/obc_dao.move:1033:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:1033:5+1
    assume {:print "$at(4,32084,32085)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::destroy_terminated_proposal [verification] at ./sources/obc_dao.move:678:5+1133
procedure {:timeLimit 40} $0_obc_dao_destroy_terminated_proposal$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: $Mutation ($0_obc_dao_Proposal), _$t3: $2_clock_Clock) returns ($ret0: $Mutation ($0_obc_dao_Dao), $ret1: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t4: $2_clock_Clock;
    var $t5: bool;
    var $t6: int;
    var $t7: $0_obc_dao_Proposal;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo');
    var $t16: $0_obc_dao_ProposalInfo;
    var $t17: int;
    var $t18: int;
    var $t19: $0_obc_dao_ProposalInfo;
    var $t20: int;
    var $t21: bool;
    var $t22: $0_obc_dao_ProposalInfo;
    var $t23: $0_obc_dao_OBCDaoAction;
    var $t24: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: $Mutation ($0_obc_dao_Proposal);
    var $t3: $2_clock_Clock;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:678:5+1
    assume {:print "$at(4,21081,21082)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:678:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:678:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t2));

    // assume WellFormed($t3) at ./sources/obc_dao.move:678:5+1
    assume $IsValid'$2_clock_Clock'($t3);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:678:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,16,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:678:5+1
    assume {:print "$track_local(26,16,1):", $t1} $t1 == $t1;

    // trace_local[proposal]($t2) at ./sources/obc_dao.move:678:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t2);
    assume {:print "$track_local(26,16,2):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[clock]($t3) at ./sources/obc_dao.move:678:5+1
    assume {:print "$track_local(26,16,3):", $t3} $t3 == $t3;

    // $t7 := read_ref($t2) at ./sources/obc_dao.move:686:44+16
    assume {:print "$at(4,21301,21317)"} true;
    $t7 := $Dereference($t2);

    // $t8 := obc_dao::proposal_state($t7, $t3) on_abort goto L10 with $t9 at ./sources/obc_dao.move:686:30+30
    call $t8 := $0_obc_dao_proposal_state($t7, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,21287,21317)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,16):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[proposal_state#1#0]($t8) at ./sources/obc_dao.move:686:13+14
    assume {:print "$track_local(26,16,6):", $t8} $t8 == $t8;

    // $t10 := 3 at ./sources/obc_dao.move:688:31+8
    assume {:print "$at(4,21366,21374)"} true;
    $t10 := 3;
    assume $IsValid'u8'($t10);

    // $t11 := ==($t8, $t10) at ./sources/obc_dao.move:688:28+2
    $t11 := $IsEqual'u8'($t8, $t10);

    // if ($t11) goto L1 else goto L0 at ./sources/obc_dao.move:688:13+57
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:688:13+57
L1:

    // $t12 := true at ./sources/obc_dao.move:688:13+57
    assume {:print "$at(4,21348,21405)"} true;
    $t12 := true;
    assume $IsValid'bool'($t12);

    // $t5 := $t12 at ./sources/obc_dao.move:688:13+57
    $t5 := $t12;

    // goto L2 at ./sources/obc_dao.move:688:13+57
    goto L2;

    // label L0 at ./sources/obc_dao.move:688:43+14
L0:

    // $t13 := 7 at ./sources/obc_dao.move:688:61+9
    assume {:print "$at(4,21396,21405)"} true;
    $t13 := 7;
    assume $IsValid'u8'($t13);

    // $t5 := ==($t8, $t13) at ./sources/obc_dao.move:688:58+2
    $t5 := $IsEqual'u8'($t8, $t13);

    // label L2 at ./sources/obc_dao.move:688:13+57
L2:

    // if ($t5) goto L4 else goto L3 at ./sources/obc_dao.move:687:9+131
    assume {:print "$at(4,21327,21458)"} true;
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:687:9+131
L4:

    // goto L5 at ./sources/obc_dao.move:687:9+131
    assume {:print "$at(4,21327,21458)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:687:9+131
L3:

    // destroy($t2) at ./sources/obc_dao.move:687:9+131
    assume {:print "$at(4,21327,21458)"} true;

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:687:9+131
    assume {:print "$at(4,21327,21458)"} true;

    // $t14 := 1403 at ./sources/obc_dao.move:689:13+28
    assume {:print "$at(4,21419,21447)"} true;
    $t14 := 1403;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at ./sources/obc_dao.move:687:9+131
    assume {:print "$at(4,21327,21458)"} true;
    assume {:print "$track_abort(26,16):", $t14} $t14 == $t14;

    // $t9 := move($t14) at ./sources/obc_dao.move:687:9+131
    $t9 := $t14;

    // goto L10 at ./sources/obc_dao.move:687:9+131
    goto L10;

    // label L5 at ./sources/obc_dao.move:693:30+3
    assume {:print "$at(4,21491,21494)"} true;
L5:

    // $t15 := borrow_field<obc_dao::Dao>.proposalRecord($t0) at ./sources/obc_dao.move:693:25+23
    assume {:print "$at(4,21486,21509)"} true;
    $t15 := $ChildMutation($t0, 4, $proposalRecord#$0_obc_dao_Dao($Dereference($t0)));

    // $t16 := get_field<obc_dao::Proposal>.proposal($t2) at ./sources/obc_dao.move:693:51+17
    $t16 := $proposal#$0_obc_dao_Proposal($Dereference($t2));

    // $t17 := get_field<obc_dao::ProposalInfo>.pid($t16) at ./sources/obc_dao.move:693:50+22
    $t17 := $pid#$0_obc_dao_ProposalInfo($t16);

    // ($t18, $t19) := vec_map::remove<u64, obc_dao::ProposalInfo>($t15, $t17) on_abort goto L10 with $t9 at ./sources/obc_dao.move:693:9+64
    call $t18,$t19,$t15 := $2_vec_map_remove'u64_$0_obc_dao_ProposalInfo'($t15, $t17);
    if ($abort_flag) {
        assume {:print "$at(4,21470,21534)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,16):", $t9} $t9 == $t9;
        goto L10;
    }

    // write_back[Reference($t0).proposalRecord (vec_map::VecMap<u64, obc_dao::ProposalInfo>)]($t15) at ./sources/obc_dao.move:693:9+64
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_proposalRecord($Dereference($t0), $Dereference($t15)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:693:9+64
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,16,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // destroy($t19) at ./sources/obc_dao.move:693:9+64

    // destroy($t18) at ./sources/obc_dao.move:693:9+64

    // $t20 := 3 at ./sources/obc_dao.move:694:31+8
    assume {:print "$at(4,21566,21574)"} true;
    $t20 := 3;
    assume $IsValid'u8'($t20);

    // $t21 := ==($t8, $t20) at ./sources/obc_dao.move:694:28+2
    $t21 := $IsEqual'u8'($t8, $t20);

    // if ($t21) goto L7 else goto L6 at ./sources/obc_dao.move:694:9+90
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao.move:695:22+8
    assume {:print "$at(4,21599,21607)"} true;
L7:

    // $t22 := get_field<obc_dao::Proposal>.proposal($t2) at ./sources/obc_dao.move:695:22+17
    assume {:print "$at(4,21599,21616)"} true;
    $t22 := $proposal#$0_obc_dao_Proposal($Dereference($t2));

    // $t23 := get_field<obc_dao::ProposalInfo>.action($t22) at ./sources/obc_dao.move:695:22+24
    $t23 := $action#$0_obc_dao_ProposalInfo($t22);

    // destroy($t23) at ./sources/obc_dao.move:695:17+1

    // goto L8 at ./sources/obc_dao.move:695:46+1
    goto L8;

    // label L6 at ./sources/obc_dao.move:694:9+90
    assume {:print "$at(4,21544,21634)"} true;
L6:

    // destroy($t2) at ./sources/obc_dao.move:694:9+90
    assume {:print "$at(4,21544,21634)"} true;

    // label L8 at ./sources/obc_dao.move:715:28+11
    assume {:print "$at(4,22172,22183)"} true;
L8:

    // $t24 := [80, 114, 111, 112, 111, 115, 97, 108, 68, 101, 115, 116, 114, 111, 121, 101, 100] at ./sources/obc_dao.move:715:41+20
    assume {:print "$at(4,22185,22205)"} true;
    $t24 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(80, 114, 111, 112), MakeVec4(111, 115, 97, 108)), MakeVec4(68, 101, 115, 116)), MakeVec4(114, 111, 121, 101)), MakeVec1(100));
    assume $IsValid'vec'u8''($t24);

    // obc_dao::send_obc_dao_event($t1, $t24) on_abort goto L10 with $t9 at ./sources/obc_dao.move:715:9+53
    call $0_obc_dao_send_obc_dao_event($t1, $t24);
    if ($abort_flag) {
        assume {:print "$at(4,22153,22206)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(26,16):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:715:62+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,16,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // trace_local[proposal]($t2) at ./sources/obc_dao.move:715:62+1
    assume {:print "$at(4,22206,22207)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t2);
    assume {:print "$track_local(26,16,2):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L9 at ./sources/obc_dao.move:717:5+1
    assume {:print "$at(4,22213,22214)"} true;
L9:

    // return () at ./sources/obc_dao.move:717:5+1
    assume {:print "$at(4,22213,22214)"} true;
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L10 at ./sources/obc_dao.move:717:5+1
L10:

    // abort($t9) at ./sources/obc_dao.move:717:5+1
    assume {:print "$at(4,22213,22214)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun obc_dao::do_flip_vote [baseline] at ./sources/obc_dao.move:478:5+628
procedure {:inline 1} $0_obc_dao_do_flip_vote(_$t0: $Mutation ($0_obc_dao_Vote), _$t1: $Mutation ($0_obc_dao_Proposal)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Vote), $ret2: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: bool;
    var $t5: $Mutation (bool);
    var $t6: $0_voting_pool_VotingObc;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $0_obc_dao_ProposalInfo;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($0_obc_dao_ProposalInfo);
    var $t14: $Mutation (int);
    var $t15: $0_obc_dao_ProposalInfo;
    var $t16: int;
    var $t17: int;
    var $t18: $Mutation ($0_obc_dao_ProposalInfo);
    var $t19: $Mutation (int);
    var $t20: $0_obc_dao_ProposalInfo;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($0_obc_dao_ProposalInfo);
    var $t24: $Mutation (int);
    var $t25: $0_obc_dao_ProposalInfo;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation ($0_obc_dao_ProposalInfo);
    var $t29: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Vote);
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:478:5+1
    assume {:print "$at(4,14498,14499)"} true;
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:478:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t3 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:480:26+13
    assume {:print "$at(4,14613,14626)"} true;
    $t3 := $agree#$0_obc_dao_Vote($Dereference($t0));

    // $t4 := !($t3) at ./sources/obc_dao.move:480:25+1
    call $t4 := $Not($t3);

    // $t5 := borrow_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:480:9+13
    $t5 := $ChildMutation($t0, 4, $agree#$0_obc_dao_Vote($Dereference($t0)));

    // write_ref($t5, $t4) at ./sources/obc_dao.move:480:9+30
    $t5 := $UpdateMutation($t5, $t4);

    // write_back[Reference($t0).agree (bool)]($t5) at ./sources/obc_dao.move:480:9+30
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Vote'_agree($Dereference($t0), $Dereference($t5)));

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:480:9+30
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // $t6 := get_field<obc_dao::Vote>.vote($t0) at ./sources/obc_dao.move:481:45+13
    assume {:print "$at(4,14672,14685)"} true;
    $t6 := $vote#$0_obc_dao_Vote($Dereference($t0));

    // $t7 := voting_pool::voting_obc_amount($t6) on_abort goto L4 with $t8 at ./sources/obc_dao.move:481:27+32
    call $t7 := $0_voting_pool_voting_obc_amount($t6);
    if ($abort_flag) {
        assume {:print "$at(4,14654,14686)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[total_voted#1#0]($t7) at ./sources/obc_dao.move:481:13+11
    assume {:print "$track_local(26,8,2):", $t7} $t7 == $t7;

    // $t9 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:482:13+13
    assume {:print "$at(4,14700,14713)"} true;
    $t9 := $agree#$0_obc_dao_Vote($Dereference($t0));

    // if ($t9) goto L1 else goto L0 at ./sources/obc_dao.move:482:9+403
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:483:43+8
    assume {:print "$at(4,14759,14767)"} true;
L1:

    // $t10 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:483:43+17
    assume {:print "$at(4,14759,14776)"} true;
    $t10 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t11 := get_field<obc_dao::ProposalInfo>.for_votes($t10) at ./sources/obc_dao.move:483:43+27
    $t11 := $for_votes#$0_obc_dao_ProposalInfo($t10);

    // $t12 := +($t11, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:483:71+1
    call $t12 := $AddU64($t11, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14787,14788)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t13 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:483:13+17
    $t13 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t14 := borrow_field<obc_dao::ProposalInfo>.for_votes($t13) at ./sources/obc_dao.move:483:13+27
    $t14 := $ChildMutation($t13, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/obc_dao.move:483:13+71
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).for_votes (u64)]($t14) at ./sources/obc_dao.move:483:13+71
    $t13 := $UpdateMutation($t13, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t13) at ./sources/obc_dao.move:483:13+71
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t13)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:483:13+71
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t15 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:484:47+17
    assume {:print "$at(4,14848,14865)"} true;
    $t15 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t16 := get_field<obc_dao::ProposalInfo>.against_votes($t15) at ./sources/obc_dao.move:484:47+31
    $t16 := $against_votes#$0_obc_dao_ProposalInfo($t15);

    // $t17 := -($t16, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:484:79+1
    call $t17 := $Sub($t16, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14880,14881)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t18 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:484:13+17
    $t18 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t19 := borrow_field<obc_dao::ProposalInfo>.against_votes($t18) at ./sources/obc_dao.move:484:13+31
    $t19 := $ChildMutation($t18, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t18)));

    // write_ref($t19, $t17) at ./sources/obc_dao.move:484:13+79
    $t19 := $UpdateMutation($t19, $t17);

    // write_back[Reference($t18).against_votes (u64)]($t19) at ./sources/obc_dao.move:484:13+79
    $t18 := $UpdateMutation($t18, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t18), $Dereference($t19)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t18) at ./sources/obc_dao.move:484:13+79
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t18)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:484:13+79
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:484:92+1
    goto L2;

    // label L0 at ./sources/obc_dao.move:486:43+8
    assume {:print "$at(4,14954,14962)"} true;
L0:

    // $t20 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:486:43+17
    assume {:print "$at(4,14954,14971)"} true;
    $t20 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t21 := get_field<obc_dao::ProposalInfo>.for_votes($t20) at ./sources/obc_dao.move:486:43+27
    $t21 := $for_votes#$0_obc_dao_ProposalInfo($t20);

    // $t22 := -($t21, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:486:71+1
    call $t22 := $Sub($t21, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14982,14983)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t23 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:486:13+17
    $t23 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t24 := borrow_field<obc_dao::ProposalInfo>.for_votes($t23) at ./sources/obc_dao.move:486:13+27
    $t24 := $ChildMutation($t23, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t23)));

    // write_ref($t24, $t22) at ./sources/obc_dao.move:486:13+71
    $t24 := $UpdateMutation($t24, $t22);

    // write_back[Reference($t23).for_votes (u64)]($t24) at ./sources/obc_dao.move:486:13+71
    $t23 := $UpdateMutation($t23, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t23), $Dereference($t24)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t23) at ./sources/obc_dao.move:486:13+71
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t23)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:486:13+71
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t25 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:487:47+17
    assume {:print "$at(4,15043,15060)"} true;
    $t25 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t26 := get_field<obc_dao::ProposalInfo>.against_votes($t25) at ./sources/obc_dao.move:487:47+31
    $t26 := $against_votes#$0_obc_dao_ProposalInfo($t25);

    // $t27 := +($t26, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:487:79+1
    call $t27 := $AddU64($t26, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,15075,15076)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t28 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:487:13+17
    $t28 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t29 := borrow_field<obc_dao::ProposalInfo>.against_votes($t28) at ./sources/obc_dao.move:487:13+31
    $t29 := $ChildMutation($t28, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t28)));

    // write_ref($t29, $t27) at ./sources/obc_dao.move:487:13+79
    $t29 := $UpdateMutation($t29, $t27);

    // write_back[Reference($t28).against_votes (u64)]($t29) at ./sources/obc_dao.move:487:13+79
    $t28 := $UpdateMutation($t28, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t28), $Dereference($t29)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t28) at ./sources/obc_dao.move:487:13+79
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t28)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:487:13+79
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L2 at ./sources/obc_dao.move:489:9+11
    assume {:print "$at(4,15109,15120)"} true;
L2:

    // trace_return[0]($t7) at ./sources/obc_dao.move:489:9+11
    assume {:print "$at(4,15109,15120)"} true;
    assume {:print "$track_return(26,8,0):", $t7} $t7 == $t7;

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:489:9+11
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:489:9+11
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L3 at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
L3:

    // return $t7 at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    $ret2 := $t1;
    return;

    // label L4 at ./sources/obc_dao.move:490:5+1
L4:

    // abort($t8) at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun obc_dao::do_flip_vote [verification] at ./sources/obc_dao.move:478:5+628
procedure {:timeLimit 40} $0_obc_dao_do_flip_vote$verify(_$t0: $Mutation ($0_obc_dao_Vote), _$t1: $Mutation ($0_obc_dao_Proposal)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Vote), $ret2: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: bool;
    var $t5: $Mutation (bool);
    var $t6: $0_voting_pool_VotingObc;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $0_obc_dao_ProposalInfo;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($0_obc_dao_ProposalInfo);
    var $t14: $Mutation (int);
    var $t15: $0_obc_dao_ProposalInfo;
    var $t16: int;
    var $t17: int;
    var $t18: $Mutation ($0_obc_dao_ProposalInfo);
    var $t19: $Mutation (int);
    var $t20: $0_obc_dao_ProposalInfo;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($0_obc_dao_ProposalInfo);
    var $t24: $Mutation (int);
    var $t25: $0_obc_dao_ProposalInfo;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation ($0_obc_dao_ProposalInfo);
    var $t29: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Vote);
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:478:5+1
    assume {:print "$at(4,14498,14499)"} true;
    assume $IsValid'$0_obc_dao_Vote'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:478:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t1));

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:478:5+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:478:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t3 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:480:26+13
    assume {:print "$at(4,14613,14626)"} true;
    $t3 := $agree#$0_obc_dao_Vote($Dereference($t0));

    // $t4 := !($t3) at ./sources/obc_dao.move:480:25+1
    call $t4 := $Not($t3);

    // $t5 := borrow_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:480:9+13
    $t5 := $ChildMutation($t0, 4, $agree#$0_obc_dao_Vote($Dereference($t0)));

    // write_ref($t5, $t4) at ./sources/obc_dao.move:480:9+30
    $t5 := $UpdateMutation($t5, $t4);

    // write_back[Reference($t0).agree (bool)]($t5) at ./sources/obc_dao.move:480:9+30
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Vote'_agree($Dereference($t0), $Dereference($t5)));

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:480:9+30
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // $t6 := get_field<obc_dao::Vote>.vote($t0) at ./sources/obc_dao.move:481:45+13
    assume {:print "$at(4,14672,14685)"} true;
    $t6 := $vote#$0_obc_dao_Vote($Dereference($t0));

    // $t7 := voting_pool::voting_obc_amount($t6) on_abort goto L4 with $t8 at ./sources/obc_dao.move:481:27+32
    call $t7 := $0_voting_pool_voting_obc_amount($t6);
    if ($abort_flag) {
        assume {:print "$at(4,14654,14686)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[total_voted#1#0]($t7) at ./sources/obc_dao.move:481:13+11
    assume {:print "$track_local(26,8,2):", $t7} $t7 == $t7;

    // $t9 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:482:13+13
    assume {:print "$at(4,14700,14713)"} true;
    $t9 := $agree#$0_obc_dao_Vote($Dereference($t0));

    // if ($t9) goto L1 else goto L0 at ./sources/obc_dao.move:482:9+403
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:483:43+8
    assume {:print "$at(4,14759,14767)"} true;
L1:

    // $t10 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:483:43+17
    assume {:print "$at(4,14759,14776)"} true;
    $t10 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t11 := get_field<obc_dao::ProposalInfo>.for_votes($t10) at ./sources/obc_dao.move:483:43+27
    $t11 := $for_votes#$0_obc_dao_ProposalInfo($t10);

    // $t12 := +($t11, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:483:71+1
    call $t12 := $AddU64($t11, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14787,14788)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t13 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:483:13+17
    $t13 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t14 := borrow_field<obc_dao::ProposalInfo>.for_votes($t13) at ./sources/obc_dao.move:483:13+27
    $t14 := $ChildMutation($t13, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/obc_dao.move:483:13+71
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).for_votes (u64)]($t14) at ./sources/obc_dao.move:483:13+71
    $t13 := $UpdateMutation($t13, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t13) at ./sources/obc_dao.move:483:13+71
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t13)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:483:13+71
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t15 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:484:47+17
    assume {:print "$at(4,14848,14865)"} true;
    $t15 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t16 := get_field<obc_dao::ProposalInfo>.against_votes($t15) at ./sources/obc_dao.move:484:47+31
    $t16 := $against_votes#$0_obc_dao_ProposalInfo($t15);

    // $t17 := -($t16, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:484:79+1
    call $t17 := $Sub($t16, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14880,14881)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t18 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:484:13+17
    $t18 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t19 := borrow_field<obc_dao::ProposalInfo>.against_votes($t18) at ./sources/obc_dao.move:484:13+31
    $t19 := $ChildMutation($t18, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t18)));

    // write_ref($t19, $t17) at ./sources/obc_dao.move:484:13+79
    $t19 := $UpdateMutation($t19, $t17);

    // write_back[Reference($t18).against_votes (u64)]($t19) at ./sources/obc_dao.move:484:13+79
    $t18 := $UpdateMutation($t18, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t18), $Dereference($t19)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t18) at ./sources/obc_dao.move:484:13+79
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t18)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:484:13+79
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:484:92+1
    goto L2;

    // label L0 at ./sources/obc_dao.move:486:43+8
    assume {:print "$at(4,14954,14962)"} true;
L0:

    // $t20 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:486:43+17
    assume {:print "$at(4,14954,14971)"} true;
    $t20 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t21 := get_field<obc_dao::ProposalInfo>.for_votes($t20) at ./sources/obc_dao.move:486:43+27
    $t21 := $for_votes#$0_obc_dao_ProposalInfo($t20);

    // $t22 := -($t21, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:486:71+1
    call $t22 := $Sub($t21, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,14982,14983)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t23 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:486:13+17
    $t23 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t24 := borrow_field<obc_dao::ProposalInfo>.for_votes($t23) at ./sources/obc_dao.move:486:13+27
    $t24 := $ChildMutation($t23, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t23)));

    // write_ref($t24, $t22) at ./sources/obc_dao.move:486:13+71
    $t24 := $UpdateMutation($t24, $t22);

    // write_back[Reference($t23).for_votes (u64)]($t24) at ./sources/obc_dao.move:486:13+71
    $t23 := $UpdateMutation($t23, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t23), $Dereference($t24)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t23) at ./sources/obc_dao.move:486:13+71
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t23)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:486:13+71
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t25 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:487:47+17
    assume {:print "$at(4,15043,15060)"} true;
    $t25 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t26 := get_field<obc_dao::ProposalInfo>.against_votes($t25) at ./sources/obc_dao.move:487:47+31
    $t26 := $against_votes#$0_obc_dao_ProposalInfo($t25);

    // $t27 := +($t26, $t7) on_abort goto L4 with $t8 at ./sources/obc_dao.move:487:79+1
    call $t27 := $AddU64($t26, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,15075,15076)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,8):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t28 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:487:13+17
    $t28 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t29 := borrow_field<obc_dao::ProposalInfo>.against_votes($t28) at ./sources/obc_dao.move:487:13+31
    $t29 := $ChildMutation($t28, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t28)));

    // write_ref($t29, $t27) at ./sources/obc_dao.move:487:13+79
    $t29 := $UpdateMutation($t29, $t27);

    // write_back[Reference($t28).against_votes (u64)]($t29) at ./sources/obc_dao.move:487:13+79
    $t28 := $UpdateMutation($t28, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t28), $Dereference($t29)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t28) at ./sources/obc_dao.move:487:13+79
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t28)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:487:13+79
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L2 at ./sources/obc_dao.move:489:9+11
    assume {:print "$at(4,15109,15120)"} true;
L2:

    // trace_return[0]($t7) at ./sources/obc_dao.move:489:9+11
    assume {:print "$at(4,15109,15120)"} true;
    assume {:print "$track_return(26,8,0):", $t7} $t7 == $t7;

    // trace_local[my_vote]($t0) at ./sources/obc_dao.move:489:9+11
    $temp_0'$0_obc_dao_Vote' := $Dereference($t0);
    assume {:print "$track_local(26,8,0):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:489:9+11
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,8,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L3 at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
L3:

    // return $t7 at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    $ret2 := $t1;
    return;

    // label L4 at ./sources/obc_dao.move:490:5+1
L4:

    // abort($t8) at ./sources/obc_dao.move:490:5+1
    assume {:print "$at(4,15125,15126)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun obc_dao::do_revoke_vote [baseline] at ./sources/obc_dao.move:546:5+830
procedure {:inline 1} $0_obc_dao_do_revoke_vote(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $Mutation ($0_obc_dao_Vote), _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($0_obc_dao_Vote), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $0_voting_pool_VotingObc;
    var $t5: $Mutation ($0_voting_pool_VotingObc);
    var $t6: $0_voting_pool_VotingObc;
    var $t7: int;
    var $t8: bool;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation ($0_obc_dao_ProposalInfo);
    var $t13: $Mutation (int);
    var $t14: $0_obc_dao_ProposalInfo;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($0_obc_dao_ProposalInfo);
    var $t18: $Mutation (int);
    var $t19: $2_tx_context_TxContext;
    var $t20: int;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $Mutation ($0_obc_dao_Vote);
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[proposal]($t0) at ./sources/obc_dao.move:546:5+1
    assume {:print "$at(4,16825,16826)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[vote]($t1) at ./sources/obc_dao.move:546:5+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[to_revoke]($t2) at ./sources/obc_dao.move:546:5+1
    assume {:print "$track_local(26,10,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:546:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // assume Ge(select balance::Balance.value(select voting_pool::VotingObc.principal(select obc_dao::Vote.vote($t1))), $t2) at ./sources/obc_dao.move:553:13+46
    assume {:print "$at(4,16990,17036)"} true;
    assume ($value#$2_balance_Balance'$2_obc_OBC'($principal#$0_voting_pool_VotingObc($vote#$0_obc_dao_Vote($Dereference($t1)))) >= $t2);

    // $t5 := borrow_field<obc_dao::Vote>.vote($t1) at ./sources/obc_dao.move:558:48+14
    assume {:print "$at(4,17199,17213)"} true;
    $t5 := $ChildMutation($t1, 3, $vote#$0_obc_dao_Vote($Dereference($t1)));

    // $t6 := voting_pool::split($t5, $t2, $t3) on_abort goto L4 with $t7 at ./sources/obc_dao.move:558:29+50
    call $t6,$t5,$t3 := $0_voting_pool_split($t5, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,17180,17230)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // write_back[Reference($t1).vote (voting_pool::VotingObc)]($t5) at ./sources/obc_dao.move:558:29+50
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Vote'_vote($Dereference($t1), $Dereference($t5)));

    // trace_local[vote]($t1) at ./sources/obc_dao.move:558:29+50
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[reverted_vote#1#0]($t6) at ./sources/obc_dao.move:558:13+13
    assume {:print "$track_local(26,10,4):", $t6} $t6 == $t6;

    // $t8 := get_field<obc_dao::Vote>.agree($t1) at ./sources/obc_dao.move:560:13+10
    assume {:print "$at(4,17245,17255)"} true;
    $t8 := $agree#$0_obc_dao_Vote($Dereference($t1));

    // if ($t8) goto L1 else goto L0 at ./sources/obc_dao.move:560:9+218
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:561:43+8
    assume {:print "$at(4,17301,17309)"} true;
L1:

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:561:43+17
    assume {:print "$at(4,17301,17318)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t10 := get_field<obc_dao::ProposalInfo>.for_votes($t9) at ./sources/obc_dao.move:561:43+27
    $t10 := $for_votes#$0_obc_dao_ProposalInfo($t9);

    // $t11 := -($t10, $t2) on_abort goto L4 with $t7 at ./sources/obc_dao.move:561:71+1
    call $t11 := $Sub($t10, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,17329,17330)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t12 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:561:13+17
    $t12 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t13 := borrow_field<obc_dao::ProposalInfo>.for_votes($t12) at ./sources/obc_dao.move:561:13+27
    $t13 := $ChildMutation($t12, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t12)));

    // write_ref($t13, $t11) at ./sources/obc_dao.move:561:13+69
    $t13 := $UpdateMutation($t13, $t11);

    // write_back[Reference($t12).for_votes (u64)]($t13) at ./sources/obc_dao.move:561:13+69
    $t12 := $UpdateMutation($t12, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t12), $Dereference($t13)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t12) at ./sources/obc_dao.move:561:13+69
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t12)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:561:13+69
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:561:82+1
    goto L2;

    // label L0 at ./sources/obc_dao.move:563:47+8
    assume {:print "$at(4,17405,17413)"} true;
L0:

    // $t14 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:563:47+17
    assume {:print "$at(4,17405,17422)"} true;
    $t14 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t15 := get_field<obc_dao::ProposalInfo>.against_votes($t14) at ./sources/obc_dao.move:563:47+31
    $t15 := $against_votes#$0_obc_dao_ProposalInfo($t14);

    // $t16 := -($t15, $t2) on_abort goto L4 with $t7 at ./sources/obc_dao.move:563:79+1
    call $t16 := $Sub($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,17437,17438)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t17 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:563:13+17
    $t17 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t18 := borrow_field<obc_dao::ProposalInfo>.against_votes($t17) at ./sources/obc_dao.move:563:13+31
    $t18 := $ChildMutation($t17, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t17)));

    // write_ref($t18, $t16) at ./sources/obc_dao.move:563:13+77
    $t18 := $UpdateMutation($t18, $t16);

    // write_back[Reference($t17).against_votes (u64)]($t18) at ./sources/obc_dao.move:563:13+77
    $t17 := $UpdateMutation($t17, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t17), $Dereference($t18)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t17) at ./sources/obc_dao.move:563:13+77
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t17)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:563:13+77
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L2 at ./sources/obc_dao.move:565:9+79
    assume {:print "$at(4,17469,17548)"} true;
L2:

    // assert Eq<u64>(select balance::Balance.value(select voting_pool::VotingObc.principal($t6)), $t2) at ./sources/obc_dao.move:566:13+50
    assume {:print "$at(4,17488,17538)"} true;
    assert {:msg "assert_failed(4,17488,17538): unknown assertion failed"}
      $IsEqual'u64'($value#$2_balance_Balance'$2_obc_OBC'($principal#$0_voting_pool_VotingObc($t6)), $t2);

    // $t19 := read_ref($t3) at ./sources/obc_dao.move:570:69+3
    assume {:print "$at(4,17643,17646)"} true;
    $t19 := $Dereference($t3);

    // $t20 := tx_context::sender($t19) on_abort goto L4 with $t7 at ./sources/obc_dao.move:570:50+23
    call $t20 := $2_tx_context_sender($t19);
    if ($abort_flag) {
        assume {:print "$at(4,17624,17647)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // transfer::public_transfer<voting_pool::VotingObc>($t6, $t20) on_abort goto L4 with $t7 at ./sources/obc_dao.move:570:9+65
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t6, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,17583,17648)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:570:74+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[vote]($t1) at ./sources/obc_dao.move:570:74+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:570:74+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
L3:

    // return () at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t3;
    return;

    // label L4 at ./sources/obc_dao.move:571:5+1
L4:

    // abort($t7) at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::do_revoke_vote [verification] at ./sources/obc_dao.move:546:5+830
procedure {:timeLimit 40} $0_obc_dao_do_revoke_vote$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $Mutation ($0_obc_dao_Vote), _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($0_obc_dao_Vote), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $0_voting_pool_VotingObc;
    var $t5: $Mutation ($0_voting_pool_VotingObc);
    var $t6: $0_voting_pool_VotingObc;
    var $t7: int;
    var $t8: bool;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation ($0_obc_dao_ProposalInfo);
    var $t13: $Mutation (int);
    var $t14: $0_obc_dao_ProposalInfo;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($0_obc_dao_ProposalInfo);
    var $t18: $Mutation (int);
    var $t19: $2_tx_context_TxContext;
    var $t20: int;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $Mutation ($0_obc_dao_Vote);
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:546:5+1
    assume {:print "$at(4,16825,16826)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:546:5+1
    assume $IsValid'$0_obc_dao_Vote'($Dereference($t1));

    // assume WellFormed($t2) at ./sources/obc_dao.move:546:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:546:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:546:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[vote]($t1) at ./sources/obc_dao.move:546:5+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[to_revoke]($t2) at ./sources/obc_dao.move:546:5+1
    assume {:print "$track_local(26,10,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:546:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // assume Ge(select balance::Balance.value(select voting_pool::VotingObc.principal(select obc_dao::Vote.vote($t1))), $t2) at ./sources/obc_dao.move:553:13+46
    assume {:print "$at(4,16990,17036)"} true;
    assume ($value#$2_balance_Balance'$2_obc_OBC'($principal#$0_voting_pool_VotingObc($vote#$0_obc_dao_Vote($Dereference($t1)))) >= $t2);

    // $t5 := borrow_field<obc_dao::Vote>.vote($t1) at ./sources/obc_dao.move:558:48+14
    assume {:print "$at(4,17199,17213)"} true;
    $t5 := $ChildMutation($t1, 3, $vote#$0_obc_dao_Vote($Dereference($t1)));

    // $t6 := voting_pool::split($t5, $t2, $t3) on_abort goto L4 with $t7 at ./sources/obc_dao.move:558:29+50
    call $t6,$t5,$t3 := $0_voting_pool_split($t5, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,17180,17230)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // write_back[Reference($t1).vote (voting_pool::VotingObc)]($t5) at ./sources/obc_dao.move:558:29+50
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Vote'_vote($Dereference($t1), $Dereference($t5)));

    // trace_local[vote]($t1) at ./sources/obc_dao.move:558:29+50
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[reverted_vote#1#0]($t6) at ./sources/obc_dao.move:558:13+13
    assume {:print "$track_local(26,10,4):", $t6} $t6 == $t6;

    // $t8 := get_field<obc_dao::Vote>.agree($t1) at ./sources/obc_dao.move:560:13+10
    assume {:print "$at(4,17245,17255)"} true;
    $t8 := $agree#$0_obc_dao_Vote($Dereference($t1));

    // if ($t8) goto L1 else goto L0 at ./sources/obc_dao.move:560:9+218
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:561:43+8
    assume {:print "$at(4,17301,17309)"} true;
L1:

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:561:43+17
    assume {:print "$at(4,17301,17318)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t10 := get_field<obc_dao::ProposalInfo>.for_votes($t9) at ./sources/obc_dao.move:561:43+27
    $t10 := $for_votes#$0_obc_dao_ProposalInfo($t9);

    // $t11 := -($t10, $t2) on_abort goto L4 with $t7 at ./sources/obc_dao.move:561:71+1
    call $t11 := $Sub($t10, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,17329,17330)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t12 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:561:13+17
    $t12 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t13 := borrow_field<obc_dao::ProposalInfo>.for_votes($t12) at ./sources/obc_dao.move:561:13+27
    $t13 := $ChildMutation($t12, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t12)));

    // write_ref($t13, $t11) at ./sources/obc_dao.move:561:13+69
    $t13 := $UpdateMutation($t13, $t11);

    // write_back[Reference($t12).for_votes (u64)]($t13) at ./sources/obc_dao.move:561:13+69
    $t12 := $UpdateMutation($t12, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t12), $Dereference($t13)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t12) at ./sources/obc_dao.move:561:13+69
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t12)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:561:13+69
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:561:82+1
    goto L2;

    // label L0 at ./sources/obc_dao.move:563:47+8
    assume {:print "$at(4,17405,17413)"} true;
L0:

    // $t14 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:563:47+17
    assume {:print "$at(4,17405,17422)"} true;
    $t14 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t15 := get_field<obc_dao::ProposalInfo>.against_votes($t14) at ./sources/obc_dao.move:563:47+31
    $t15 := $against_votes#$0_obc_dao_ProposalInfo($t14);

    // $t16 := -($t15, $t2) on_abort goto L4 with $t7 at ./sources/obc_dao.move:563:79+1
    call $t16 := $Sub($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,17437,17438)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t17 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:563:13+17
    $t17 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t18 := borrow_field<obc_dao::ProposalInfo>.against_votes($t17) at ./sources/obc_dao.move:563:13+31
    $t18 := $ChildMutation($t17, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t17)));

    // write_ref($t18, $t16) at ./sources/obc_dao.move:563:13+77
    $t18 := $UpdateMutation($t18, $t16);

    // write_back[Reference($t17).against_votes (u64)]($t18) at ./sources/obc_dao.move:563:13+77
    $t17 := $UpdateMutation($t17, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t17), $Dereference($t18)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t17) at ./sources/obc_dao.move:563:13+77
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t17)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:563:13+77
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L2 at ./sources/obc_dao.move:565:9+79
    assume {:print "$at(4,17469,17548)"} true;
L2:

    // assert Eq<u64>(select balance::Balance.value(select voting_pool::VotingObc.principal($t6)), $t2) at ./sources/obc_dao.move:566:13+50
    assume {:print "$at(4,17488,17538)"} true;
    assert {:msg "assert_failed(4,17488,17538): unknown assertion failed"}
      $IsEqual'u64'($value#$2_balance_Balance'$2_obc_OBC'($principal#$0_voting_pool_VotingObc($t6)), $t2);

    // $t19 := read_ref($t3) at ./sources/obc_dao.move:570:69+3
    assume {:print "$at(4,17643,17646)"} true;
    $t19 := $Dereference($t3);

    // $t20 := tx_context::sender($t19) on_abort goto L4 with $t7 at ./sources/obc_dao.move:570:50+23
    call $t20 := $2_tx_context_sender($t19);
    if ($abort_flag) {
        assume {:print "$at(4,17624,17647)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // transfer::public_transfer<voting_pool::VotingObc>($t6, $t20) on_abort goto L4 with $t7 at ./sources/obc_dao.move:570:9+65
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t6, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,17583,17648)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:570:74+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,10,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[vote]($t1) at ./sources/obc_dao.move:570:74+1
    $temp_0'$0_obc_dao_Vote' := $Dereference($t1);
    assume {:print "$track_local(26,10,1):", $temp_0'$0_obc_dao_Vote'} $temp_0'$0_obc_dao_Vote' == $temp_0'$0_obc_dao_Vote';

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:570:74+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
L3:

    // return () at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t3;
    return;

    // label L4 at ./sources/obc_dao.move:571:5+1
L4:

    // abort($t7) at ./sources/obc_dao.move:571:5+1
    assume {:print "$at(4,17654,17655)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::extract_proposal_action [verification] at ./sources/obc_dao.move:663:5+375
procedure {:timeLimit 40} $0_obc_dao_extract_proposal_action$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $2_clock_Clock) returns ($ret0: $0_obc_dao_OBCDaoAction, $ret1: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t2: $2_clock_Clock;
    var $t3: $0_obc_dao_Proposal;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: $0_obc_dao_OBCDaoAction;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $2_clock_Clock;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:663:5+1
    assume {:print "$at(4,20650,20651)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:663:5+1
    assume $IsValid'$2_clock_Clock'($t1);

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:663:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,15,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[clock]($t1) at ./sources/obc_dao.move:663:5+1
    assume {:print "$track_local(26,15,1):", $t1} $t1 == $t1;

    // $t3 := read_ref($t0) at ./sources/obc_dao.move:669:27+17
    assume {:print "$at(4,20872,20889)"} true;
    $t3 := $Dereference($t0);

    // $t4 := obc_dao::proposal_state($t3, $t1) on_abort goto L4 with $t5 at ./sources/obc_dao.move:669:13+31
    call $t4 := $0_obc_dao_proposal_state($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,20858,20889)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(26,15):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t6 := 6 at ./sources/obc_dao.move:669:48+10
    $t6 := 6;
    assume $IsValid'u8'($t6);

    // $t7 := ==($t4, $t6) at ./sources/obc_dao.move:669:45+2
    $t7 := $IsEqual'u8'($t4, $t6);

    // if ($t7) goto L1 else goto L0 at ./sources/obc_dao.move:668:9+119
    assume {:print "$at(4,20837,20956)"} true;
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:668:9+119
L1:

    // goto L2 at ./sources/obc_dao.move:668:9+119
    assume {:print "$at(4,20837,20956)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:668:9+119
L0:

    // destroy($t0) at ./sources/obc_dao.move:668:9+119
    assume {:print "$at(4,20837,20956)"} true;

    // $t8 := 1403 at ./sources/obc_dao.move:670:13+28
    assume {:print "$at(4,20917,20945)"} true;
    $t8 := 1403;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/obc_dao.move:668:9+119
    assume {:print "$at(4,20837,20956)"} true;
    assume {:print "$track_abort(26,15):", $t8} $t8 == $t8;

    // $t5 := move($t8) at ./sources/obc_dao.move:668:9+119
    $t5 := $t8;

    // goto L4 at ./sources/obc_dao.move:668:9+119
    goto L4;

    // label L2 at ./sources/obc_dao.move:672:22+8
    assume {:print "$at(4,20979,20987)"} true;
L2:

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:672:22+17
    assume {:print "$at(4,20979,20996)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t10 := get_field<obc_dao::ProposalInfo>.action($t9) at ./sources/obc_dao.move:672:22+24
    $t10 := $action#$0_obc_dao_ProposalInfo($t9);

    // trace_return[0]($t10) at ./sources/obc_dao.move:673:9+6
    assume {:print "$at(4,21013,21019)"} true;
    assume {:print "$track_return(26,15,0):", $t10} $t10 == $t10;

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:673:9+6
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,15,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L3 at ./sources/obc_dao.move:674:5+1
    assume {:print "$at(4,21024,21025)"} true;
L3:

    // return $t10 at ./sources/obc_dao.move:674:5+1
    assume {:print "$at(4,21024,21025)"} true;
    $ret0 := $t10;
    $ret1 := $t0;
    return;

    // label L4 at ./sources/obc_dao.move:674:5+1
L4:

    // abort($t5) at ./sources/obc_dao.move:674:5+1
    assume {:print "$at(4,21024,21025)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun obc_dao::generate_next_action_id [baseline] at ./sources/obc_dao.move:810:5+198
procedure {:inline 1} $0_obc_dao_generate_next_action_id(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t3: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:810:5+1
    assume {:print "$at(4,24960,24961)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t3 := borrow_field<obc_dao::Dao>.info($t0) at ./sources/obc_dao.move:811:20+13
    assume {:print "$at(4,25029,25042)"} true;
    $t3 := $ChildMutation($t0, 3, $info#$0_obc_dao_Dao($Dereference($t0)));

    // trace_local[info#1#0]($t3) at ./sources/obc_dao.move:811:13+4
    $temp_0'$0_obc_dao_DaoGlobalInfo' := $Dereference($t3);
    assume {:print "$track_local(26,22,2):", $temp_0'$0_obc_dao_DaoGlobalInfo'} $temp_0'$0_obc_dao_DaoGlobalInfo' == $temp_0'$0_obc_dao_DaoGlobalInfo';

    // $t4 := get_field<obc_dao::DaoGlobalInfo>.next_action_id($t3) at ./sources/obc_dao.move:812:25+19
    assume {:print "$at(4,25068,25087)"} true;
    $t4 := $next_action_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3));

    // trace_local[action_id#1#0]($t4) at ./sources/obc_dao.move:812:13+9
    assume {:print "$track_local(26,22,1):", $t4} $t4 == $t4;

    // $t5 := 1 at ./sources/obc_dao.move:813:43+1
    assume {:print "$at(4,25131,25132)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := +($t4, $t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:813:41+1
    call $t6 := $AddU64($t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(4,25129,25130)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,22):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_field<obc_dao::DaoGlobalInfo>.next_action_id($t3) at ./sources/obc_dao.move:813:9+19
    $t8 := $ChildMutation($t3, 2, $next_action_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3)));

    // write_ref($t8, $t6) at ./sources/obc_dao.move:813:9+35
    $t8 := $UpdateMutation($t8, $t6);

    // write_back[Reference($t3).next_action_id (u64)]($t8) at ./sources/obc_dao.move:813:9+35
    $t3 := $UpdateMutation($t3, $Update'$0_obc_dao_DaoGlobalInfo'_next_action_id($Dereference($t3), $Dereference($t8)));

    // write_back[Reference($t0).info (obc_dao::DaoGlobalInfo)]($t3) at ./sources/obc_dao.move:813:9+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_info($Dereference($t0), $Dereference($t3)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:813:9+35
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t4) at ./sources/obc_dao.move:814:9+9
    assume {:print "$at(4,25142,25151)"} true;
    assume {:print "$track_return(26,22,0):", $t4} $t4 == $t4;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:814:9+9
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:814:9+9

    // label L1 at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:816:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::generate_next_action_id [verification] at ./sources/obc_dao.move:810:5+198
procedure {:timeLimit 40} $0_obc_dao_generate_next_action_id$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t3: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:810:5+1
    assume {:print "$at(4,24960,24961)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:810:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t3 := borrow_field<obc_dao::Dao>.info($t0) at ./sources/obc_dao.move:811:20+13
    assume {:print "$at(4,25029,25042)"} true;
    $t3 := $ChildMutation($t0, 3, $info#$0_obc_dao_Dao($Dereference($t0)));

    // trace_local[info#1#0]($t3) at ./sources/obc_dao.move:811:13+4
    $temp_0'$0_obc_dao_DaoGlobalInfo' := $Dereference($t3);
    assume {:print "$track_local(26,22,2):", $temp_0'$0_obc_dao_DaoGlobalInfo'} $temp_0'$0_obc_dao_DaoGlobalInfo' == $temp_0'$0_obc_dao_DaoGlobalInfo';

    // $t4 := get_field<obc_dao::DaoGlobalInfo>.next_action_id($t3) at ./sources/obc_dao.move:812:25+19
    assume {:print "$at(4,25068,25087)"} true;
    $t4 := $next_action_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3));

    // trace_local[action_id#1#0]($t4) at ./sources/obc_dao.move:812:13+9
    assume {:print "$track_local(26,22,1):", $t4} $t4 == $t4;

    // $t5 := 1 at ./sources/obc_dao.move:813:43+1
    assume {:print "$at(4,25131,25132)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := +($t4, $t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:813:41+1
    call $t6 := $AddU64($t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(4,25129,25130)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,22):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_field<obc_dao::DaoGlobalInfo>.next_action_id($t3) at ./sources/obc_dao.move:813:9+19
    $t8 := $ChildMutation($t3, 2, $next_action_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3)));

    // write_ref($t8, $t6) at ./sources/obc_dao.move:813:9+35
    $t8 := $UpdateMutation($t8, $t6);

    // write_back[Reference($t3).next_action_id (u64)]($t8) at ./sources/obc_dao.move:813:9+35
    $t3 := $UpdateMutation($t3, $Update'$0_obc_dao_DaoGlobalInfo'_next_action_id($Dereference($t3), $Dereference($t8)));

    // write_back[Reference($t0).info (obc_dao::DaoGlobalInfo)]($t3) at ./sources/obc_dao.move:813:9+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_info($Dereference($t0), $Dereference($t3)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:813:9+35
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t4) at ./sources/obc_dao.move:814:9+9
    assume {:print "$at(4,25142,25151)"} true;
    assume {:print "$track_return(26,22,0):", $t4} $t4 == $t4;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:814:9+9
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,22,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:816:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:816:5+1
    assume {:print "$at(4,25157,25158)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::generate_next_proposal_id [baseline] at ./sources/obc_dao.move:802:5+210
procedure {:inline 1} $0_obc_dao_generate_next_proposal_id(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t2: int;
    var $t3: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:802:5+1
    assume {:print "$at(4,24744,24745)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t3 := borrow_field<obc_dao::Dao>.info($t0) at ./sources/obc_dao.move:803:20+13
    assume {:print "$at(4,24815,24828)"} true;
    $t3 := $ChildMutation($t0, 3, $info#$0_obc_dao_Dao($Dereference($t0)));

    // trace_local[info#1#0]($t3) at ./sources/obc_dao.move:803:13+4
    $temp_0'$0_obc_dao_DaoGlobalInfo' := $Dereference($t3);
    assume {:print "$track_local(26,21,1):", $temp_0'$0_obc_dao_DaoGlobalInfo'} $temp_0'$0_obc_dao_DaoGlobalInfo' == $temp_0'$0_obc_dao_DaoGlobalInfo';

    // $t4 := get_field<obc_dao::DaoGlobalInfo>.next_proposal_id($t3) at ./sources/obc_dao.move:804:27+21
    assume {:print "$at(4,24856,24877)"} true;
    $t4 := $next_proposal_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3));

    // trace_local[proposal_id#1#0]($t4) at ./sources/obc_dao.move:804:13+11
    assume {:print "$track_local(26,21,2):", $t4} $t4 == $t4;

    // $t5 := 1 at ./sources/obc_dao.move:805:47+1
    assume {:print "$at(4,24925,24926)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := +($t4, $t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:805:45+1
    call $t6 := $AddU64($t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(4,24923,24924)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_field<obc_dao::DaoGlobalInfo>.next_proposal_id($t3) at ./sources/obc_dao.move:805:9+21
    $t8 := $ChildMutation($t3, 1, $next_proposal_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3)));

    // write_ref($t8, $t6) at ./sources/obc_dao.move:805:9+39
    $t8 := $UpdateMutation($t8, $t6);

    // write_back[Reference($t3).next_proposal_id (u64)]($t8) at ./sources/obc_dao.move:805:9+39
    $t3 := $UpdateMutation($t3, $Update'$0_obc_dao_DaoGlobalInfo'_next_proposal_id($Dereference($t3), $Dereference($t8)));

    // write_back[Reference($t0).info (obc_dao::DaoGlobalInfo)]($t3) at ./sources/obc_dao.move:805:9+39
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_info($Dereference($t0), $Dereference($t3)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:805:9+39
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t4) at ./sources/obc_dao.move:806:9+11
    assume {:print "$at(4,24936,24947)"} true;
    assume {:print "$track_return(26,21,0):", $t4} $t4 == $t4;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:806:9+11
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:806:9+11

    // label L1 at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:808:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::generate_next_proposal_id [verification] at ./sources/obc_dao.move:802:5+210
procedure {:timeLimit 40} $0_obc_dao_generate_next_proposal_id$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t2: int;
    var $t3: $Mutation ($0_obc_dao_DaoGlobalInfo);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoGlobalInfo': $0_obc_dao_DaoGlobalInfo;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:802:5+1
    assume {:print "$at(4,24744,24745)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:802:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t3 := borrow_field<obc_dao::Dao>.info($t0) at ./sources/obc_dao.move:803:20+13
    assume {:print "$at(4,24815,24828)"} true;
    $t3 := $ChildMutation($t0, 3, $info#$0_obc_dao_Dao($Dereference($t0)));

    // trace_local[info#1#0]($t3) at ./sources/obc_dao.move:803:13+4
    $temp_0'$0_obc_dao_DaoGlobalInfo' := $Dereference($t3);
    assume {:print "$track_local(26,21,1):", $temp_0'$0_obc_dao_DaoGlobalInfo'} $temp_0'$0_obc_dao_DaoGlobalInfo' == $temp_0'$0_obc_dao_DaoGlobalInfo';

    // $t4 := get_field<obc_dao::DaoGlobalInfo>.next_proposal_id($t3) at ./sources/obc_dao.move:804:27+21
    assume {:print "$at(4,24856,24877)"} true;
    $t4 := $next_proposal_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3));

    // trace_local[proposal_id#1#0]($t4) at ./sources/obc_dao.move:804:13+11
    assume {:print "$track_local(26,21,2):", $t4} $t4 == $t4;

    // $t5 := 1 at ./sources/obc_dao.move:805:47+1
    assume {:print "$at(4,24925,24926)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := +($t4, $t5) on_abort goto L2 with $t7 at ./sources/obc_dao.move:805:45+1
    call $t6 := $AddU64($t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(4,24923,24924)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_field<obc_dao::DaoGlobalInfo>.next_proposal_id($t3) at ./sources/obc_dao.move:805:9+21
    $t8 := $ChildMutation($t3, 1, $next_proposal_id#$0_obc_dao_DaoGlobalInfo($Dereference($t3)));

    // write_ref($t8, $t6) at ./sources/obc_dao.move:805:9+39
    $t8 := $UpdateMutation($t8, $t6);

    // write_back[Reference($t3).next_proposal_id (u64)]($t8) at ./sources/obc_dao.move:805:9+39
    $t3 := $UpdateMutation($t3, $Update'$0_obc_dao_DaoGlobalInfo'_next_proposal_id($Dereference($t3), $Dereference($t8)));

    // write_back[Reference($t0).info (obc_dao::DaoGlobalInfo)]($t3) at ./sources/obc_dao.move:805:9+39
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_info($Dereference($t0), $Dereference($t3)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:805:9+39
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t4) at ./sources/obc_dao.move:806:9+11
    assume {:print "$at(4,24936,24947)"} true;
    assume {:print "$track_return(26,21,0):", $t4} $t4 == $t4;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:806:9+11
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,21,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:808:5+1
L2:

    // abort($t7) at ./sources/obc_dao.move:808:5+1
    assume {:print "$at(4,24953,24954)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::getDaoActionByActionId [baseline] at ./sources/obc_dao.move:283:5+155
procedure {:inline 1} $0_obc_dao_getDaoActionByActionId(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: int) returns ($ret0: $0_obc_dao_OBCDaoAction, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t2: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t3: $0_obc_dao_OBCDaoAction;
    var $t4: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:283:5+1
    assume {:print "$at(4,8699,8700)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,3,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[actionId]($t1) at ./sources/obc_dao.move:283:5+1
    assume {:print "$track_local(26,3,1):", $t1} $t1 == $t1;

    // $t2 := get_field<obc_dao::Dao>.actionRecord($t0) at ./sources/obc_dao.move:284:33+17
    assume {:print "$at(4,8804,8821)"} true;
    $t2 := $actionRecord#$0_obc_dao_Dao($Dereference($t0));

    // $t3 := vec_map::get<u64, obc_dao::OBCDaoAction>($t2, $t1) on_abort goto L2 with $t4 at ./sources/obc_dao.move:284:20+42
    call $t3 := $2_vec_map_get'u64_$0_obc_dao_OBCDaoAction'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,8791,8833)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,3):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/obc_dao.move:285:9+5
    assume {:print "$at(4,8843,8848)"} true;
    assume {:print "$track_return(26,3,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:285:9+5
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,3,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:285:9+5

    // label L1 at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:286:5+1
L2:

    // abort($t4) at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun obc_dao::getDaoActionByActionId [verification] at ./sources/obc_dao.move:283:5+155
procedure {:timeLimit 40} $0_obc_dao_getDaoActionByActionId$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: int) returns ($ret0: $0_obc_dao_OBCDaoAction, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t2: $2_vec_map_VecMap'u64_$0_obc_dao_OBCDaoAction';
    var $t3: $0_obc_dao_OBCDaoAction;
    var $t4: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:283:5+1
    assume {:print "$at(4,8699,8700)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:283:5+1
    assume $IsValid'u64'($t1);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:283:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,3,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[actionId]($t1) at ./sources/obc_dao.move:283:5+1
    assume {:print "$track_local(26,3,1):", $t1} $t1 == $t1;

    // $t2 := get_field<obc_dao::Dao>.actionRecord($t0) at ./sources/obc_dao.move:284:33+17
    assume {:print "$at(4,8804,8821)"} true;
    $t2 := $actionRecord#$0_obc_dao_Dao($Dereference($t0));

    // $t3 := vec_map::get<u64, obc_dao::OBCDaoAction>($t2, $t1) on_abort goto L2 with $t4 at ./sources/obc_dao.move:284:20+42
    call $t3 := $2_vec_map_get'u64_$0_obc_dao_OBCDaoAction'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,8791,8833)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,3):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/obc_dao.move:285:9+5
    assume {:print "$at(4,8843,8848)"} true;
    assume {:print "$track_return(26,3,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:285:9+5
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,3,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:286:5+1
L2:

    // abort($t4) at ./sources/obc_dao.move:286:5+1
    assume {:print "$at(4,8853,8854)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun obc_dao::getOBCDaoActionId [verification] at ./sources/obc_dao.move:153:5+99
procedure {:timeLimit 40} $0_obc_dao_getOBCDaoActionId$verify(_$t0: $0_obc_dao_OBCDaoAction) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:153:5+1
    assume {:print "$at(4,4897,4898)"} true;
    assume $IsValid'$0_obc_dao_OBCDaoAction'($t0);

    // trace_local[obcDaoAction]($t0) at ./sources/obc_dao.move:153:5+1
    assume {:print "$track_local(26,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<obc_dao::OBCDaoAction>.actionId($t0) at ./sources/obc_dao.move:154:9+21
    assume {:print "$at(4,4969,4990)"} true;
    $t1 := $actionId#$0_obc_dao_OBCDaoAction($t0);

    // trace_return[0]($t1) at ./sources/obc_dao.move:154:9+21
    assume {:print "$track_return(26,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/obc_dao.move:155:5+1
    assume {:print "$at(4,4995,4996)"} true;
L1:

    // return $t1 at ./sources/obc_dao.move:155:5+1
    assume {:print "$at(4,4995,4996)"} true;
    $ret0 := $t1;
    return;

}

// fun obc_dao::get_config [baseline] at ./sources/obc_dao.move:852:5+77
procedure {:inline 1} $0_obc_dao_get_config(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: $Mutation ($0_obc_dao_DaoConfig), $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:852:5+1
    assume {:print "$at(4,26181,26182)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := borrow_field<obc_dao::Dao>.config($t0) at ./sources/obc_dao.move:853:9+15
    assume {:print "$at(4,26237,26252)"} true;
    $t1 := $ChildMutation($t0, 2, $config#$0_obc_dao_Dao($Dereference($t0)));

    // trace_return[0]($t1) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t1);
    assume {:print "$track_return(26,28,0):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // trace_local[dao]($t0) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[dao]($t0) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // label L1 at ./sources/obc_dao.move:854:5+1
    assume {:print "$at(4,26257,26258)"} true;
L1:

    // return $t1 at ./sources/obc_dao.move:854:5+1
    assume {:print "$at(4,26257,26258)"} true;
    $ret0 := $t1;
    $ret1 := $t0;
    return;

}

// fun obc_dao::get_config [verification] at ./sources/obc_dao.move:852:5+77
procedure {:timeLimit 40} $0_obc_dao_get_config$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: $Mutation ($0_obc_dao_DaoConfig), $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:852:5+1
    assume {:print "$at(4,26181,26182)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:852:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := borrow_field<obc_dao::Dao>.config($t0) at ./sources/obc_dao.move:853:9+15
    assume {:print "$at(4,26237,26252)"} true;
    $t1 := $ChildMutation($t0, 2, $config#$0_obc_dao_Dao($Dereference($t0)));

    // trace_return[0]($t1) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t1);
    assume {:print "$track_return(26,28,0):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // trace_local[dao]($t0) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[dao]($t0) at ./sources/obc_dao.move:853:9+15
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,28,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // label L1 at ./sources/obc_dao.move:854:5+1
    assume {:print "$at(4,26257,26258)"} true;
L1:

    // return $t1 at ./sources/obc_dao.move:854:5+1
    assume {:print "$at(4,26257,26258)"} true;
    $ret0 := $t1;
    $ret1 := $t0;
    return;

}

// fun obc_dao::has_vote [verification] at ./sources/obc_dao.move:632:5+339
procedure {:timeLimit 40} $0_obc_dao_has_vote$verify(_$t0: $0_obc_dao_Vote, _$t1: $Mutation ($0_obc_dao_Proposal)) returns ($ret0: bool, $ret1: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $0_obc_dao_ProposalInfo;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: bool;
    var $t12: $0_obc_dao_BooleanEvent;
    var $t13: int;
    var $t14: int;
    var $t15: $0_obc_dao_ProposalInfo;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: $0_obc_dao_ProposalInfo;
    var $t20: int;
    var $t21: bool;
    var $t0: $0_obc_dao_Vote;
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:632:5+1
    assume {:print "$at(4,19681,19682)"} true;
    assume $IsValid'$0_obc_dao_Vote'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:632:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t1));

    // trace_local[vote]($t0) at ./sources/obc_dao.move:632:5+1
    assume {:print "$track_local(26,13,0):", $t0} $t0 == $t0;

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:632:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,13,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t4 := get_field<obc_dao::Vote>.proposer($t0) at ./sources/obc_dao.move:638:13+13
    assume {:print "$at(4,19842,19855)"} true;
    $t4 := $proposer#$0_obc_dao_Vote($t0);

    // $t5 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:638:30+17
    $t5 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t6 := get_field<obc_dao::ProposalInfo>.proposer($t5) at ./sources/obc_dao.move:638:30+26
    $t6 := $proposer#$0_obc_dao_ProposalInfo($t5);

    // $t7 := ==($t4, $t6) at ./sources/obc_dao.move:638:27+2
    $t7 := $IsEqual'address'($t4, $t6);

    // if ($t7) goto L1 else goto L0 at ./sources/obc_dao.move:638:13+80
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:638:60+4
L1:

    // $t8 := get_field<obc_dao::Vote>.vid($t0) at ./sources/obc_dao.move:638:60+8
    assume {:print "$at(4,19889,19897)"} true;
    $t8 := $vid#$0_obc_dao_Vote($t0);

    // $t9 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:638:72+17
    $t9 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t10 := get_field<obc_dao::ProposalInfo>.pid($t9) at ./sources/obc_dao.move:638:72+21
    $t10 := $pid#$0_obc_dao_ProposalInfo($t9);

    // $t2 := ==($t8, $t10) at ./sources/obc_dao.move:638:69+2
    $t2 := $IsEqual'u64'($t8, $t10);

    // goto L2 at ./sources/obc_dao.move:638:13+80
    goto L2;

    // label L0 at ./sources/obc_dao.move:638:13+80
L0:

    // $t11 := false at ./sources/obc_dao.move:638:13+80
    assume {:print "$at(4,19842,19922)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t2 := $t11 at ./sources/obc_dao.move:638:13+80
    $t2 := $t11;

    // label L2 at ./sources/obc_dao.move:638:13+80
L2:

    // $t12 := pack obc_dao::BooleanEvent($t2) at ./sources/obc_dao.move:637:13+113
    assume {:print "$at(4,19810,19923)"} true;
    $t12 := $0_obc_dao_BooleanEvent($t2);

    // event::emit<obc_dao::BooleanEvent>($t12) on_abort goto L7 with $t13 at ./sources/obc_dao.move:636:9+139
    assume {:print "$at(4,19785,19924)"} true;
    call $2_event_emit'$0_obc_dao_BooleanEvent'($t12);
    if ($abort_flag) {
        assume {:print "$at(4,19785,19924)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(26,13):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t14 := get_field<obc_dao::Vote>.proposer($t0) at ./sources/obc_dao.move:639:9+13
    assume {:print "$at(4,19934,19947)"} true;
    $t14 := $proposer#$0_obc_dao_Vote($t0);

    // $t15 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:639:26+17
    $t15 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t16 := get_field<obc_dao::ProposalInfo>.proposer($t15) at ./sources/obc_dao.move:639:26+26
    $t16 := $proposer#$0_obc_dao_ProposalInfo($t15);

    // $t17 := ==($t14, $t16) at ./sources/obc_dao.move:639:23+2
    $t17 := $IsEqual'address'($t14, $t16);

    // if ($t17) goto L4 else goto L3 at ./sources/obc_dao.move:639:9+80
    if ($t17) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:639:56+4
L4:

    // $t18 := get_field<obc_dao::Vote>.vid($t0) at ./sources/obc_dao.move:639:56+8
    assume {:print "$at(4,19981,19989)"} true;
    $t18 := $vid#$0_obc_dao_Vote($t0);

    // $t19 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:639:68+17
    $t19 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t20 := get_field<obc_dao::ProposalInfo>.pid($t19) at ./sources/obc_dao.move:639:68+21
    $t20 := $pid#$0_obc_dao_ProposalInfo($t19);

    // $t3 := ==($t18, $t20) at ./sources/obc_dao.move:639:65+2
    $t3 := $IsEqual'u64'($t18, $t20);

    // goto L5 at ./sources/obc_dao.move:639:9+80
    goto L5;

    // label L3 at ./sources/obc_dao.move:639:9+80
L3:

    // destroy($t1) at ./sources/obc_dao.move:639:9+80
    assume {:print "$at(4,19934,20014)"} true;

    // $t21 := false at ./sources/obc_dao.move:639:9+80
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t3 := $t21 at ./sources/obc_dao.move:639:9+80
    $t3 := $t21;

    // label L5 at ./sources/obc_dao.move:639:9+80
L5:

    // trace_return[0]($t3) at ./sources/obc_dao.move:639:9+80
    assume {:print "$at(4,19934,20014)"} true;
    assume {:print "$track_return(26,13,0):", $t3} $t3 == $t3;

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:639:9+80
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,13,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L6 at ./sources/obc_dao.move:640:5+1
    assume {:print "$at(4,20019,20020)"} true;
L6:

    // return $t3 at ./sources/obc_dao.move:640:5+1
    assume {:print "$at(4,20019,20020)"} true;
    $ret0 := $t3;
    $ret1 := $t1;
    return;

    // label L7 at ./sources/obc_dao.move:640:5+1
L7:

    // abort($t13) at ./sources/obc_dao.move:640:5+1
    assume {:print "$at(4,20019,20020)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun obc_dao::judge_proposal_state [baseline] at ./sources/obc_dao.move:746:5+858
procedure {:inline 1} $0_obc_dao_judge_proposal_state(_$t0: $0_obc_dao_Proposal, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $0_obc_dao_ProposalInfo;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: $0_obc_dao_ProposalInfo;
    var $t18: int;
    var $t19: $0_obc_dao_ProposalInfo;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: $0_obc_dao_ProposalInfo;
    var $t24: int;
    var $t25: $0_obc_dao_ProposalInfo;
    var $t26: int;
    var $t27: int;
    var $t28: $0_obc_dao_ProposalInfo;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $0_obc_dao_ProposalInfo;
    var $t34: int;
    var $t35: bool;
    var $t36: int;
    var $t37: $0_obc_dao_ProposalInfo;
    var $t38: $0_obc_dao_OBCDaoAction;
    var $t39: int;
    var $t40: int;
    var $t41: bool;
    var $t42: int;
    var $t43: int;
    var $t0: $0_obc_dao_Proposal;
    var $t1: int;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[proposal]($t0) at ./sources/obc_dao.move:746:5+1
    assume {:print "$at(4,23061,23062)"} true;
    assume {:print "$track_local(26,19,0):", $t0} $t0 == $t0;

    // trace_local[current_time]($t1) at ./sources/obc_dao.move:746:5+1
    assume {:print "$track_local(26,19,1):", $t1} $t1 == $t1;

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:750:28+17
    assume {:print "$at(4,23182,23199)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($t0);

    // $t10 := get_field<obc_dao::ProposalInfo>.start_time($t9) at ./sources/obc_dao.move:750:28+28
    $t10 := $start_time#$0_obc_dao_ProposalInfo($t9);

    // $t11 := <($t1, $t10) at ./sources/obc_dao.move:750:26+1
    call $t11 := $Lt($t1, $t10);

    // if ($t11) goto L1 else goto L0 at ./sources/obc_dao.move:750:9+750
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:750:9+750
L1:

    // $t12 := 1 at ./sources/obc_dao.move:752:13+7
    assume {:print "$at(4,23249,23256)"} true;
    $t12 := 1;
    assume $IsValid'u8'($t12);

    // $t8 := $t12 at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    $t8 := $t12;

    // goto L2 at ./sources/obc_dao.move:750:9+750
    goto L2;

    // label L0 at ./sources/obc_dao.move:753:20+12
    assume {:print "$at(4,23276,23288)"} true;
L0:

    // $t13 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:753:36+17
    assume {:print "$at(4,23292,23309)"} true;
    $t13 := $proposal#$0_obc_dao_Proposal($t0);

    // $t14 := get_field<obc_dao::ProposalInfo>.end_time($t13) at ./sources/obc_dao.move:753:36+26
    $t14 := $end_time#$0_obc_dao_ProposalInfo($t13);

    // $t15 := <=($t1, $t14) at ./sources/obc_dao.move:753:33+2
    call $t15 := $Le($t1, $t14);

    // if ($t15) goto L4 else goto L3 at ./sources/obc_dao.move:753:16+641
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:753:16+641
L4:

    // $t16 := 2 at ./sources/obc_dao.move:755:13+6
    assume {:print "$at(4,23356,23362)"} true;
    $t16 := 2;
    assume $IsValid'u8'($t16);

    // $t7 := $t16 at ./sources/obc_dao.move:753:16+641
    assume {:print "$at(4,23272,23913)"} true;
    $t7 := $t16;

    // goto L5 at ./sources/obc_dao.move:753:16+641
    goto L5;

    // label L3 at ./sources/obc_dao.move:756:20+8
    assume {:print "$at(4,23382,23390)"} true;
L3:

    // $t17 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:756:20+17
    assume {:print "$at(4,23382,23399)"} true;
    $t17 := $proposal#$0_obc_dao_Proposal($t0);

    // $t18 := get_field<obc_dao::ProposalInfo>.for_votes($t17) at ./sources/obc_dao.move:756:20+27
    $t18 := $for_votes#$0_obc_dao_ProposalInfo($t17);

    // $t19 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:756:51+17
    $t19 := $proposal#$0_obc_dao_Proposal($t0);

    // $t20 := get_field<obc_dao::ProposalInfo>.against_votes($t19) at ./sources/obc_dao.move:756:51+31
    $t20 := $against_votes#$0_obc_dao_ProposalInfo($t19);

    // $t21 := <=($t18, $t20) at ./sources/obc_dao.move:756:48+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L7 else goto L6 at ./sources/obc_dao.move:756:20+138
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao.move:756:20+138
L7:

    // $t22 := true at ./sources/obc_dao.move:756:20+138
    assume {:print "$at(4,23382,23520)"} true;
    $t22 := true;
    assume $IsValid'bool'($t22);

    // $t2 := $t22 at ./sources/obc_dao.move:756:20+138
    $t2 := $t22;

    // goto L8 at ./sources/obc_dao.move:756:20+138
    goto L8;

    // label L6 at ./sources/obc_dao.move:757:13+8
    assume {:print "$at(4,23460,23468)"} true;
L6:

    // $t23 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:757:13+17
    assume {:print "$at(4,23460,23477)"} true;
    $t23 := $proposal#$0_obc_dao_Proposal($t0);

    // $t24 := get_field<obc_dao::ProposalInfo>.for_votes($t23) at ./sources/obc_dao.move:757:13+27
    $t24 := $for_votes#$0_obc_dao_ProposalInfo($t23);

    // $t25 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:757:43+17
    $t25 := $proposal#$0_obc_dao_Proposal($t0);

    // $t26 := get_field<obc_dao::ProposalInfo>.quorum_votes($t25) at ./sources/obc_dao.move:757:43+30
    $t26 := $quorum_votes#$0_obc_dao_ProposalInfo($t25);

    // $t2 := <($t24, $t26) at ./sources/obc_dao.move:757:41+1
    call $t2 := $Lt($t24, $t26);

    // label L8 at ./sources/obc_dao.move:756:20+138
    assume {:print "$at(4,23382,23520)"} true;
L8:

    // if ($t2) goto L10 else goto L9 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    if ($t2) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:756:16+535
L10:

    // $t27 := 3 at ./sources/obc_dao.move:759:13+8
    assume {:print "$at(4,23560,23568)"} true;
    $t27 := 3;
    assume $IsValid'u8'($t27);

    // $t6 := $t27 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    $t6 := $t27;

    // goto L11 at ./sources/obc_dao.move:756:16+535
    goto L11;

    // label L9 at ./sources/obc_dao.move:760:20+8
    assume {:print "$at(4,23588,23596)"} true;
L9:

    // $t28 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:760:20+17
    assume {:print "$at(4,23588,23605)"} true;
    $t28 := $proposal#$0_obc_dao_Proposal($t0);

    // $t29 := get_field<obc_dao::ProposalInfo>.eta($t28) at ./sources/obc_dao.move:760:20+21
    $t29 := $eta#$0_obc_dao_ProposalInfo($t28);

    // $t30 := 0 at ./sources/obc_dao.move:760:45+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := ==($t29, $t30) at ./sources/obc_dao.move:760:42+2
    $t31 := $IsEqual'u64'($t29, $t30);

    // if ($t31) goto L13 else goto L12 at ./sources/obc_dao.move:760:16+329
    if ($t31) { goto L13; } else { goto L12; }

    // label L13 at ./sources/obc_dao.move:760:16+329
L13:

    // $t32 := 4 at ./sources/obc_dao.move:762:13+6
    assume {:print "$at(4,23653,23659)"} true;
    $t32 := 4;
    assume $IsValid'u8'($t32);

    // $t5 := $t32 at ./sources/obc_dao.move:760:16+329
    assume {:print "$at(4,23584,23913)"} true;
    $t5 := $t32;

    // goto L14 at ./sources/obc_dao.move:760:16+329
    goto L14;

    // label L12 at ./sources/obc_dao.move:763:20+12
    assume {:print "$at(4,23679,23691)"} true;
L12:

    // $t33 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:763:35+17
    assume {:print "$at(4,23694,23711)"} true;
    $t33 := $proposal#$0_obc_dao_Proposal($t0);

    // $t34 := get_field<obc_dao::ProposalInfo>.eta($t33) at ./sources/obc_dao.move:763:35+21
    $t34 := $eta#$0_obc_dao_ProposalInfo($t33);

    // $t35 := <($t1, $t34) at ./sources/obc_dao.move:763:33+1
    call $t35 := $Lt($t1, $t34);

    // if ($t35) goto L16 else goto L15 at ./sources/obc_dao.move:763:16+238
    if ($t35) { goto L16; } else { goto L15; }

    // label L16 at ./sources/obc_dao.move:763:16+238
L16:

    // $t36 := 5 at ./sources/obc_dao.move:765:13+6
    assume {:print "$at(4,23773,23779)"} true;
    $t36 := 5;
    assume $IsValid'u8'($t36);

    // $t4 := $t36 at ./sources/obc_dao.move:763:16+238
    assume {:print "$at(4,23675,23913)"} true;
    $t4 := $t36;

    // goto L17 at ./sources/obc_dao.move:763:16+238
    goto L17;

    // label L15 at ./sources/obc_dao.move:766:20+8
    assume {:print "$at(4,23799,23807)"} true;
L15:

    // $t37 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:766:20+17
    assume {:print "$at(4,23799,23816)"} true;
    $t37 := $proposal#$0_obc_dao_Proposal($t0);

    // $t38 := get_field<obc_dao::ProposalInfo>.action($t37) at ./sources/obc_dao.move:766:20+24
    $t38 := $action#$0_obc_dao_ProposalInfo($t37);

    // $t39 := get_field<obc_dao::OBCDaoAction>.actionId($t38) at ./sources/obc_dao.move:766:20+33
    $t39 := $actionId#$0_obc_dao_OBCDaoAction($t38);

    // $t40 := 0 at ./sources/obc_dao.move:766:57+1
    $t40 := 0;
    assume $IsValid'u64'($t40);

    // $t41 := !=($t39, $t40) at ./sources/obc_dao.move:766:54+2
    $t41 := !$IsEqual'u64'($t39, $t40);

    // if ($t41) goto L19 else goto L18 at ./sources/obc_dao.move:766:16+118
    if ($t41) { goto L19; } else { goto L18; }

    // label L19 at ./sources/obc_dao.move:767:13+10
    assume {:print "$at(4,23854,23864)"} true;
L19:

    // $t42 := 6 at ./sources/obc_dao.move:767:13+10
    assume {:print "$at(4,23854,23864)"} true;
    $t42 := 6;
    assume $IsValid'u8'($t42);

    // $t3 := $t42 at ./sources/obc_dao.move:766:16+118
    assume {:print "$at(4,23795,23913)"} true;
    $t3 := $t42;

    // goto L20 at ./sources/obc_dao.move:766:16+118
    goto L20;

    // label L18 at ./sources/obc_dao.move:769:13+9
    assume {:print "$at(4,23894,23903)"} true;
L18:

    // $t43 := 7 at ./sources/obc_dao.move:769:13+9
    assume {:print "$at(4,23894,23903)"} true;
    $t43 := 7;
    assume $IsValid'u8'($t43);

    // $t3 := $t43 at ./sources/obc_dao.move:766:16+118
    assume {:print "$at(4,23795,23913)"} true;
    $t3 := $t43;

    // label L20 at ./sources/obc_dao.move:766:16+118
L20:

    // $t4 := $t3 at ./sources/obc_dao.move:763:16+238
    assume {:print "$at(4,23675,23913)"} true;
    $t4 := $t3;

    // label L17 at ./sources/obc_dao.move:763:16+238
L17:

    // $t5 := $t4 at ./sources/obc_dao.move:760:16+329
    assume {:print "$at(4,23584,23913)"} true;
    $t5 := $t4;

    // label L14 at ./sources/obc_dao.move:760:16+329
L14:

    // $t6 := $t5 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    $t6 := $t5;

    // label L11 at ./sources/obc_dao.move:756:16+535
L11:

    // $t7 := $t6 at ./sources/obc_dao.move:753:16+641
    assume {:print "$at(4,23272,23913)"} true;
    $t7 := $t6;

    // label L5 at ./sources/obc_dao.move:753:16+641
L5:

    // $t8 := $t7 at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    $t8 := $t7;

    // label L2 at ./sources/obc_dao.move:750:9+750
L2:

    // trace_return[0]($t8) at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    assume {:print "$track_return(26,19,0):", $t8} $t8 == $t8;

    // label L21 at ./sources/obc_dao.move:771:5+1
    assume {:print "$at(4,23918,23919)"} true;
L21:

    // return $t8 at ./sources/obc_dao.move:771:5+1
    assume {:print "$at(4,23918,23919)"} true;
    $ret0 := $t8;
    return;

}

// fun obc_dao::judge_proposal_state [verification] at ./sources/obc_dao.move:746:5+858
procedure {:timeLimit 40} $0_obc_dao_judge_proposal_state$verify(_$t0: $0_obc_dao_Proposal, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $0_obc_dao_ProposalInfo;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: $0_obc_dao_ProposalInfo;
    var $t18: int;
    var $t19: $0_obc_dao_ProposalInfo;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: $0_obc_dao_ProposalInfo;
    var $t24: int;
    var $t25: $0_obc_dao_ProposalInfo;
    var $t26: int;
    var $t27: int;
    var $t28: $0_obc_dao_ProposalInfo;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $0_obc_dao_ProposalInfo;
    var $t34: int;
    var $t35: bool;
    var $t36: int;
    var $t37: $0_obc_dao_ProposalInfo;
    var $t38: $0_obc_dao_OBCDaoAction;
    var $t39: int;
    var $t40: int;
    var $t41: bool;
    var $t42: int;
    var $t43: int;
    var $t0: $0_obc_dao_Proposal;
    var $t1: int;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:746:5+1
    assume {:print "$at(4,23061,23062)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:746:5+1
    assume $IsValid'u64'($t1);

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:746:5+1
    assume {:print "$track_local(26,19,0):", $t0} $t0 == $t0;

    // trace_local[current_time]($t1) at ./sources/obc_dao.move:746:5+1
    assume {:print "$track_local(26,19,1):", $t1} $t1 == $t1;

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:750:28+17
    assume {:print "$at(4,23182,23199)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($t0);

    // $t10 := get_field<obc_dao::ProposalInfo>.start_time($t9) at ./sources/obc_dao.move:750:28+28
    $t10 := $start_time#$0_obc_dao_ProposalInfo($t9);

    // $t11 := <($t1, $t10) at ./sources/obc_dao.move:750:26+1
    call $t11 := $Lt($t1, $t10);

    // if ($t11) goto L1 else goto L0 at ./sources/obc_dao.move:750:9+750
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:750:9+750
L1:

    // $t12 := 1 at ./sources/obc_dao.move:752:13+7
    assume {:print "$at(4,23249,23256)"} true;
    $t12 := 1;
    assume $IsValid'u8'($t12);

    // $t8 := $t12 at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    $t8 := $t12;

    // goto L2 at ./sources/obc_dao.move:750:9+750
    goto L2;

    // label L0 at ./sources/obc_dao.move:753:20+12
    assume {:print "$at(4,23276,23288)"} true;
L0:

    // $t13 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:753:36+17
    assume {:print "$at(4,23292,23309)"} true;
    $t13 := $proposal#$0_obc_dao_Proposal($t0);

    // $t14 := get_field<obc_dao::ProposalInfo>.end_time($t13) at ./sources/obc_dao.move:753:36+26
    $t14 := $end_time#$0_obc_dao_ProposalInfo($t13);

    // $t15 := <=($t1, $t14) at ./sources/obc_dao.move:753:33+2
    call $t15 := $Le($t1, $t14);

    // if ($t15) goto L4 else goto L3 at ./sources/obc_dao.move:753:16+641
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:753:16+641
L4:

    // $t16 := 2 at ./sources/obc_dao.move:755:13+6
    assume {:print "$at(4,23356,23362)"} true;
    $t16 := 2;
    assume $IsValid'u8'($t16);

    // $t7 := $t16 at ./sources/obc_dao.move:753:16+641
    assume {:print "$at(4,23272,23913)"} true;
    $t7 := $t16;

    // goto L5 at ./sources/obc_dao.move:753:16+641
    goto L5;

    // label L3 at ./sources/obc_dao.move:756:20+8
    assume {:print "$at(4,23382,23390)"} true;
L3:

    // $t17 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:756:20+17
    assume {:print "$at(4,23382,23399)"} true;
    $t17 := $proposal#$0_obc_dao_Proposal($t0);

    // $t18 := get_field<obc_dao::ProposalInfo>.for_votes($t17) at ./sources/obc_dao.move:756:20+27
    $t18 := $for_votes#$0_obc_dao_ProposalInfo($t17);

    // $t19 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:756:51+17
    $t19 := $proposal#$0_obc_dao_Proposal($t0);

    // $t20 := get_field<obc_dao::ProposalInfo>.against_votes($t19) at ./sources/obc_dao.move:756:51+31
    $t20 := $against_votes#$0_obc_dao_ProposalInfo($t19);

    // $t21 := <=($t18, $t20) at ./sources/obc_dao.move:756:48+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L7 else goto L6 at ./sources/obc_dao.move:756:20+138
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao.move:756:20+138
L7:

    // $t22 := true at ./sources/obc_dao.move:756:20+138
    assume {:print "$at(4,23382,23520)"} true;
    $t22 := true;
    assume $IsValid'bool'($t22);

    // $t2 := $t22 at ./sources/obc_dao.move:756:20+138
    $t2 := $t22;

    // goto L8 at ./sources/obc_dao.move:756:20+138
    goto L8;

    // label L6 at ./sources/obc_dao.move:757:13+8
    assume {:print "$at(4,23460,23468)"} true;
L6:

    // $t23 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:757:13+17
    assume {:print "$at(4,23460,23477)"} true;
    $t23 := $proposal#$0_obc_dao_Proposal($t0);

    // $t24 := get_field<obc_dao::ProposalInfo>.for_votes($t23) at ./sources/obc_dao.move:757:13+27
    $t24 := $for_votes#$0_obc_dao_ProposalInfo($t23);

    // $t25 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:757:43+17
    $t25 := $proposal#$0_obc_dao_Proposal($t0);

    // $t26 := get_field<obc_dao::ProposalInfo>.quorum_votes($t25) at ./sources/obc_dao.move:757:43+30
    $t26 := $quorum_votes#$0_obc_dao_ProposalInfo($t25);

    // $t2 := <($t24, $t26) at ./sources/obc_dao.move:757:41+1
    call $t2 := $Lt($t24, $t26);

    // label L8 at ./sources/obc_dao.move:756:20+138
    assume {:print "$at(4,23382,23520)"} true;
L8:

    // if ($t2) goto L10 else goto L9 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    if ($t2) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:756:16+535
L10:

    // $t27 := 3 at ./sources/obc_dao.move:759:13+8
    assume {:print "$at(4,23560,23568)"} true;
    $t27 := 3;
    assume $IsValid'u8'($t27);

    // $t6 := $t27 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    $t6 := $t27;

    // goto L11 at ./sources/obc_dao.move:756:16+535
    goto L11;

    // label L9 at ./sources/obc_dao.move:760:20+8
    assume {:print "$at(4,23588,23596)"} true;
L9:

    // $t28 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:760:20+17
    assume {:print "$at(4,23588,23605)"} true;
    $t28 := $proposal#$0_obc_dao_Proposal($t0);

    // $t29 := get_field<obc_dao::ProposalInfo>.eta($t28) at ./sources/obc_dao.move:760:20+21
    $t29 := $eta#$0_obc_dao_ProposalInfo($t28);

    // $t30 := 0 at ./sources/obc_dao.move:760:45+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := ==($t29, $t30) at ./sources/obc_dao.move:760:42+2
    $t31 := $IsEqual'u64'($t29, $t30);

    // if ($t31) goto L13 else goto L12 at ./sources/obc_dao.move:760:16+329
    if ($t31) { goto L13; } else { goto L12; }

    // label L13 at ./sources/obc_dao.move:760:16+329
L13:

    // $t32 := 4 at ./sources/obc_dao.move:762:13+6
    assume {:print "$at(4,23653,23659)"} true;
    $t32 := 4;
    assume $IsValid'u8'($t32);

    // $t5 := $t32 at ./sources/obc_dao.move:760:16+329
    assume {:print "$at(4,23584,23913)"} true;
    $t5 := $t32;

    // goto L14 at ./sources/obc_dao.move:760:16+329
    goto L14;

    // label L12 at ./sources/obc_dao.move:763:20+12
    assume {:print "$at(4,23679,23691)"} true;
L12:

    // $t33 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:763:35+17
    assume {:print "$at(4,23694,23711)"} true;
    $t33 := $proposal#$0_obc_dao_Proposal($t0);

    // $t34 := get_field<obc_dao::ProposalInfo>.eta($t33) at ./sources/obc_dao.move:763:35+21
    $t34 := $eta#$0_obc_dao_ProposalInfo($t33);

    // $t35 := <($t1, $t34) at ./sources/obc_dao.move:763:33+1
    call $t35 := $Lt($t1, $t34);

    // if ($t35) goto L16 else goto L15 at ./sources/obc_dao.move:763:16+238
    if ($t35) { goto L16; } else { goto L15; }

    // label L16 at ./sources/obc_dao.move:763:16+238
L16:

    // $t36 := 5 at ./sources/obc_dao.move:765:13+6
    assume {:print "$at(4,23773,23779)"} true;
    $t36 := 5;
    assume $IsValid'u8'($t36);

    // $t4 := $t36 at ./sources/obc_dao.move:763:16+238
    assume {:print "$at(4,23675,23913)"} true;
    $t4 := $t36;

    // goto L17 at ./sources/obc_dao.move:763:16+238
    goto L17;

    // label L15 at ./sources/obc_dao.move:766:20+8
    assume {:print "$at(4,23799,23807)"} true;
L15:

    // $t37 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:766:20+17
    assume {:print "$at(4,23799,23816)"} true;
    $t37 := $proposal#$0_obc_dao_Proposal($t0);

    // $t38 := get_field<obc_dao::ProposalInfo>.action($t37) at ./sources/obc_dao.move:766:20+24
    $t38 := $action#$0_obc_dao_ProposalInfo($t37);

    // $t39 := get_field<obc_dao::OBCDaoAction>.actionId($t38) at ./sources/obc_dao.move:766:20+33
    $t39 := $actionId#$0_obc_dao_OBCDaoAction($t38);

    // $t40 := 0 at ./sources/obc_dao.move:766:57+1
    $t40 := 0;
    assume $IsValid'u64'($t40);

    // $t41 := !=($t39, $t40) at ./sources/obc_dao.move:766:54+2
    $t41 := !$IsEqual'u64'($t39, $t40);

    // if ($t41) goto L19 else goto L18 at ./sources/obc_dao.move:766:16+118
    if ($t41) { goto L19; } else { goto L18; }

    // label L19 at ./sources/obc_dao.move:767:13+10
    assume {:print "$at(4,23854,23864)"} true;
L19:

    // $t42 := 6 at ./sources/obc_dao.move:767:13+10
    assume {:print "$at(4,23854,23864)"} true;
    $t42 := 6;
    assume $IsValid'u8'($t42);

    // $t3 := $t42 at ./sources/obc_dao.move:766:16+118
    assume {:print "$at(4,23795,23913)"} true;
    $t3 := $t42;

    // goto L20 at ./sources/obc_dao.move:766:16+118
    goto L20;

    // label L18 at ./sources/obc_dao.move:769:13+9
    assume {:print "$at(4,23894,23903)"} true;
L18:

    // $t43 := 7 at ./sources/obc_dao.move:769:13+9
    assume {:print "$at(4,23894,23903)"} true;
    $t43 := 7;
    assume $IsValid'u8'($t43);

    // $t3 := $t43 at ./sources/obc_dao.move:766:16+118
    assume {:print "$at(4,23795,23913)"} true;
    $t3 := $t43;

    // label L20 at ./sources/obc_dao.move:766:16+118
L20:

    // $t4 := $t3 at ./sources/obc_dao.move:763:16+238
    assume {:print "$at(4,23675,23913)"} true;
    $t4 := $t3;

    // label L17 at ./sources/obc_dao.move:763:16+238
L17:

    // $t5 := $t4 at ./sources/obc_dao.move:760:16+329
    assume {:print "$at(4,23584,23913)"} true;
    $t5 := $t4;

    // label L14 at ./sources/obc_dao.move:760:16+329
L14:

    // $t6 := $t5 at ./sources/obc_dao.move:756:16+535
    assume {:print "$at(4,23378,23913)"} true;
    $t6 := $t5;

    // label L11 at ./sources/obc_dao.move:756:16+535
L11:

    // $t7 := $t6 at ./sources/obc_dao.move:753:16+641
    assume {:print "$at(4,23272,23913)"} true;
    $t7 := $t6;

    // label L5 at ./sources/obc_dao.move:753:16+641
L5:

    // $t8 := $t7 at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    $t8 := $t7;

    // label L2 at ./sources/obc_dao.move:750:9+750
L2:

    // trace_return[0]($t8) at ./sources/obc_dao.move:750:9+750
    assume {:print "$at(4,23163,23913)"} true;
    assume {:print "$track_return(26,19,0):", $t8} $t8 == $t8;

    // label L21 at ./sources/obc_dao.move:771:5+1
    assume {:print "$at(4,23918,23919)"} true;
L21:

    // return $t8 at ./sources/obc_dao.move:771:5+1
    assume {:print "$at(4,23918,23919)"} true;
    $ret0 := $t8;
    return;

}

// fun obc_dao::min_action_delay [baseline] at ./sources/obc_dao.move:848:5+96
procedure {:inline 1} $0_obc_dao_min_action_delay(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:848:5+1
    assume {:print "$at(4,26079,26080)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:849:9+15
    assume {:print "$at(4,26137,26152)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,26137,26152)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,27):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.min_action_delay($t1) at ./sources/obc_dao.move:849:9+32
    $t3 := $min_action_delay#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:849:9+32
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:849:9+32
    assume {:print "$track_return(26,27,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:849:9+32
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:849:9+32

    // label L1 at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:850:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::min_action_delay [verification] at ./sources/obc_dao.move:848:5+96
procedure {:timeLimit 40} $0_obc_dao_min_action_delay$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:848:5+1
    assume {:print "$at(4,26079,26080)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:848:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:849:9+15
    assume {:print "$at(4,26137,26152)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,26137,26152)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,27):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.min_action_delay($t1) at ./sources/obc_dao.move:849:9+32
    $t3 := $min_action_delay#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:849:9+32
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:849:9+32
    assume {:print "$track_return(26,27,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:849:9+32
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,27,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:850:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:850:5+1
    assume {:print "$at(4,26174,26175)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::modify_dao_config [verification] at ./sources/obc_dao.move:858:5+799
procedure {:timeLimit 40} $0_obc_dao_modify_dao_config$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ($ret0: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t6: $Mutation ($0_obc_dao_DaoConfig);
    var $t7: $Mutation ($0_obc_dao_DaoConfig);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $Mutation (int);
    var $t12: int;
    var $t13: bool;
    var $t14: $Mutation (int);
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: bool;
    var $t23: $Mutation (int);
    var $t24: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:858:5+1
    assume {:print "$at(4,26369,26370)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:858:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:858:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:858:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/obc_dao.move:858:5+1
    assume $IsValid'u8'($t4);

    // assume WellFormed($t5) at ./sources/obc_dao.move:858:5+1
    assume $IsValid'u64'($t5);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:858:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,29,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:858:5+1
    assume {:print "$track_local(26,29,1):", $t1} $t1 == $t1;

    // trace_local[voting_delay]($t2) at ./sources/obc_dao.move:858:5+1
    assume {:print "$track_local(26,29,2):", $t2} $t2 == $t2;

    // trace_local[voting_period]($t3) at ./sources/obc_dao.move:858:5+1
    assume {:print "$track_local(26,29,3):", $t3} $t3 == $t3;

    // trace_local[voting_quorum_rate]($t4) at ./sources/obc_dao.move:858:5+1
    assume {:print "$track_local(26,29,4):", $t4} $t4 == $t4;

    // trace_local[min_action_delay]($t5) at ./sources/obc_dao.move:858:5+1
    assume {:print "$track_local(26,29,5):", $t5} $t5 == $t5;

    // $t7 := obc_dao::get_config($t0) on_abort goto L14 with $t8 at ./sources/obc_dao.move:868:22+15
    assume {:print "$at(4,26610,26625)"} true;
    call $t7,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,26610,26625)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,29):", $t8} $t8 == $t8;
        goto L14;
    }

    // trace_local[config#1#0]($t7) at ./sources/obc_dao.move:868:13+6
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t7);
    assume {:print "$track_local(26,29,6):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // $t9 := 0 at ./sources/obc_dao.move:869:29+1
    assume {:print "$at(4,26655,26656)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t3, $t9) at ./sources/obc_dao.move:869:27+1
    call $t10 := $Gt($t3, $t9);

    // if ($t10) goto L1 else goto L0 at ./sources/obc_dao.move:869:9+84
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:870:36+13
    assume {:print "$at(4,26695,26708)"} true;
L1:

    // $t11 := borrow_field<obc_dao::DaoConfig>.voting_period($t7) at ./sources/obc_dao.move:870:13+20
    assume {:print "$at(4,26672,26692)"} true;
    $t11 := $ChildMutation($t7, 1, $voting_period#$0_obc_dao_DaoConfig($Dereference($t7)));

    // write_ref($t11, $t3) at ./sources/obc_dao.move:870:13+36
    $t11 := $UpdateMutation($t11, $t3);

    // write_back[Reference($t7).voting_period (u64)]($t11) at ./sources/obc_dao.move:870:13+36
    $t7 := $UpdateMutation($t7, $Update'$0_obc_dao_DaoConfig'_voting_period($Dereference($t7), $Dereference($t11)));

    // label L0 at ./sources/obc_dao.move:872:13+12
    assume {:print "$at(4,26733,26745)"} true;
L0:

    // $t12 := 0 at ./sources/obc_dao.move:872:28+1
    assume {:print "$at(4,26748,26749)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := >($t2, $t12) at ./sources/obc_dao.move:872:26+1
    call $t13 := $Gt($t2, $t12);

    // if ($t13) goto L3 else goto L2 at ./sources/obc_dao.move:872:9+81
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at ./sources/obc_dao.move:873:35+12
    assume {:print "$at(4,26787,26799)"} true;
L3:

    // $t14 := borrow_field<obc_dao::DaoConfig>.voting_delay($t7) at ./sources/obc_dao.move:873:13+19
    assume {:print "$at(4,26765,26784)"} true;
    $t14 := $ChildMutation($t7, 0, $voting_delay#$0_obc_dao_DaoConfig($Dereference($t7)));

    // write_ref($t14, $t2) at ./sources/obc_dao.move:873:13+34
    $t14 := $UpdateMutation($t14, $t2);

    // write_back[Reference($t7).voting_delay (u64)]($t14) at ./sources/obc_dao.move:873:13+34
    $t7 := $UpdateMutation($t7, $Update'$0_obc_dao_DaoConfig'_voting_delay($Dereference($t7), $Dereference($t14)));

    // label L2 at ./sources/obc_dao.move:875:13+18
    assume {:print "$at(4,26824,26842)"} true;
L2:

    // $t15 := 0 at ./sources/obc_dao.move:875:34+1
    assume {:print "$at(4,26845,26846)"} true;
    $t15 := 0;
    assume $IsValid'u8'($t15);

    // $t16 := >($t4, $t15) at ./sources/obc_dao.move:875:32+1
    call $t16 := $Gt($t4, $t15);

    // if ($t16) goto L5 else goto L4 at ./sources/obc_dao.move:875:9+174
    if ($t16) { goto L5; } else { goto L4; }

    // label L5 at ./sources/obc_dao.move:876:21+18
    assume {:print "$at(4,26870,26888)"} true;
L5:

    // $t17 := 100 at ./sources/obc_dao.move:876:43+3
    assume {:print "$at(4,26892,26895)"} true;
    $t17 := 100;
    assume $IsValid'u8'($t17);

    // $t18 := <=($t4, $t17) at ./sources/obc_dao.move:876:40+2
    call $t18 := $Le($t4, $t17);

    // if ($t18) goto L7 else goto L12 at ./sources/obc_dao.move:876:13+61
    if ($t18) { goto L7; } else { goto L12; }

    // label L7 at ./sources/obc_dao.move:876:13+61
L7:

    // goto L8 at ./sources/obc_dao.move:876:13+61
    assume {:print "$at(4,26862,26923)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao.move:876:13+61
L6:

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t7) at ./sources/obc_dao.move:876:13+61
    assume {:print "$at(4,26862,26923)"} true;
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t7)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:876:13+61
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,29,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // destroy($t7) at ./sources/obc_dao.move:876:13+61

    // $t19 := 1406 at ./sources/obc_dao.move:876:48+25
    $t19 := 1406;
    assume $IsValid'u64'($t19);

    // trace_abort($t19) at ./sources/obc_dao.move:876:13+61
    assume {:print "$at(4,26862,26923)"} true;
    assume {:print "$track_abort(26,29):", $t19} $t19 == $t19;

    // $t8 := move($t19) at ./sources/obc_dao.move:876:13+61
    $t8 := $t19;

    // goto L14 at ./sources/obc_dao.move:876:13+61
    goto L14;

    // label L8 at ./sources/obc_dao.move:877:41+18
    assume {:print "$at(4,26965,26983)"} true;
L8:

    // $t20 := borrow_field<obc_dao::DaoConfig>.voting_quorum_rate($t7) at ./sources/obc_dao.move:877:13+25
    assume {:print "$at(4,26937,26962)"} true;
    $t20 := $ChildMutation($t7, 2, $voting_quorum_rate#$0_obc_dao_DaoConfig($Dereference($t7)));

    // write_ref($t20, $t4) at ./sources/obc_dao.move:877:13+46
    $t20 := $UpdateMutation($t20, $t4);

    // write_back[Reference($t7).voting_quorum_rate (u8)]($t20) at ./sources/obc_dao.move:877:13+46
    $t7 := $UpdateMutation($t7, $Update'$0_obc_dao_DaoConfig'_voting_quorum_rate($Dereference($t7), $Dereference($t20)));

    // label L4 at ./sources/obc_dao.move:879:13+16
    assume {:print "$at(4,27008,27024)"} true;
L4:

    // $t21 := 0 at ./sources/obc_dao.move:879:32+1
    assume {:print "$at(4,27027,27028)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := >($t5, $t21) at ./sources/obc_dao.move:879:30+1
    call $t22 := $Gt($t5, $t21);

    // if ($t22) goto L10 else goto L9 at ./sources/obc_dao.move:879:9+93
    if ($t22) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:880:39+16
    assume {:print "$at(4,27070,27086)"} true;
L10:

    // $t23 := borrow_field<obc_dao::DaoConfig>.min_action_delay($t7) at ./sources/obc_dao.move:880:13+23
    assume {:print "$at(4,27044,27067)"} true;
    $t23 := $ChildMutation($t7, 3, $min_action_delay#$0_obc_dao_DaoConfig($Dereference($t7)));

    // write_ref($t23, $t5) at ./sources/obc_dao.move:880:13+42
    $t23 := $UpdateMutation($t23, $t5);

    // write_back[Reference($t7).min_action_delay (u64)]($t23) at ./sources/obc_dao.move:880:13+42
    $t7 := $UpdateMutation($t7, $Update'$0_obc_dao_DaoConfig'_min_action_delay($Dereference($t7), $Dereference($t23)));

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t7) at ./sources/obc_dao.move:880:13+42
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t7)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:880:13+42
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,29,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // goto L11 at ./sources/obc_dao.move:880:55+1
    goto L11;

    // label L9 at ./sources/obc_dao.move:879:9+93
    assume {:print "$at(4,27004,27097)"} true;
L9:

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t7) at ./sources/obc_dao.move:879:9+93
    assume {:print "$at(4,27004,27097)"} true;
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t7)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:879:9+93
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,29,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // destroy($t7) at ./sources/obc_dao.move:879:9+93

    // label L11 at ./sources/obc_dao.move:883:28+11
    assume {:print "$at(4,27127,27138)"} true;
L11:

    // $t24 := [109, 111, 100, 105, 102, 121, 95, 100, 97, 111, 95, 99, 111, 110, 102, 105, 103] at ./sources/obc_dao.move:883:41+20
    assume {:print "$at(4,27140,27160)"} true;
    $t24 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(109, 111, 100, 105), MakeVec4(102, 121, 95, 100)), MakeVec4(97, 111, 95, 99)), MakeVec4(111, 110, 102, 105)), MakeVec1(103));
    assume $IsValid'vec'u8''($t24);

    // obc_dao::send_obc_dao_event($t1, $t24) on_abort goto L14 with $t8 at ./sources/obc_dao.move:883:9+53
    call $0_obc_dao_send_obc_dao_event($t1, $t24);
    if ($abort_flag) {
        assume {:print "$at(4,27108,27161)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,29):", $t8} $t8 == $t8;
        goto L14;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:883:62+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,29,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // goto L13 at ./sources/obc_dao.move:883:62+1
    assume {:print "$at(4,27161,27162)"} true;
    goto L13;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L13 at ./sources/obc_dao.move:884:5+1
    assume {:print "$at(4,27167,27168)"} true;
L13:

    // return () at ./sources/obc_dao.move:884:5+1
    assume {:print "$at(4,27167,27168)"} true;
    $ret0 := $t0;
    return;

    // label L14 at ./sources/obc_dao.move:884:5+1
L14:

    // abort($t8) at ./sources/obc_dao.move:884:5+1
    assume {:print "$at(4,27167,27168)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_delay [baseline] at ./sources/obc_dao.move:832:5+88
procedure {:inline 1} $0_obc_dao_voting_delay(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:832:5+1
    assume {:print "$at(4,25648,25649)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:833:9+15
    assume {:print "$at(4,25702,25717)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25702,25717)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,24):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_delay($t1) at ./sources/obc_dao.move:833:9+28
    $t3 := $voting_delay#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:833:9+28
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:833:9+28
    assume {:print "$track_return(26,24,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:833:9+28
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:833:9+28

    // label L1 at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:834:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_delay [verification] at ./sources/obc_dao.move:832:5+88
procedure {:timeLimit 40} $0_obc_dao_voting_delay$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:832:5+1
    assume {:print "$at(4,25648,25649)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:832:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:833:9+15
    assume {:print "$at(4,25702,25717)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25702,25717)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,24):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_delay($t1) at ./sources/obc_dao.move:833:9+28
    $t3 := $voting_delay#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:833:9+28
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:833:9+28
    assume {:print "$track_return(26,24,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:833:9+28
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,24,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:834:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:834:5+1
    assume {:print "$at(4,25735,25736)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_period [baseline] at ./sources/obc_dao.move:837:5+90
procedure {:inline 1} $0_obc_dao_voting_period(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:837:5+1
    assume {:print "$at(4,25792,25793)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:838:9+15
    assume {:print "$at(4,25847,25862)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25847,25862)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,25):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_period($t1) at ./sources/obc_dao.move:838:9+29
    $t3 := $voting_period#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:838:9+29
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:838:9+29
    assume {:print "$track_return(26,25,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:838:9+29
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:838:9+29

    // label L1 at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:839:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_period [verification] at ./sources/obc_dao.move:837:5+90
procedure {:timeLimit 40} $0_obc_dao_voting_period$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:837:5+1
    assume {:print "$at(4,25792,25793)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:837:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:838:9+15
    assume {:print "$at(4,25847,25862)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25847,25862)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,25):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_period($t1) at ./sources/obc_dao.move:838:9+29
    $t3 := $voting_period#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:838:9+29
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:838:9+29
    assume {:print "$track_return(26,25,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:838:9+29
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,25,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:839:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:839:5+1
    assume {:print "$at(4,25881,25882)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_quorum_rate [baseline] at ./sources/obc_dao.move:842:5+99
procedure {:inline 1} $0_obc_dao_voting_quorum_rate(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:842:5+1
    assume {:print "$at(4,25928,25929)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:843:9+15
    assume {:print "$at(4,25987,26002)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25987,26002)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,26):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_quorum_rate($t1) at ./sources/obc_dao.move:843:9+34
    $t3 := $voting_quorum_rate#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:843:9+34
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:843:9+34
    assume {:print "$track_return(26,26,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:843:9+34
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:843:9+34

    // label L1 at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:844:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::voting_quorum_rate [verification] at ./sources/obc_dao.move:842:5+99
procedure {:timeLimit 40} $0_obc_dao_voting_quorum_rate$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: $Mutation ($0_obc_dao_DaoConfig);
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:842:5+1
    assume {:print "$at(4,25928,25929)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:842:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t1 := obc_dao::get_config($t0) on_abort goto L2 with $t2 at ./sources/obc_dao.move:843:9+15
    assume {:print "$at(4,25987,26002)"} true;
    call $t1,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25987,26002)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,26):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<obc_dao::DaoConfig>.voting_quorum_rate($t1) at ./sources/obc_dao.move:843:9+34
    $t3 := $voting_quorum_rate#$0_obc_dao_DaoConfig($Dereference($t1));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:843:9+34
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_return[0]($t3) at ./sources/obc_dao.move:843:9+34
    assume {:print "$track_return(26,26,0):", $t3} $t3 == $t3;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:843:9+34
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,26,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
L1:

    // return $t3 at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:844:5+1
L2:

    // abort($t2) at ./sources/obc_dao.move:844:5+1
    assume {:print "$at(4,26026,26027)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun obc_dao::modify_proposal [verification] at ./sources/obc_dao.move:976:5+2172
procedure {:timeLimit 40} $0_obc_dao_modify_proposal$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: int, _$t2: $2_clock_Clock) returns ($ret0: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($0_obc_dao_ProposalInfo);
    var $t10: $Mutation (int);
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation ($0_obc_dao_ProposalInfo);
    var $t17: $Mutation (int);
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($0_obc_dao_ProposalInfo);
    var $t22: $Mutation (int);
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation ($0_obc_dao_ProposalInfo);
    var $t29: $Mutation (int);
    var $t30: int;
    var $t31: $Mutation ($0_obc_dao_ProposalInfo);
    var $t32: $Mutation (int);
    var $t33: int;
    var $t34: $Mutation ($0_obc_dao_ProposalInfo);
    var $t35: $Mutation (int);
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: $Mutation ($0_obc_dao_ProposalInfo);
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: $Mutation ($0_obc_dao_ProposalInfo);
    var $t45: $Mutation (int);
    var $t46: int;
    var $t47: $Mutation ($0_obc_dao_ProposalInfo);
    var $t48: $Mutation (int);
    var $t49: int;
    var $t50: $Mutation ($0_obc_dao_ProposalInfo);
    var $t51: $Mutation (int);
    var $t52: int;
    var $t53: $Mutation ($0_obc_dao_ProposalInfo);
    var $t54: $Mutation (int);
    var $t55: int;
    var $t56: bool;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: $Mutation ($0_obc_dao_ProposalInfo);
    var $t61: $Mutation (int);
    var $t62: int;
    var $t63: $Mutation ($0_obc_dao_ProposalInfo);
    var $t64: $Mutation (int);
    var $t65: int;
    var $t66: $Mutation ($0_obc_dao_ProposalInfo);
    var $t67: $Mutation (int);
    var $t68: int;
    var $t69: $Mutation ($0_obc_dao_ProposalInfo);
    var $t70: $Mutation (int);
    var $t71: int;
    var $t72: int;
    var $t73: int;
    var $t74: $Mutation ($0_obc_dao_ProposalInfo);
    var $t75: $Mutation (int);
    var $t76: int;
    var $t77: bool;
    var $t78: int;
    var $t79: int;
    var $t80: int;
    var $t81: $Mutation ($0_obc_dao_ProposalInfo);
    var $t82: $Mutation (int);
    var $t83: int;
    var $t84: $Mutation ($0_obc_dao_ProposalInfo);
    var $t85: $Mutation (int);
    var $t86: int;
    var $t87: $Mutation ($0_obc_dao_ProposalInfo);
    var $t88: $Mutation (int);
    var $t89: int;
    var $t90: $Mutation ($0_obc_dao_ProposalInfo);
    var $t91: $Mutation (int);
    var $t92: int;
    var $t93: int;
    var $t94: int;
    var $t95: $Mutation ($0_obc_dao_ProposalInfo);
    var $t96: $Mutation (int);
    var $t97: int;
    var $t98: $Mutation ($0_obc_dao_ProposalInfo);
    var $t99: $Mutation ($0_obc_dao_OBCDaoAction);
    var $t100: $Mutation (int);
    var $t101: int;
    var $t102: bool;
    var $t103: int;
    var $t104: int;
    var $t105: int;
    var $t106: $Mutation ($0_obc_dao_ProposalInfo);
    var $t107: $Mutation (int);
    var $t108: int;
    var $t109: $Mutation ($0_obc_dao_ProposalInfo);
    var $t110: $Mutation (int);
    var $t111: int;
    var $t112: $Mutation ($0_obc_dao_ProposalInfo);
    var $t113: $Mutation (int);
    var $t114: int;
    var $t115: $Mutation ($0_obc_dao_ProposalInfo);
    var $t116: $Mutation (int);
    var $t117: int;
    var $t118: int;
    var $t119: int;
    var $t120: $Mutation ($0_obc_dao_ProposalInfo);
    var $t121: $Mutation (int);
    var $t122: int;
    var $t123: $Mutation ($0_obc_dao_ProposalInfo);
    var $t124: $Mutation ($0_obc_dao_OBCDaoAction);
    var $t125: $Mutation (int);
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: int;
    var $t2: $2_clock_Clock;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:976:5+1
    assume {:print "$at(4,29459,29460)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:976:5+1
    assume $IsValid'u8'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:976:5+1
    assume $IsValid'$2_clock_Clock'($t2);

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:976:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[index]($t1) at ./sources/obc_dao.move:976:5+1
    assume {:print "$track_local(26,37,1):", $t1} $t1 == $t1;

    // trace_local[clock]($t2) at ./sources/obc_dao.move:976:5+1
    assume {:print "$track_local(26,37,2):", $t2} $t2 == $t2;

    // $t3 := 1 at ./sources/obc_dao.move:977:22+1
    assume {:print "$at(4,29567,29568)"} true;
    $t3 := 1;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t1, $t3) at ./sources/obc_dao.move:977:19+2
    $t4 := $IsEqual'u8'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at ./sources/obc_dao.move:977:9+2070
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:979:64+5
    assume {:print "$at(4,29658,29663)"} true;
L1:

    // $t5 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:979:44+26
    assume {:print "$at(4,29638,29664)"} true;
    call $t5 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,29638,29664)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t7 := 100000000 at ./sources/obc_dao.move:979:74+9
    $t7 := 100000000;
    assume $IsValid'u64'($t7);

    // $t8 := +($t5, $t7) on_abort goto L16 with $t6 at ./sources/obc_dao.move:979:72+1
    call $t8 := $AddU64($t5, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,29666,29667)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t9 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:979:13+17
    $t9 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t10 := borrow_field<obc_dao::ProposalInfo>.start_time($t9) at ./sources/obc_dao.move:979:13+28
    $t10 := $ChildMutation($t9, 2, $start_time#$0_obc_dao_ProposalInfo($Dereference($t9)));

    // write_ref($t10, $t8) at ./sources/obc_dao.move:979:13+70
    $t10 := $UpdateMutation($t10, $t8);

    // write_back[Reference($t9).start_time (u64)]($t10) at ./sources/obc_dao.move:979:13+70
    $t9 := $UpdateMutation($t9, $Update'$0_obc_dao_ProposalInfo'_start_time($Dereference($t9), $Dereference($t10)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t9) at ./sources/obc_dao.move:979:13+70
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t9)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:979:13+70
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:979:83+1
    goto L2;

    // label L0 at ./sources/obc_dao.move:980:19+5
    assume {:print "$at(4,29697,29702)"} true;
L0:

    // $t11 := 2 at ./sources/obc_dao.move:980:28+1
    assume {:print "$at(4,29706,29707)"} true;
    $t11 := 2;
    assume $IsValid'u8'($t11);

    // $t12 := ==($t1, $t11) at ./sources/obc_dao.move:980:25+2
    $t12 := $IsEqual'u8'($t1, $t11);

    // if ($t12) goto L4 else goto L3 at ./sources/obc_dao.move:980:15+1931
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:982:64+5
    assume {:print "$at(4,29796,29801)"} true;
L4:

    // $t13 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:982:44+26
    assume {:print "$at(4,29776,29802)"} true;
    call $t13 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,29776,29802)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t14 := 100000000 at ./sources/obc_dao.move:982:74+9
    $t14 := 100000000;
    assume $IsValid'u64'($t14);

    // $t15 := -($t13, $t14) on_abort goto L16 with $t6 at ./sources/obc_dao.move:982:72+1
    call $t15 := $Sub($t13, $t14);
    if ($abort_flag) {
        assume {:print "$at(4,29804,29805)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t16 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:982:13+17
    $t16 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t17 := borrow_field<obc_dao::ProposalInfo>.start_time($t16) at ./sources/obc_dao.move:982:13+28
    $t17 := $ChildMutation($t16, 2, $start_time#$0_obc_dao_ProposalInfo($Dereference($t16)));

    // write_ref($t17, $t15) at ./sources/obc_dao.move:982:13+70
    $t17 := $UpdateMutation($t17, $t15);

    // write_back[Reference($t16).start_time (u64)]($t17) at ./sources/obc_dao.move:982:13+70
    $t16 := $UpdateMutation($t16, $Update'$0_obc_dao_ProposalInfo'_start_time($Dereference($t16), $Dereference($t17)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t16) at ./sources/obc_dao.move:982:13+70
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t16)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:982:13+70
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t18 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:983:42+26
    assume {:print "$at(4,29858,29884)"} true;
    call $t18 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,29858,29884)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t19 := 100000000 at ./sources/obc_dao.move:983:71+9
    $t19 := 100000000;
    assume $IsValid'u64'($t19);

    // $t20 := +($t18, $t19) on_abort goto L16 with $t6 at ./sources/obc_dao.move:983:69+1
    call $t20 := $AddU64($t18, $t19);
    if ($abort_flag) {
        assume {:print "$at(4,29885,29886)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t21 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:983:13+17
    $t21 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t22 := borrow_field<obc_dao::ProposalInfo>.end_time($t21) at ./sources/obc_dao.move:983:13+26
    $t22 := $ChildMutation($t21, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t21)));

    // write_ref($t22, $t20) at ./sources/obc_dao.move:983:13+67
    $t22 := $UpdateMutation($t22, $t20);

    // write_back[Reference($t21).end_time (u64)]($t22) at ./sources/obc_dao.move:983:13+67
    $t21 := $UpdateMutation($t21, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t21), $Dereference($t22)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t21) at ./sources/obc_dao.move:983:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t21)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:983:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:980:15+1931
    assume {:print "$at(4,29693,31624)"} true;
    goto L2;

    // label L3 at ./sources/obc_dao.move:984:20+5
    assume {:print "$at(4,29917,29922)"} true;
L3:

    // $t23 := 3 at ./sources/obc_dao.move:984:29+1
    assume {:print "$at(4,29926,29927)"} true;
    $t23 := 3;
    assume $IsValid'u8'($t23);

    // $t24 := ==($t1, $t23) at ./sources/obc_dao.move:984:26+2
    $t24 := $IsEqual'u8'($t1, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/obc_dao.move:984:16+1711
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/obc_dao.move:986:62+5
    assume {:print "$at(4,30030,30035)"} true;
L6:

    // $t25 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:986:42+26
    assume {:print "$at(4,30010,30036)"} true;
    call $t25 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,30010,30036)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t26 := 100000000 at ./sources/obc_dao.move:986:71+9
    $t26 := 100000000;
    assume $IsValid'u64'($t26);

    // $t27 := -($t25, $t26) on_abort goto L16 with $t6 at ./sources/obc_dao.move:986:69+1
    call $t27 := $Sub($t25, $t26);
    if ($abort_flag) {
        assume {:print "$at(4,30037,30038)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t28 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:986:13+17
    $t28 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t29 := borrow_field<obc_dao::ProposalInfo>.end_time($t28) at ./sources/obc_dao.move:986:13+26
    $t29 := $ChildMutation($t28, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t28)));

    // write_ref($t29, $t27) at ./sources/obc_dao.move:986:13+67
    $t29 := $UpdateMutation($t29, $t27);

    // write_back[Reference($t28).end_time (u64)]($t29) at ./sources/obc_dao.move:986:13+67
    $t28 := $UpdateMutation($t28, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t28), $Dereference($t29)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t28) at ./sources/obc_dao.move:986:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t28)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:986:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t30 := 1 at ./sources/obc_dao.move:987:43+1
    assume {:print "$at(4,30092,30093)"} true;
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:987:13+17
    $t31 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t32 := borrow_field<obc_dao::ProposalInfo>.for_votes($t31) at ./sources/obc_dao.move:987:13+27
    $t32 := $ChildMutation($t31, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t31)));

    // write_ref($t32, $t30) at ./sources/obc_dao.move:987:13+31
    $t32 := $UpdateMutation($t32, $t30);

    // write_back[Reference($t31).for_votes (u64)]($t32) at ./sources/obc_dao.move:987:13+31
    $t31 := $UpdateMutation($t31, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t31), $Dereference($t32)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t31) at ./sources/obc_dao.move:987:13+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t31)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:987:13+31
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t33 := 2 at ./sources/obc_dao.move:988:47+1
    assume {:print "$at(4,30141,30142)"} true;
    $t33 := 2;
    assume $IsValid'u64'($t33);

    // $t34 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:988:13+17
    $t34 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t35 := borrow_field<obc_dao::ProposalInfo>.against_votes($t34) at ./sources/obc_dao.move:988:13+31
    $t35 := $ChildMutation($t34, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t34)));

    // write_ref($t35, $t33) at ./sources/obc_dao.move:988:13+35
    $t35 := $UpdateMutation($t35, $t33);

    // write_back[Reference($t34).against_votes (u64)]($t35) at ./sources/obc_dao.move:988:13+35
    $t34 := $UpdateMutation($t34, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t34), $Dereference($t35)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t34) at ./sources/obc_dao.move:988:13+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t34)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:988:13+35
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:984:16+1711
    assume {:print "$at(4,29913,31624)"} true;
    goto L2;

    // label L5 at ./sources/obc_dao.move:989:20+5
    assume {:print "$at(4,30163,30168)"} true;
L5:

    // $t36 := 4 at ./sources/obc_dao.move:989:29+1
    assume {:print "$at(4,30172,30173)"} true;
    $t36 := 4;
    assume $IsValid'u8'($t36);

    // $t37 := ==($t1, $t36) at ./sources/obc_dao.move:989:26+2
    $t37 := $IsEqual'u8'($t1, $t36);

    // if ($t37) goto L8 else goto L7 at ./sources/obc_dao.move:989:16+1465
    if ($t37) { goto L8; } else { goto L7; }

    // label L8 at ./sources/obc_dao.move:991:62+5
    assume {:print "$at(4,30271,30276)"} true;
L8:

    // $t38 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:991:42+26
    assume {:print "$at(4,30251,30277)"} true;
    call $t38 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,30251,30277)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t39 := 100000000 at ./sources/obc_dao.move:991:71+9
    $t39 := 100000000;
    assume $IsValid'u64'($t39);

    // $t40 := -($t38, $t39) on_abort goto L16 with $t6 at ./sources/obc_dao.move:991:69+1
    call $t40 := $Sub($t38, $t39);
    if ($abort_flag) {
        assume {:print "$at(4,30278,30279)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t41 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:991:13+17
    $t41 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t42 := borrow_field<obc_dao::ProposalInfo>.end_time($t41) at ./sources/obc_dao.move:991:13+26
    $t42 := $ChildMutation($t41, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t41)));

    // write_ref($t42, $t40) at ./sources/obc_dao.move:991:13+67
    $t42 := $UpdateMutation($t42, $t40);

    // write_back[Reference($t41).end_time (u64)]($t42) at ./sources/obc_dao.move:991:13+67
    $t41 := $UpdateMutation($t41, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t41), $Dereference($t42)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t41) at ./sources/obc_dao.move:991:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t41)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:991:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t43 := 3 at ./sources/obc_dao.move:992:43+1
    assume {:print "$at(4,30333,30334)"} true;
    $t43 := 3;
    assume $IsValid'u64'($t43);

    // $t44 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:992:13+17
    $t44 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t45 := borrow_field<obc_dao::ProposalInfo>.for_votes($t44) at ./sources/obc_dao.move:992:13+27
    $t45 := $ChildMutation($t44, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t44)));

    // write_ref($t45, $t43) at ./sources/obc_dao.move:992:13+31
    $t45 := $UpdateMutation($t45, $t43);

    // write_back[Reference($t44).for_votes (u64)]($t45) at ./sources/obc_dao.move:992:13+31
    $t44 := $UpdateMutation($t44, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t44), $Dereference($t45)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t44) at ./sources/obc_dao.move:992:13+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t44)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:992:13+31
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t46 := 2 at ./sources/obc_dao.move:993:47+1
    assume {:print "$at(4,30382,30383)"} true;
    $t46 := 2;
    assume $IsValid'u64'($t46);

    // $t47 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:993:13+17
    $t47 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t48 := borrow_field<obc_dao::ProposalInfo>.against_votes($t47) at ./sources/obc_dao.move:993:13+31
    $t48 := $ChildMutation($t47, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t47)));

    // write_ref($t48, $t46) at ./sources/obc_dao.move:993:13+35
    $t48 := $UpdateMutation($t48, $t46);

    // write_back[Reference($t47).against_votes (u64)]($t48) at ./sources/obc_dao.move:993:13+35
    $t47 := $UpdateMutation($t47, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t47), $Dereference($t48)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t47) at ./sources/obc_dao.move:993:13+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t47)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:993:13+35
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t49 := 2 at ./sources/obc_dao.move:994:46+1
    assume {:print "$at(4,30430,30431)"} true;
    $t49 := 2;
    assume $IsValid'u64'($t49);

    // $t50 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:994:13+17
    $t50 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t51 := borrow_field<obc_dao::ProposalInfo>.quorum_votes($t50) at ./sources/obc_dao.move:994:13+30
    $t51 := $ChildMutation($t50, 8, $quorum_votes#$0_obc_dao_ProposalInfo($Dereference($t50)));

    // write_ref($t51, $t49) at ./sources/obc_dao.move:994:13+34
    $t51 := $UpdateMutation($t51, $t49);

    // write_back[Reference($t50).quorum_votes (u64)]($t51) at ./sources/obc_dao.move:994:13+34
    $t50 := $UpdateMutation($t50, $Update'$0_obc_dao_ProposalInfo'_quorum_votes($Dereference($t50), $Dereference($t51)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t50) at ./sources/obc_dao.move:994:13+34
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t50)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:994:13+34
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t52 := 0 at ./sources/obc_dao.move:995:37+1
    assume {:print "$at(4,30469,30470)"} true;
    $t52 := 0;
    assume $IsValid'u64'($t52);

    // $t53 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:995:13+17
    $t53 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t54 := borrow_field<obc_dao::ProposalInfo>.eta($t53) at ./sources/obc_dao.move:995:13+21
    $t54 := $ChildMutation($t53, 6, $eta#$0_obc_dao_ProposalInfo($Dereference($t53)));

    // write_ref($t54, $t52) at ./sources/obc_dao.move:995:13+25
    $t54 := $UpdateMutation($t54, $t52);

    // write_back[Reference($t53).eta (u64)]($t54) at ./sources/obc_dao.move:995:13+25
    $t53 := $UpdateMutation($t53, $Update'$0_obc_dao_ProposalInfo'_eta($Dereference($t53), $Dereference($t54)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t53) at ./sources/obc_dao.move:995:13+25
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t53)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:995:13+25
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:989:16+1465
    assume {:print "$at(4,30159,31624)"} true;
    goto L2;

    // label L7 at ./sources/obc_dao.move:996:20+5
    assume {:print "$at(4,30491,30496)"} true;
L7:

    // $t55 := 5 at ./sources/obc_dao.move:996:29+1
    assume {:print "$at(4,30500,30501)"} true;
    $t55 := 5;
    assume $IsValid'u8'($t55);

    // $t56 := ==($t1, $t55) at ./sources/obc_dao.move:996:26+2
    $t56 := $IsEqual'u8'($t1, $t55);

    // if ($t56) goto L10 else goto L9 at ./sources/obc_dao.move:996:16+1137
    if ($t56) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:998:62+5
    assume {:print "$at(4,30608,30613)"} true;
L10:

    // $t57 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:998:42+26
    assume {:print "$at(4,30588,30614)"} true;
    call $t57 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,30588,30614)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t58 := 100000000 at ./sources/obc_dao.move:998:71+9
    $t58 := 100000000;
    assume $IsValid'u64'($t58);

    // $t59 := -($t57, $t58) on_abort goto L16 with $t6 at ./sources/obc_dao.move:998:69+1
    call $t59 := $Sub($t57, $t58);
    if ($abort_flag) {
        assume {:print "$at(4,30615,30616)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t60 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:998:13+17
    $t60 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t61 := borrow_field<obc_dao::ProposalInfo>.end_time($t60) at ./sources/obc_dao.move:998:13+26
    $t61 := $ChildMutation($t60, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t60)));

    // write_ref($t61, $t59) at ./sources/obc_dao.move:998:13+67
    $t61 := $UpdateMutation($t61, $t59);

    // write_back[Reference($t60).end_time (u64)]($t61) at ./sources/obc_dao.move:998:13+67
    $t60 := $UpdateMutation($t60, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t60), $Dereference($t61)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t60) at ./sources/obc_dao.move:998:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t60)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:998:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t62 := 3 at ./sources/obc_dao.move:999:43+1
    assume {:print "$at(4,30670,30671)"} true;
    $t62 := 3;
    assume $IsValid'u64'($t62);

    // $t63 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:999:13+17
    $t63 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t64 := borrow_field<obc_dao::ProposalInfo>.for_votes($t63) at ./sources/obc_dao.move:999:13+27
    $t64 := $ChildMutation($t63, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t63)));

    // write_ref($t64, $t62) at ./sources/obc_dao.move:999:13+31
    $t64 := $UpdateMutation($t64, $t62);

    // write_back[Reference($t63).for_votes (u64)]($t64) at ./sources/obc_dao.move:999:13+31
    $t63 := $UpdateMutation($t63, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t63), $Dereference($t64)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t63) at ./sources/obc_dao.move:999:13+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t63)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:999:13+31
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t65 := 2 at ./sources/obc_dao.move:1000:47+1
    assume {:print "$at(4,30719,30720)"} true;
    $t65 := 2;
    assume $IsValid'u64'($t65);

    // $t66 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1000:13+17
    $t66 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t67 := borrow_field<obc_dao::ProposalInfo>.against_votes($t66) at ./sources/obc_dao.move:1000:13+31
    $t67 := $ChildMutation($t66, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t66)));

    // write_ref($t67, $t65) at ./sources/obc_dao.move:1000:13+35
    $t67 := $UpdateMutation($t67, $t65);

    // write_back[Reference($t66).against_votes (u64)]($t67) at ./sources/obc_dao.move:1000:13+35
    $t66 := $UpdateMutation($t66, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t66), $Dereference($t67)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t66) at ./sources/obc_dao.move:1000:13+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t66)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1000:13+35
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t68 := 2 at ./sources/obc_dao.move:1001:46+1
    assume {:print "$at(4,30767,30768)"} true;
    $t68 := 2;
    assume $IsValid'u64'($t68);

    // $t69 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1001:13+17
    $t69 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t70 := borrow_field<obc_dao::ProposalInfo>.quorum_votes($t69) at ./sources/obc_dao.move:1001:13+30
    $t70 := $ChildMutation($t69, 8, $quorum_votes#$0_obc_dao_ProposalInfo($Dereference($t69)));

    // write_ref($t70, $t68) at ./sources/obc_dao.move:1001:13+34
    $t70 := $UpdateMutation($t70, $t68);

    // write_back[Reference($t69).quorum_votes (u64)]($t70) at ./sources/obc_dao.move:1001:13+34
    $t69 := $UpdateMutation($t69, $Update'$0_obc_dao_ProposalInfo'_quorum_votes($Dereference($t69), $Dereference($t70)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t69) at ./sources/obc_dao.move:1001:13+34
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t69)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1001:13+34
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t71 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1002:37+26
    assume {:print "$at(4,30806,30832)"} true;
    call $t71 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,30806,30832)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t72 := 100000000 at ./sources/obc_dao.move:1002:67+9
    $t72 := 100000000;
    assume $IsValid'u64'($t72);

    // $t73 := +($t71, $t72) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1002:65+1
    call $t73 := $AddU64($t71, $t72);
    if ($abort_flag) {
        assume {:print "$at(4,30834,30835)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t74 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1002:13+17
    $t74 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t75 := borrow_field<obc_dao::ProposalInfo>.eta($t74) at ./sources/obc_dao.move:1002:13+21
    $t75 := $ChildMutation($t74, 6, $eta#$0_obc_dao_ProposalInfo($Dereference($t74)));

    // write_ref($t75, $t73) at ./sources/obc_dao.move:1002:13+63
    $t75 := $UpdateMutation($t75, $t73);

    // write_back[Reference($t74).eta (u64)]($t75) at ./sources/obc_dao.move:1002:13+63
    $t74 := $UpdateMutation($t74, $Update'$0_obc_dao_ProposalInfo'_eta($Dereference($t74), $Dereference($t75)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t74) at ./sources/obc_dao.move:1002:13+63
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t74)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1002:13+63
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:996:16+1137
    assume {:print "$at(4,30487,31624)"} true;
    goto L2;

    // label L9 at ./sources/obc_dao.move:1003:20+5
    assume {:print "$at(4,30866,30871)"} true;
L9:

    // $t76 := 6 at ./sources/obc_dao.move:1003:29+1
    assume {:print "$at(4,30875,30876)"} true;
    $t76 := 6;
    assume $IsValid'u8'($t76);

    // $t77 := ==($t1, $t76) at ./sources/obc_dao.move:1003:26+2
    $t77 := $IsEqual'u8'($t1, $t76);

    // if ($t77) goto L12 else goto L11 at ./sources/obc_dao.move:1003:16+762
    if ($t77) { goto L12; } else { goto L11; }

    // label L12 at ./sources/obc_dao.move:1004:62+5
    assume {:print "$at(4,30941,30946)"} true;
L12:

    // $t78 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1004:42+26
    assume {:print "$at(4,30921,30947)"} true;
    call $t78 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,30921,30947)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t79 := 100000000 at ./sources/obc_dao.move:1004:71+9
    $t79 := 100000000;
    assume $IsValid'u64'($t79);

    // $t80 := -($t78, $t79) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1004:69+1
    call $t80 := $Sub($t78, $t79);
    if ($abort_flag) {
        assume {:print "$at(4,30948,30949)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t81 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1004:13+17
    $t81 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t82 := borrow_field<obc_dao::ProposalInfo>.end_time($t81) at ./sources/obc_dao.move:1004:13+26
    $t82 := $ChildMutation($t81, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t81)));

    // write_ref($t82, $t80) at ./sources/obc_dao.move:1004:13+67
    $t82 := $UpdateMutation($t82, $t80);

    // write_back[Reference($t81).end_time (u64)]($t82) at ./sources/obc_dao.move:1004:13+67
    $t81 := $UpdateMutation($t81, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t81), $Dereference($t82)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t81) at ./sources/obc_dao.move:1004:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t81)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1004:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t83 := 3 at ./sources/obc_dao.move:1005:43+1
    assume {:print "$at(4,31003,31004)"} true;
    $t83 := 3;
    assume $IsValid'u64'($t83);

    // $t84 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1005:13+17
    $t84 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t85 := borrow_field<obc_dao::ProposalInfo>.for_votes($t84) at ./sources/obc_dao.move:1005:13+27
    $t85 := $ChildMutation($t84, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t84)));

    // write_ref($t85, $t83) at ./sources/obc_dao.move:1005:13+31
    $t85 := $UpdateMutation($t85, $t83);

    // write_back[Reference($t84).for_votes (u64)]($t85) at ./sources/obc_dao.move:1005:13+31
    $t84 := $UpdateMutation($t84, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t84), $Dereference($t85)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t84) at ./sources/obc_dao.move:1005:13+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t84)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1005:13+31
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t86 := 2 at ./sources/obc_dao.move:1006:47+1
    assume {:print "$at(4,31052,31053)"} true;
    $t86 := 2;
    assume $IsValid'u64'($t86);

    // $t87 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1006:13+17
    $t87 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t88 := borrow_field<obc_dao::ProposalInfo>.against_votes($t87) at ./sources/obc_dao.move:1006:13+31
    $t88 := $ChildMutation($t87, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t87)));

    // write_ref($t88, $t86) at ./sources/obc_dao.move:1006:13+35
    $t88 := $UpdateMutation($t88, $t86);

    // write_back[Reference($t87).against_votes (u64)]($t88) at ./sources/obc_dao.move:1006:13+35
    $t87 := $UpdateMutation($t87, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t87), $Dereference($t88)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t87) at ./sources/obc_dao.move:1006:13+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t87)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1006:13+35
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t89 := 2 at ./sources/obc_dao.move:1007:46+1
    assume {:print "$at(4,31100,31101)"} true;
    $t89 := 2;
    assume $IsValid'u64'($t89);

    // $t90 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1007:13+17
    $t90 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t91 := borrow_field<obc_dao::ProposalInfo>.quorum_votes($t90) at ./sources/obc_dao.move:1007:13+30
    $t91 := $ChildMutation($t90, 8, $quorum_votes#$0_obc_dao_ProposalInfo($Dereference($t90)));

    // write_ref($t91, $t89) at ./sources/obc_dao.move:1007:13+34
    $t91 := $UpdateMutation($t91, $t89);

    // write_back[Reference($t90).quorum_votes (u64)]($t91) at ./sources/obc_dao.move:1007:13+34
    $t90 := $UpdateMutation($t90, $Update'$0_obc_dao_ProposalInfo'_quorum_votes($Dereference($t90), $Dereference($t91)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t90) at ./sources/obc_dao.move:1007:13+34
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t90)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1007:13+34
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t92 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1008:37+26
    assume {:print "$at(4,31139,31165)"} true;
    call $t92 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,31139,31165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t93 := 100000000 at ./sources/obc_dao.move:1008:67+9
    $t93 := 100000000;
    assume $IsValid'u64'($t93);

    // $t94 := -($t92, $t93) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1008:65+1
    call $t94 := $Sub($t92, $t93);
    if ($abort_flag) {
        assume {:print "$at(4,31167,31168)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t95 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1008:13+17
    $t95 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t96 := borrow_field<obc_dao::ProposalInfo>.eta($t95) at ./sources/obc_dao.move:1008:13+21
    $t96 := $ChildMutation($t95, 6, $eta#$0_obc_dao_ProposalInfo($Dereference($t95)));

    // write_ref($t96, $t94) at ./sources/obc_dao.move:1008:13+63
    $t96 := $UpdateMutation($t96, $t94);

    // write_back[Reference($t95).eta (u64)]($t96) at ./sources/obc_dao.move:1008:13+63
    $t95 := $UpdateMutation($t95, $Update'$0_obc_dao_ProposalInfo'_eta($Dereference($t95), $Dereference($t96)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t95) at ./sources/obc_dao.move:1008:13+63
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t95)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1008:13+63
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t97 := 1 at ./sources/obc_dao.move:1009:49+1
    assume {:print "$at(4,31228,31229)"} true;
    $t97 := 1;
    assume $IsValid'u64'($t97);

    // $t98 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1009:13+17
    $t98 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t99 := borrow_field<obc_dao::ProposalInfo>.action($t98) at ./sources/obc_dao.move:1009:13+24
    $t99 := $ChildMutation($t98, 9, $action#$0_obc_dao_ProposalInfo($Dereference($t98)));

    // $t100 := borrow_field<obc_dao::OBCDaoAction>.actionId($t99) at ./sources/obc_dao.move:1009:13+33
    $t100 := $ChildMutation($t99, 0, $actionId#$0_obc_dao_OBCDaoAction($Dereference($t99)));

    // write_ref($t100, $t97) at ./sources/obc_dao.move:1009:13+37
    $t100 := $UpdateMutation($t100, $t97);

    // write_back[Reference($t99).actionId (u64)]($t100) at ./sources/obc_dao.move:1009:13+37
    $t99 := $UpdateMutation($t99, $Update'$0_obc_dao_OBCDaoAction'_actionId($Dereference($t99), $Dereference($t100)));

    // write_back[Reference($t98).action (obc_dao::OBCDaoAction)]($t99) at ./sources/obc_dao.move:1009:13+37
    $t98 := $UpdateMutation($t98, $Update'$0_obc_dao_ProposalInfo'_action($Dereference($t98), $Dereference($t99)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t98) at ./sources/obc_dao.move:1009:13+37
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t98)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1009:13+37
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:1003:16+762
    assume {:print "$at(4,30862,31624)"} true;
    goto L2;

    // label L11 at ./sources/obc_dao.move:1010:20+5
    assume {:print "$at(4,31250,31255)"} true;
L11:

    // $t101 := 7 at ./sources/obc_dao.move:1010:29+1
    assume {:print "$at(4,31259,31260)"} true;
    $t101 := 7;
    assume $IsValid'u8'($t101);

    // $t102 := ==($t1, $t101) at ./sources/obc_dao.move:1010:26+2
    $t102 := $IsEqual'u8'($t1, $t101);

    // if ($t102) goto L14 else goto L13 at ./sources/obc_dao.move:1010:16+378
    if ($t102) { goto L14; } else { goto L13; }

    // label L14 at ./sources/obc_dao.move:1011:62+5
    assume {:print "$at(4,31325,31330)"} true;
L14:

    // $t103 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1011:42+26
    assume {:print "$at(4,31305,31331)"} true;
    call $t103 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,31305,31331)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t104 := 100000000 at ./sources/obc_dao.move:1011:71+9
    $t104 := 100000000;
    assume $IsValid'u64'($t104);

    // $t105 := -($t103, $t104) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1011:69+1
    call $t105 := $Sub($t103, $t104);
    if ($abort_flag) {
        assume {:print "$at(4,31332,31333)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t106 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1011:13+17
    $t106 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t107 := borrow_field<obc_dao::ProposalInfo>.end_time($t106) at ./sources/obc_dao.move:1011:13+26
    $t107 := $ChildMutation($t106, 3, $end_time#$0_obc_dao_ProposalInfo($Dereference($t106)));

    // write_ref($t107, $t105) at ./sources/obc_dao.move:1011:13+67
    $t107 := $UpdateMutation($t107, $t105);

    // write_back[Reference($t106).end_time (u64)]($t107) at ./sources/obc_dao.move:1011:13+67
    $t106 := $UpdateMutation($t106, $Update'$0_obc_dao_ProposalInfo'_end_time($Dereference($t106), $Dereference($t107)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t106) at ./sources/obc_dao.move:1011:13+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t106)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1011:13+67
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t108 := 3 at ./sources/obc_dao.move:1012:43+1
    assume {:print "$at(4,31387,31388)"} true;
    $t108 := 3;
    assume $IsValid'u64'($t108);

    // $t109 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1012:13+17
    $t109 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t110 := borrow_field<obc_dao::ProposalInfo>.for_votes($t109) at ./sources/obc_dao.move:1012:13+27
    $t110 := $ChildMutation($t109, 4, $for_votes#$0_obc_dao_ProposalInfo($Dereference($t109)));

    // write_ref($t110, $t108) at ./sources/obc_dao.move:1012:13+31
    $t110 := $UpdateMutation($t110, $t108);

    // write_back[Reference($t109).for_votes (u64)]($t110) at ./sources/obc_dao.move:1012:13+31
    $t109 := $UpdateMutation($t109, $Update'$0_obc_dao_ProposalInfo'_for_votes($Dereference($t109), $Dereference($t110)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t109) at ./sources/obc_dao.move:1012:13+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t109)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1012:13+31
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t111 := 2 at ./sources/obc_dao.move:1013:47+1
    assume {:print "$at(4,31436,31437)"} true;
    $t111 := 2;
    assume $IsValid'u64'($t111);

    // $t112 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1013:13+17
    $t112 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t113 := borrow_field<obc_dao::ProposalInfo>.against_votes($t112) at ./sources/obc_dao.move:1013:13+31
    $t113 := $ChildMutation($t112, 5, $against_votes#$0_obc_dao_ProposalInfo($Dereference($t112)));

    // write_ref($t113, $t111) at ./sources/obc_dao.move:1013:13+35
    $t113 := $UpdateMutation($t113, $t111);

    // write_back[Reference($t112).against_votes (u64)]($t113) at ./sources/obc_dao.move:1013:13+35
    $t112 := $UpdateMutation($t112, $Update'$0_obc_dao_ProposalInfo'_against_votes($Dereference($t112), $Dereference($t113)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t112) at ./sources/obc_dao.move:1013:13+35
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t112)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1013:13+35
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t114 := 2 at ./sources/obc_dao.move:1014:46+1
    assume {:print "$at(4,31484,31485)"} true;
    $t114 := 2;
    assume $IsValid'u64'($t114);

    // $t115 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1014:13+17
    $t115 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t116 := borrow_field<obc_dao::ProposalInfo>.quorum_votes($t115) at ./sources/obc_dao.move:1014:13+30
    $t116 := $ChildMutation($t115, 8, $quorum_votes#$0_obc_dao_ProposalInfo($Dereference($t115)));

    // write_ref($t116, $t114) at ./sources/obc_dao.move:1014:13+34
    $t116 := $UpdateMutation($t116, $t114);

    // write_back[Reference($t115).quorum_votes (u64)]($t116) at ./sources/obc_dao.move:1014:13+34
    $t115 := $UpdateMutation($t115, $Update'$0_obc_dao_ProposalInfo'_quorum_votes($Dereference($t115), $Dereference($t116)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t115) at ./sources/obc_dao.move:1014:13+34
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t115)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1014:13+34
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t117 := clock::timestamp_ms($t2) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1015:37+26
    assume {:print "$at(4,31523,31549)"} true;
    call $t117 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,31523,31549)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t118 := 100000000 at ./sources/obc_dao.move:1015:67+9
    $t118 := 100000000;
    assume $IsValid'u64'($t118);

    // $t119 := -($t117, $t118) on_abort goto L16 with $t6 at ./sources/obc_dao.move:1015:65+1
    call $t119 := $Sub($t117, $t118);
    if ($abort_flag) {
        assume {:print "$at(4,31551,31552)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,37):", $t6} $t6 == $t6;
        goto L16;
    }

    // $t120 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1015:13+17
    $t120 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t121 := borrow_field<obc_dao::ProposalInfo>.eta($t120) at ./sources/obc_dao.move:1015:13+21
    $t121 := $ChildMutation($t120, 6, $eta#$0_obc_dao_ProposalInfo($Dereference($t120)));

    // write_ref($t121, $t119) at ./sources/obc_dao.move:1015:13+63
    $t121 := $UpdateMutation($t121, $t119);

    // write_back[Reference($t120).eta (u64)]($t121) at ./sources/obc_dao.move:1015:13+63
    $t120 := $UpdateMutation($t120, $Update'$0_obc_dao_ProposalInfo'_eta($Dereference($t120), $Dereference($t121)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t120) at ./sources/obc_dao.move:1015:13+63
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t120)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1015:13+63
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t122 := 0 at ./sources/obc_dao.move:1016:49+1
    assume {:print "$at(4,31612,31613)"} true;
    $t122 := 0;
    assume $IsValid'u64'($t122);

    // $t123 := borrow_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:1016:13+17
    $t123 := $ChildMutation($t0, 1, $proposal#$0_obc_dao_Proposal($Dereference($t0)));

    // $t124 := borrow_field<obc_dao::ProposalInfo>.action($t123) at ./sources/obc_dao.move:1016:13+24
    $t124 := $ChildMutation($t123, 9, $action#$0_obc_dao_ProposalInfo($Dereference($t123)));

    // $t125 := borrow_field<obc_dao::OBCDaoAction>.actionId($t124) at ./sources/obc_dao.move:1016:13+33
    $t125 := $ChildMutation($t124, 0, $actionId#$0_obc_dao_OBCDaoAction($Dereference($t124)));

    // write_ref($t125, $t122) at ./sources/obc_dao.move:1016:13+37
    $t125 := $UpdateMutation($t125, $t122);

    // write_back[Reference($t124).actionId (u64)]($t125) at ./sources/obc_dao.move:1016:13+37
    $t124 := $UpdateMutation($t124, $Update'$0_obc_dao_OBCDaoAction'_actionId($Dereference($t124), $Dereference($t125)));

    // write_back[Reference($t123).action (obc_dao::OBCDaoAction)]($t124) at ./sources/obc_dao.move:1016:13+37
    $t123 := $UpdateMutation($t123, $Update'$0_obc_dao_ProposalInfo'_action($Dereference($t123), $Dereference($t124)));

    // write_back[Reference($t0).proposal (obc_dao::ProposalInfo)]($t123) at ./sources/obc_dao.move:1016:13+37
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t0), $Dereference($t123)));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1016:13+37
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // goto L2 at ./sources/obc_dao.move:1010:16+378
    assume {:print "$at(4,31246,31624)"} true;
    goto L2;

    // label L13 at ./sources/obc_dao.move:1010:16+378
L13:

    // destroy($t0) at ./sources/obc_dao.move:1010:16+378
    assume {:print "$at(4,31246,31624)"} true;

    // label L2 at ./sources/obc_dao.move:1017:10+1
    assume {:print "$at(4,31624,31625)"} true;
L2:

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:1017:10+1
    assume {:print "$at(4,31624,31625)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,37,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L15 at ./sources/obc_dao.move:1018:5+1
    assume {:print "$at(4,31630,31631)"} true;
L15:

    // return () at ./sources/obc_dao.move:1018:5+1
    assume {:print "$at(4,31630,31631)"} true;
    $ret0 := $t0;
    return;

    // label L16 at ./sources/obc_dao.move:1018:5+1
L16:

    // abort($t6) at ./sources/obc_dao.move:1018:5+1
    assume {:print "$at(4,31630,31631)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun obc_dao::new_dao_config [baseline] at ./sources/obc_dao.move:290:5+257
procedure {:inline 1} $0_obc_dao_new_dao_config(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $0_obc_dao_DaoConfig)
{
    // declare local variables
    var $t4: $0_obc_dao_DaoConfig;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[voting_delay]($t0) at ./sources/obc_dao.move:290:5+1
    assume {:print "$at(4,8888,8889)"} true;
    assume {:print "$track_local(26,4,0):", $t0} $t0 == $t0;

    // trace_local[voting_period]($t1) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,1):", $t1} $t1 == $t1;

    // trace_local[voting_quorum_rate]($t2) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,2):", $t2} $t2 == $t2;

    // trace_local[min_action_delay]($t3) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,3):", $t3} $t3 == $t3;

    // $t4 := pack obc_dao::DaoConfig($t0, $t1, $t2, $t3) at ./sources/obc_dao.move:296:9+79
    assume {:print "$at(4,9060,9139)"} true;
    $t4 := $0_obc_dao_DaoConfig($t0, $t1, $t2, $t3);

    // trace_return[0]($t4) at ./sources/obc_dao.move:296:9+79
    assume {:print "$track_return(26,4,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao.move:297:5+1
    assume {:print "$at(4,9144,9145)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:297:5+1
    assume {:print "$at(4,9144,9145)"} true;
    $ret0 := $t4;
    return;

}

// fun obc_dao::new_dao_config [verification] at ./sources/obc_dao.move:290:5+257
procedure {:timeLimit 40} $0_obc_dao_new_dao_config$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $0_obc_dao_DaoConfig)
{
    // declare local variables
    var $t4: $0_obc_dao_DaoConfig;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:290:5+1
    assume {:print "$at(4,8888,8889)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:290:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:290:5+1
    assume $IsValid'u8'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:290:5+1
    assume $IsValid'u64'($t3);

    // trace_local[voting_delay]($t0) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,0):", $t0} $t0 == $t0;

    // trace_local[voting_period]($t1) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,1):", $t1} $t1 == $t1;

    // trace_local[voting_quorum_rate]($t2) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,2):", $t2} $t2 == $t2;

    // trace_local[min_action_delay]($t3) at ./sources/obc_dao.move:290:5+1
    assume {:print "$track_local(26,4,3):", $t3} $t3 == $t3;

    // $t4 := pack obc_dao::DaoConfig($t0, $t1, $t2, $t3) at ./sources/obc_dao.move:296:9+79
    assume {:print "$at(4,9060,9139)"} true;
    $t4 := $0_obc_dao_DaoConfig($t0, $t1, $t2, $t3);

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate($t4), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate($t4), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($t4) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($t4) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay($t4), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($t4) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period($t4), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($t4) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay($t4), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($t4) > 0);

    // trace_return[0]($t4) at ./sources/obc_dao.move:296:9+79
    assume {:print "$at(4,9060,9139)"} true;
    assume {:print "$track_return(26,4,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/obc_dao.move:297:5+1
    assume {:print "$at(4,9144,9145)"} true;
L1:

    // return $t4 at ./sources/obc_dao.move:297:5+1
    assume {:print "$at(4,9144,9145)"} true;
    $ret0 := $t4;
    return;

}

// fun obc_dao::proposal_exists [verification] at ./sources/obc_dao.move:720:5+201
procedure {:timeLimit 40} $0_obc_dao_proposal_exists$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_Proposal) returns ($ret0: bool, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t2: $2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo';
    var $t3: $0_obc_dao_ProposalInfo;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:720:5+1
    assume {:print "$at(4,22305,22306)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:720:5+1
    assume $IsValid'$0_obc_dao_Proposal'($t1);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:720:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,17,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:720:5+1
    assume {:print "$track_local(26,17,1):", $t1} $t1 == $t1;

    // $t2 := get_field<obc_dao::Dao>.proposalRecord($t0) at ./sources/obc_dao.move:724:40+19
    assume {:print "$at(4,22440,22459)"} true;
    $t2 := $proposalRecord#$0_obc_dao_Dao($Dereference($t0));

    // $t3 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:724:62+17
    $t3 := $proposal#$0_obc_dao_Proposal($t1);

    // $t4 := get_field<obc_dao::ProposalInfo>.pid($t3) at ./sources/obc_dao.move:724:61+22
    $t4 := $pid#$0_obc_dao_ProposalInfo($t3);

    // $t5 := vec_map::contains<u64, obc_dao::ProposalInfo>($t2, $t4) on_abort goto L2 with $t6 at ./sources/obc_dao.move:724:22+62
    call $t5 := $2_vec_map_contains'u64_$0_obc_dao_ProposalInfo'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(4,22422,22484)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/obc_dao.move:725:9+6
    assume {:print "$at(4,22494,22500)"} true;
    assume {:print "$track_return(26,17,0):", $t5} $t5 == $t5;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:725:9+6
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,17,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:726:5+1
    assume {:print "$at(4,22505,22506)"} true;
L1:

    // return $t5 at ./sources/obc_dao.move:726:5+1
    assume {:print "$at(4,22505,22506)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:726:5+1
L2:

    // abort($t6) at ./sources/obc_dao.move:726:5+1
    assume {:print "$at(4,22505,22506)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun obc_dao::proposal_info [verification] at ./sources/obc_dao.move:782:5+520
procedure {:timeLimit 40} $0_obc_dao_proposal_info$verify(_$t0: $0_obc_dao_Proposal) returns ($ret0: int, $ret1: int)
{
    // declare local variables
    var $t1: $0_obc_dao_ProposalInfo;
    var $t2: int;
    var $t3: $0_obc_dao_ProposalInfo;
    var $t4: int;
    var $t5: $0_obc_dao_ProposalInfo;
    var $t6: int;
    var $t7: $0_obc_dao_ProposalInfo;
    var $t8: int;
    var $t9: $0_obc_dao_ProposalInfo;
    var $t10: int;
    var $t11: $0_obc_dao_ProposalInfoEvent;
    var $t12: int;
    var $t13: $0_obc_dao_ProposalInfo;
    var $t14: int;
    var $t15: $0_obc_dao_ProposalInfo;
    var $t16: int;
    var $t0: $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:782:5+1
    assume {:print "$at(4,24214,24215)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($t0);

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:782:5+1
    assume {:print "$track_local(26,20,0):", $t0} $t0 == $t0;

    // $t1 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:787:30+17
    assume {:print "$at(4,24377,24394)"} true;
    $t1 := $proposal#$0_obc_dao_Proposal($t0);

    // $t2 := get_field<obc_dao::ProposalInfo>.pid($t1) at ./sources/obc_dao.move:787:30+21
    $t2 := $pid#$0_obc_dao_ProposalInfo($t1);

    // $t3 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:788:29+17
    assume {:print "$at(4,24428,24445)"} true;
    $t3 := $proposal#$0_obc_dao_Proposal($t0);

    // $t4 := get_field<obc_dao::ProposalInfo>.start_time($t3) at ./sources/obc_dao.move:788:29+28
    $t4 := $start_time#$0_obc_dao_ProposalInfo($t3);

    // $t5 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:789:27+17
    assume {:print "$at(4,24484,24501)"} true;
    $t5 := $proposal#$0_obc_dao_Proposal($t0);

    // $t6 := get_field<obc_dao::ProposalInfo>.end_time($t5) at ./sources/obc_dao.move:789:27+26
    $t6 := $end_time#$0_obc_dao_ProposalInfo($t5);

    // $t7 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:790:28+17
    assume {:print "$at(4,24539,24556)"} true;
    $t7 := $proposal#$0_obc_dao_Proposal($t0);

    // $t8 := get_field<obc_dao::ProposalInfo>.for_votes($t7) at ./sources/obc_dao.move:790:28+27
    $t8 := $for_votes#$0_obc_dao_ProposalInfo($t7);

    // $t9 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:791:32+17
    assume {:print "$at(4,24599,24616)"} true;
    $t9 := $proposal#$0_obc_dao_Proposal($t0);

    // $t10 := get_field<obc_dao::ProposalInfo>.against_votes($t9) at ./sources/obc_dao.move:791:32+31
    $t10 := $against_votes#$0_obc_dao_ProposalInfo($t9);

    // $t11 := pack obc_dao::ProposalInfoEvent($t2, $t4, $t6, $t8, $t10) at ./sources/obc_dao.move:786:13+316
    assume {:print "$at(4,24329,24645)"} true;
    $t11 := $0_obc_dao_ProposalInfoEvent($t2, $t4, $t6, $t8, $t10);

    // event::emit<obc_dao::ProposalInfoEvent>($t11) on_abort goto L2 with $t12 at ./sources/obc_dao.move:785:9+351
    assume {:print "$at(4,24304,24655)"} true;
    call $2_event_emit'$0_obc_dao_ProposalInfoEvent'($t11);
    if ($abort_flag) {
        assume {:print "$at(4,24304,24655)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(26,20):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t13 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:795:10+17
    assume {:print "$at(4,24667,24684)"} true;
    $t13 := $proposal#$0_obc_dao_Proposal($t0);

    // $t14 := get_field<obc_dao::ProposalInfo>.for_votes($t13) at ./sources/obc_dao.move:795:10+27
    $t14 := $for_votes#$0_obc_dao_ProposalInfo($t13);

    // $t15 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:795:39+17
    $t15 := $proposal#$0_obc_dao_Proposal($t0);

    // $t16 := get_field<obc_dao::ProposalInfo>.against_votes($t15) at ./sources/obc_dao.move:795:39+31
    $t16 := $against_votes#$0_obc_dao_ProposalInfo($t15);

    // trace_return[0]($t14) at ./sources/obc_dao.move:795:9+62
    assume {:print "$track_return(26,20,0):", $t14} $t14 == $t14;

    // trace_return[1]($t16) at ./sources/obc_dao.move:795:9+62
    assume {:print "$track_return(26,20,1):", $t16} $t16 == $t16;

    // label L1 at ./sources/obc_dao.move:796:5+1
    assume {:print "$at(4,24733,24734)"} true;
L1:

    // return ($t14, $t16) at ./sources/obc_dao.move:796:5+1
    assume {:print "$at(4,24733,24734)"} true;
    $ret0 := $t14;
    $ret1 := $t16;
    return;

    // label L2 at ./sources/obc_dao.move:796:5+1
L2:

    // abort($t12) at ./sources/obc_dao.move:796:5+1
    assume {:print "$at(4,24733,24734)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun obc_dao::proposal_state [baseline] at ./sources/obc_dao.move:729:5+511
procedure {:inline 1} $0_obc_dao_proposal_state(_$t0: $0_obc_dao_Proposal, _$t1: $2_clock_Clock) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $0_obc_dao_ProposalInfo;
    var $t5: int;
    var $t6: $0_obc_dao_ProposalInfo;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $0_obc_dao_ProposalInfo;
    var $t14: int;
    var $t15: $0_obc_dao_ProposalStateEvent;
    var $t0: $0_obc_dao_Proposal;
    var $t1: $2_clock_Clock;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[proposal]($t0) at ./sources/obc_dao.move:729:5+1
    assume {:print "$at(4,22544,22545)"} true;
    assume {:print "$track_local(26,18,0):", $t0} $t0 == $t0;

    // trace_local[clock]($t1) at ./sources/obc_dao.move:729:5+1
    assume {:print "$track_local(26,18,1):", $t1} $t1 == $t1;

    // $t4 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:733:17+17
    assume {:print "$at(4,22659,22676)"} true;
    $t4 := $proposal#$0_obc_dao_Proposal($t0);

    // $t5 := get_field<obc_dao::ProposalInfo>.pid($t4) at ./sources/obc_dao.move:733:17+21
    $t5 := $pid#$0_obc_dao_ProposalInfo($t4);

    // $t6 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:733:42+17
    $t6 := $proposal#$0_obc_dao_Proposal($t0);

    // $t7 := get_field<obc_dao::ProposalInfo>.pid($t6) at ./sources/obc_dao.move:733:42+21
    $t7 := $pid#$0_obc_dao_ProposalInfo($t6);

    // $t8 := ==($t5, $t7) at ./sources/obc_dao.move:733:39+2
    $t8 := $IsEqual'u64'($t5, $t7);

    // if ($t8) goto L1 else goto L0 at ./sources/obc_dao.move:733:9+83
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:733:9+83
L1:

    // goto L2 at ./sources/obc_dao.move:733:9+83
    assume {:print "$at(4,22651,22734)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:733:9+83
L0:

    // $t9 := 1404 at ./sources/obc_dao.move:733:65+26
    assume {:print "$at(4,22707,22733)"} true;
    $t9 := 1404;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao.move:733:9+83
    assume {:print "$at(4,22651,22734)"} true;
    assume {:print "$track_abort(26,18):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ./sources/obc_dao.move:733:9+83
    $t10 := $t9;

    // goto L4 at ./sources/obc_dao.move:733:9+83
    goto L4;

    // label L2 at ./sources/obc_dao.move:734:49+5
    assume {:print "$at(4,22784,22789)"} true;
L2:

    // $t11 := clock::timestamp_ms($t1) on_abort goto L4 with $t10 at ./sources/obc_dao.move:734:29+26
    assume {:print "$at(4,22764,22790)"} true;
    call $t11 := $2_clock_timestamp_ms($t1);
    if ($abort_flag) {
        assume {:print "$at(4,22764,22790)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_local[current_time#1#0]($t11) at ./sources/obc_dao.move:734:13+12
    assume {:print "$track_local(26,18,2):", $t11} $t11 == $t11;

    // $t12 := obc_dao::judge_proposal_state($t0, $t11) on_abort goto L4 with $t10 at ./sources/obc_dao.move:735:22+44
    assume {:print "$at(4,22814,22858)"} true;
    call $t12 := $0_obc_dao_judge_proposal_state($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,22814,22858)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_local[status#1#0]($t12) at ./sources/obc_dao.move:735:13+6
    assume {:print "$track_local(26,18,3):", $t12} $t12 == $t12;

    // $t13 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:740:29+17
    assume {:print "$at(4,22965,22982)"} true;
    $t13 := $proposal#$0_obc_dao_Proposal($t0);

    // $t14 := get_field<obc_dao::ProposalInfo>.pid($t13) at ./sources/obc_dao.move:740:29+21
    $t14 := $pid#$0_obc_dao_ProposalInfo($t13);

    // $t15 := pack obc_dao::ProposalStateEvent($t14, $t12) at ./sources/obc_dao.move:739:13+116
    assume {:print "$at(4,22916,23032)"} true;
    $t15 := $0_obc_dao_ProposalStateEvent($t14, $t12);

    // event::emit<obc_dao::ProposalStateEvent>($t15) on_abort goto L4 with $t10 at ./sources/obc_dao.move:738:9+142
    assume {:print "$at(4,22891,23033)"} true;
    call $2_event_emit'$0_obc_dao_ProposalStateEvent'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,22891,23033)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_return[0]($t12) at ./sources/obc_dao.move:743:9+6
    assume {:print "$at(4,23043,23049)"} true;
    assume {:print "$track_return(26,18,0):", $t12} $t12 == $t12;

    // label L3 at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
L3:

    // return $t12 at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
    $ret0 := $t12;
    return;

    // label L4 at ./sources/obc_dao.move:744:5+1
L4:

    // abort($t10) at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun obc_dao::proposal_state [verification] at ./sources/obc_dao.move:729:5+511
procedure {:timeLimit 40} $0_obc_dao_proposal_state$verify(_$t0: $0_obc_dao_Proposal, _$t1: $2_clock_Clock) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $0_obc_dao_ProposalInfo;
    var $t5: int;
    var $t6: $0_obc_dao_ProposalInfo;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $0_obc_dao_ProposalInfo;
    var $t14: int;
    var $t15: $0_obc_dao_ProposalStateEvent;
    var $t0: $0_obc_dao_Proposal;
    var $t1: $2_clock_Clock;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:729:5+1
    assume {:print "$at(4,22544,22545)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:729:5+1
    assume $IsValid'$2_clock_Clock'($t1);

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:729:5+1
    assume {:print "$track_local(26,18,0):", $t0} $t0 == $t0;

    // trace_local[clock]($t1) at ./sources/obc_dao.move:729:5+1
    assume {:print "$track_local(26,18,1):", $t1} $t1 == $t1;

    // $t4 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:733:17+17
    assume {:print "$at(4,22659,22676)"} true;
    $t4 := $proposal#$0_obc_dao_Proposal($t0);

    // $t5 := get_field<obc_dao::ProposalInfo>.pid($t4) at ./sources/obc_dao.move:733:17+21
    $t5 := $pid#$0_obc_dao_ProposalInfo($t4);

    // $t6 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:733:42+17
    $t6 := $proposal#$0_obc_dao_Proposal($t0);

    // $t7 := get_field<obc_dao::ProposalInfo>.pid($t6) at ./sources/obc_dao.move:733:42+21
    $t7 := $pid#$0_obc_dao_ProposalInfo($t6);

    // $t8 := ==($t5, $t7) at ./sources/obc_dao.move:733:39+2
    $t8 := $IsEqual'u64'($t5, $t7);

    // if ($t8) goto L1 else goto L0 at ./sources/obc_dao.move:733:9+83
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:733:9+83
L1:

    // goto L2 at ./sources/obc_dao.move:733:9+83
    assume {:print "$at(4,22651,22734)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:733:9+83
L0:

    // $t9 := 1404 at ./sources/obc_dao.move:733:65+26
    assume {:print "$at(4,22707,22733)"} true;
    $t9 := 1404;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao.move:733:9+83
    assume {:print "$at(4,22651,22734)"} true;
    assume {:print "$track_abort(26,18):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ./sources/obc_dao.move:733:9+83
    $t10 := $t9;

    // goto L4 at ./sources/obc_dao.move:733:9+83
    goto L4;

    // label L2 at ./sources/obc_dao.move:734:49+5
    assume {:print "$at(4,22784,22789)"} true;
L2:

    // $t11 := clock::timestamp_ms($t1) on_abort goto L4 with $t10 at ./sources/obc_dao.move:734:29+26
    assume {:print "$at(4,22764,22790)"} true;
    call $t11 := $2_clock_timestamp_ms($t1);
    if ($abort_flag) {
        assume {:print "$at(4,22764,22790)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_local[current_time#1#0]($t11) at ./sources/obc_dao.move:734:13+12
    assume {:print "$track_local(26,18,2):", $t11} $t11 == $t11;

    // $t12 := obc_dao::judge_proposal_state($t0, $t11) on_abort goto L4 with $t10 at ./sources/obc_dao.move:735:22+44
    assume {:print "$at(4,22814,22858)"} true;
    call $t12 := $0_obc_dao_judge_proposal_state($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,22814,22858)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_local[status#1#0]($t12) at ./sources/obc_dao.move:735:13+6
    assume {:print "$track_local(26,18,3):", $t12} $t12 == $t12;

    // $t13 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:740:29+17
    assume {:print "$at(4,22965,22982)"} true;
    $t13 := $proposal#$0_obc_dao_Proposal($t0);

    // $t14 := get_field<obc_dao::ProposalInfo>.pid($t13) at ./sources/obc_dao.move:740:29+21
    $t14 := $pid#$0_obc_dao_ProposalInfo($t13);

    // $t15 := pack obc_dao::ProposalStateEvent($t14, $t12) at ./sources/obc_dao.move:739:13+116
    assume {:print "$at(4,22916,23032)"} true;
    $t15 := $0_obc_dao_ProposalStateEvent($t14, $t12);

    // event::emit<obc_dao::ProposalStateEvent>($t15) on_abort goto L4 with $t10 at ./sources/obc_dao.move:738:9+142
    assume {:print "$at(4,22891,23033)"} true;
    call $2_event_emit'$0_obc_dao_ProposalStateEvent'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,22891,23033)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,18):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_return[0]($t12) at ./sources/obc_dao.move:743:9+6
    assume {:print "$at(4,23043,23049)"} true;
    assume {:print "$track_return(26,18,0):", $t12} $t12 == $t12;

    // label L3 at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
L3:

    // return $t12 at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
    $ret0 := $t12;
    return;

    // label L4 at ./sources/obc_dao.move:744:5+1
L4:

    // abort($t10) at ./sources/obc_dao.move:744:5+1
    assume {:print "$at(4,23054,23055)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun obc_dao::propose [verification] at ./sources/obc_dao.move:304:5+2026
procedure {:timeLimit 40} $0_obc_dao_propose$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: $2_coin_Coin'$2_obc_OBC', _$t3: int, _$t4: int, _$t5: $2_clock_Clock, _$t6: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Dao), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t7: bool;
    var $t8: $0_obc_dao_OBCDaoAction;
    var $t9: $2_balance_Balance'$2_obc_OBC';
    var $t10: $2_object_UID;
    var $t11: $0_obc_dao_Proposal;
    var $t12: $0_obc_dao_ProposalInfo;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $2_tx_context_TxContext;
    var $t19: int;
    var $t20: int;
    var $t21: $2_balance_Balance'$2_obc_OBC';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: $Mutation ($0_voting_pool_VotingPool);
    var $t27: $0_voting_pool_VotingObc;
    var $t28: $0_obc_dao_OBCDaoAction;
    var $t29: int;
    var $t30: bool;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: $2_tx_context_TxContext;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: $2_object_UID;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: $0_obc_dao_ProposalInfo;
    var $t48: $0_obc_dao_Proposal;
    var $t49: $Mutation ($2_vec_map_VecMap'u64_$0_obc_dao_ProposalInfo');
    var $t50: $2_object_UID;
    var $t51: int;
    var $t52: $0_obc_dao_ProposalCreatedEvent;
    var $t53: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: $2_coin_Coin'$2_obc_OBC';
    var $t3: int;
    var $t4: int;
    var $t5: $2_clock_Clock;
    var $t6: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_OBCDaoAction': $0_obc_dao_OBCDaoAction;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_ProposalInfo': $0_obc_dao_ProposalInfo;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_balance_Balance'$2_obc_OBC'': $2_balance_Balance'$2_obc_OBC';
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'$2_coin_Coin'$2_obc_OBC'': $2_coin_Coin'$2_obc_OBC';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t6) == $Param(6);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:304:5+1
    assume {:print "$at(4,9303,9304)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'$2_coin_Coin'$2_obc_OBC''($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'$2_clock_Clock'($t5);

    // assume WellFormed($t6) at ./sources/obc_dao.move:304:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t6));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:304:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,5,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:304:5+1
    assume {:print "$track_local(26,5,1):", $t1} $t1 == $t1;

    // trace_local[payment]($t2) at ./sources/obc_dao.move:304:5+1
    assume {:print "$track_local(26,5,2):", $t2} $t2 == $t2;

    // trace_local[action_id]($t3) at ./sources/obc_dao.move:304:5+1
    assume {:print "$track_local(26,5,3):", $t3} $t3 == $t3;

    // trace_local[action_delay]($t4) at ./sources/obc_dao.move:304:5+1
    assume {:print "$track_local(26,5,4):", $t4} $t4 == $t4;

    // trace_local[clock]($t5) at ./sources/obc_dao.move:304:5+1
    assume {:print "$track_local(26,5,5):", $t5} $t5 == $t5;

    // trace_local[ctx]($t6) at ./sources/obc_dao.move:304:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(26,5,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t18 := read_ref($t6) at ./sources/obc_dao.move:315:41+3
    assume {:print "$at(4,9621,9624)"} true;
    $t18 := $Dereference($t6);

    // $t19 := tx_context::sender($t18) on_abort goto L9 with $t20 at ./sources/obc_dao.move:315:22+23
    call $t19 := $2_tx_context_sender($t18);
    if ($abort_flag) {
        assume {:print "$at(4,9602,9625)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[sender#1#0]($t19) at ./sources/obc_dao.move:315:13+6
    assume {:print "$track_local(26,5,15):", $t19} $t19 == $t19;

    // $t21 := coin::into_balance<obc::OBC>($t2) on_abort goto L9 with $t20 at ./sources/obc_dao.move:316:23+27
    assume {:print "$at(4,9649,9676)"} true;
    call $t21 := $2_coin_into_balance'$2_obc_OBC'($t2);
    if ($abort_flag) {
        assume {:print "$at(4,9649,9676)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[balance#1#0]($t21) at ./sources/obc_dao.move:316:13+7
    assume {:print "$track_local(26,5,9):", $t21} $t21 == $t21;

    // $t22 := balance::value<obc::OBC>($t21) on_abort goto L9 with $t20 at ./sources/obc_dao.move:317:21+24
    assume {:print "$at(4,9698,9722)"} true;
    call $t22 := $2_balance_value'$2_obc_OBC'($t21);
    if ($abort_flag) {
        assume {:print "$at(4,9698,9722)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t23 := 200000000000 at ./sources/obc_dao.move:319:26+20
    assume {:print "$at(4,9788,9808)"} true;
    $t23 := 200000000000;
    assume $IsValid'u64'($t23);

    // $t24 := >=($t22, $t23) at ./sources/obc_dao.move:319:23+2
    call $t24 := $Ge($t22, $t23);

    // if ($t24) goto L1 else goto L0 at ./sources/obc_dao.move:319:9+63
    if ($t24) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:319:9+63
L1:

    // goto L2 at ./sources/obc_dao.move:319:9+63
    assume {:print "$at(4,9771,9834)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:319:9+63
L0:

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:319:9+63
    assume {:print "$at(4,9771,9834)"} true;

    // destroy($t6) at ./sources/obc_dao.move:319:9+63

    // $t25 := 1001 at ./sources/obc_dao.move:319:48+23
    $t25 := 1001;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at ./sources/obc_dao.move:319:9+63
    assume {:print "$at(4,9771,9834)"} true;
    assume {:print "$track_abort(26,5):", $t25} $t25 == $t25;

    // $t20 := move($t25) at ./sources/obc_dao.move:319:9+63
    $t20 := $t25;

    // goto L9 at ./sources/obc_dao.move:319:9+63
    goto L9;

    // label L2 at ./sources/obc_dao.move:321:63+3
    assume {:print "$at(4,9899,9902)"} true;
L2:

    // $t26 := borrow_field<obc_dao::Dao>.votingPool($t0) at ./sources/obc_dao.move:321:58+19
    assume {:print "$at(4,9894,9913)"} true;
    $t26 := $ChildMutation($t0, 7, $votingPool#$0_obc_dao_Dao($Dereference($t0)));

    // $t27 := voting_pool::request_add_voting($t26, $t21, $t6) on_abort goto L9 with $t20 at ./sources/obc_dao.move:321:26+66
    call $t27,$t26,$t6 := $0_voting_pool_request_add_voting($t26, $t21, $t6);
    if ($abort_flag) {
        assume {:print "$at(4,9862,9928)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // write_back[Reference($t0).votingPool (voting_pool::VotingPool)]($t26) at ./sources/obc_dao.move:321:26+66
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_votingPool($Dereference($t0), $Dereference($t26)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:321:26+66
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,5,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // transfer::public_transfer<voting_pool::VotingObc>($t27, $t19) on_abort goto L9 with $t20 at ./sources/obc_dao.move:322:9+45
    assume {:print "$at(4,9938,9983)"} true;
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t27, $t19);
    if ($abort_flag) {
        assume {:print "$at(4,9938,9983)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t28 := obc_dao::getDaoActionByActionId($t0, $t3) on_abort goto L9 with $t20 at ./sources/obc_dao.move:325:22+38
    assume {:print "$at(4,10008,10046)"} true;
    call $t28,$t0 := $0_obc_dao_getDaoActionByActionId($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,10008,10046)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[action#1#0]($t28) at ./sources/obc_dao.move:325:13+6
    assume {:print "$track_local(26,5,8):", $t28} $t28 == $t28;

    // $t29 := 0 at ./sources/obc_dao.move:327:29+1
    assume {:print "$at(4,10077,10078)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := <=($t4, $t29) at ./sources/obc_dao.move:327:26+2
    call $t30 := $Le($t4, $t29);

    // if ($t30) goto L4 else goto L3 at ./sources/obc_dao.move:327:13+58
    if ($t30) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:327:13+58
L4:

    // $t31 := true at ./sources/obc_dao.move:327:13+58
    assume {:print "$at(4,10061,10119)"} true;
    $t31 := true;
    assume $IsValid'bool'($t31);

    // $t7 := $t31 at ./sources/obc_dao.move:327:13+58
    $t7 := $t31;

    // goto L5 at ./sources/obc_dao.move:327:13+58
    goto L5;

    // label L3 at ./sources/obc_dao.move:327:34+12
L3:

    // $t32 := obc_dao::min_action_delay($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:327:50+21
    assume {:print "$at(4,10098,10119)"} true;
    call $t32,$t0 := $0_obc_dao_min_action_delay($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10098,10119)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t7 := <=($t4, $t32) at ./sources/obc_dao.move:327:47+2
    call $t7 := $Le($t4, $t32);

    // label L5 at ./sources/obc_dao.move:327:13+58
L5:

    // if ($t7) goto L7 else goto L6 at ./sources/obc_dao.move:327:9+125
    assume {:print "$at(4,10057,10182)"} true;
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao.move:328:45+3
    assume {:print "$at(4,10167,10170)"} true;
L7:

    // $t33 := obc_dao::min_action_delay($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:328:28+21
    assume {:print "$at(4,10150,10171)"} true;
    call $t33,$t0 := $0_obc_dao_min_action_delay($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10150,10171)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t4 := $t33 at ./sources/obc_dao.move:328:13+12
    $t4 := $t33;

    // trace_local[action_delay]($t33) at ./sources/obc_dao.move:328:13+12
    assume {:print "$track_local(26,5,4):", $t33} $t33 == $t33;

    // label L6 at ./sources/obc_dao.move:331:53+3
    assume {:print "$at(4,10237,10240)"} true;
L6:

    // $t34 := obc_dao::generate_next_proposal_id($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:331:27+30
    assume {:print "$at(4,10211,10241)"} true;
    call $t34,$t0 := $0_obc_dao_generate_next_proposal_id($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10211,10241)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[proposal_id#1#0]($t34) at ./sources/obc_dao.move:331:13+11
    assume {:print "$track_local(26,5,13):", $t34} $t34 == $t34;

    // $t35 := read_ref($t6) at ./sources/obc_dao.move:333:41+3
    assume {:print "$at(4,10284,10287)"} true;
    $t35 := $Dereference($t6);

    // $t36 := tx_context::sender($t35) on_abort goto L9 with $t20 at ./sources/obc_dao.move:333:22+23
    call $t36 := $2_tx_context_sender($t35);
    if ($abort_flag) {
        assume {:print "$at(4,10265,10288)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[sender#2#0]($t36) at ./sources/obc_dao.move:333:13+6
    assume {:print "$track_local(26,5,16):", $t36} $t36 == $t36;

    // $t37 := clock::timestamp_ms($t5) on_abort goto L9 with $t20 at ./sources/obc_dao.move:334:26+26
    assume {:print "$at(4,10315,10341)"} true;
    call $t37 := $2_clock_timestamp_ms($t5);
    if ($abort_flag) {
        assume {:print "$at(4,10315,10341)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t38 := obc_dao::voting_delay($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:334:56+17
    call $t38,$t0 := $0_obc_dao_voting_delay($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10345,10362)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t39 := +($t37, $t38) on_abort goto L9 with $t20 at ./sources/obc_dao.move:334:54+1
    call $t39 := $AddU64($t37, $t38);
    if ($abort_flag) {
        assume {:print "$at(4,10343,10344)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[start_time#1#0]($t39) at ./sources/obc_dao.move:334:13+10
    assume {:print "$track_local(26,5,17):", $t39} $t39 == $t39;

    // $t40 := obc_dao::quorum_votes($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:335:28+17
    assume {:print "$at(4,10391,10408)"} true;
    call $t40,$t0 := $0_obc_dao_quorum_votes($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10391,10408)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[quorum_votes#1#0]($t40) at ./sources/obc_dao.move:335:13+12
    assume {:print "$track_local(26,5,14):", $t40} $t40 == $t40;

    // $t41 := object::new($t6) on_abort goto L9 with $t20 at ./sources/obc_dao.move:336:25+16
    assume {:print "$at(4,10434,10450)"} true;
    call $t41,$t6 := $2_object_new($t6);
    if ($abort_flag) {
        assume {:print "$at(4,10434,10450)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[object_id#1#0]($t41) at ./sources/obc_dao.move:336:13+9
    assume {:print "$track_local(26,5,10):", $t41} $t41 == $t41;

    // $t42 := obc_dao::voting_period($t0) on_abort goto L9 with $t20 at ./sources/obc_dao.move:342:36+18
    assume {:print "$at(4,10614,10632)"} true;
    call $t42,$t0 := $0_obc_dao_voting_period($t0);
    if ($abort_flag) {
        assume {:print "$at(4,10614,10632)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t43 := +($t39, $t42) on_abort goto L9 with $t20 at ./sources/obc_dao.move:342:34+1
    call $t43 := $AddU64($t39, $t42);
    if ($abort_flag) {
        assume {:print "$at(4,10612,10613)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t44 := 0 at ./sources/obc_dao.move:343:24+1
    assume {:print "$at(4,10657,10658)"} true;
    $t44 := 0;
    assume $IsValid'u64'($t44);

    // $t45 := 0 at ./sources/obc_dao.move:344:28+1
    assume {:print "$at(4,10687,10688)"} true;
    $t45 := 0;
    assume $IsValid'u64'($t45);

    // $t46 := 0 at ./sources/obc_dao.move:345:18+1
    assume {:print "$at(4,10707,10708)"} true;
    $t46 := 0;
    assume $IsValid'u64'($t46);

    // $t47 := pack obc_dao::ProposalInfo($t34, $t36, $t39, $t43, $t44, $t45, $t46, $t4, $t40, $t28) at ./sources/obc_dao.move:338:28+311
    assume {:print "$at(4,10480,10791)"} true;
    $t47 := $0_obc_dao_ProposalInfo($t34, $t36, $t39, $t43, $t44, $t45, $t46, $t4, $t40, $t28);

    // trace_local[proposalInfo#1#0]($t47) at ./sources/obc_dao.move:338:13+12
    assume {:print "$track_local(26,5,12):", $t47} $t47 == $t47;

    // $t48 := pack obc_dao::Proposal($t41, $t47) at ./sources/obc_dao.move:351:24+87
    assume {:print "$at(4,10817,10904)"} true;
    $t48 := $0_obc_dao_Proposal($t41, $t47);

    // trace_local[proposal#1#0]($t48) at ./sources/obc_dao.move:351:13+8
    assume {:print "$track_local(26,5,11):", $t48} $t48 == $t48;

    // $t49 := borrow_field<obc_dao::Dao>.proposalRecord($t0) at ./sources/obc_dao.move:355:25+23
    assume {:print "$at(4,10930,10953)"} true;
    $t49 := $ChildMutation($t0, 4, $proposalRecord#$0_obc_dao_Dao($Dereference($t0)));

    // vec_map::insert<u64, obc_dao::ProposalInfo>($t49, $t34, $t47) on_abort goto L9 with $t20 at ./sources/obc_dao.move:355:9+67
    call $t49 := $2_vec_map_insert'u64_$0_obc_dao_ProposalInfo'($t49, $t34, $t47);
    if ($abort_flag) {
        assume {:print "$at(4,10914,10981)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // write_back[Reference($t0).proposalRecord (vec_map::VecMap<u64, obc_dao::ProposalInfo>)]($t49) at ./sources/obc_dao.move:355:9+67
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_proposalRecord($Dereference($t0), $Dereference($t49)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:355:9+67
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,5,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t50 := get_field<obc_dao::Proposal>.id($t48) at ./sources/obc_dao.move:361:54+12
    assume {:print "$at(4,11115,11127)"} true;
    $t50 := $id#$0_obc_dao_Proposal($t48);

    // $t51 := object::uid_to_address($t50) on_abort goto L9 with $t20 at ./sources/obc_dao.move:361:39+28
    call $t51 := $2_object_uid_to_address($t50);
    if ($abort_flag) {
        assume {:print "$at(4,11100,11128)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t52 := pack obc_dao::ProposalCreatedEvent($t51, $t34, $t36) at ./sources/obc_dao.move:360:13+166
    assume {:print "$at(4,11040,11206)"} true;
    $t52 := $0_obc_dao_ProposalCreatedEvent($t51, $t34, $t36);

    // event::emit<obc_dao::ProposalCreatedEvent>($t52) on_abort goto L9 with $t20 at ./sources/obc_dao.move:359:9+201
    assume {:print "$at(4,11015,11216)"} true;
    call $2_event_emit'$0_obc_dao_ProposalCreatedEvent'($t52);
    if ($abort_flag) {
        assume {:print "$at(4,11015,11216)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // transfer::share_object<obc_dao::Proposal>($t48) on_abort goto L9 with $t20 at ./sources/obc_dao.move:367:9+32
    assume {:print "$at(4,11227,11259)"} true;
    call $2_transfer_share_object'$0_obc_dao_Proposal'($t48);
    if ($abort_flag) {
        assume {:print "$at(4,11227,11259)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // $t53 := [112, 114, 111, 112, 111, 115, 97, 108, 95, 99, 114, 101, 97, 116, 101, 100] at ./sources/obc_dao.move:370:40+19
    assume {:print "$at(4,11302,11321)"} true;
    $t53 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(112, 114, 111, 112), MakeVec4(111, 115, 97, 108)), MakeVec4(95, 99, 114, 101)), MakeVec4(97, 116, 101, 100));
    assume $IsValid'vec'u8''($t53);

    // obc_dao::send_obc_dao_event($t1, $t53) on_abort goto L9 with $t20 at ./sources/obc_dao.move:370:9+51
    call $0_obc_dao_send_obc_dao_event($t1, $t53);
    if ($abort_flag) {
        assume {:print "$at(4,11271,11322)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(26,5):", $t20} $t20 == $t20;
        goto L9;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:370:60+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,5,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // trace_local[ctx]($t6) at ./sources/obc_dao.move:370:60+1
    assume {:print "$at(4,11322,11323)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(26,5,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L8 at ./sources/obc_dao.move:371:5+1
    assume {:print "$at(4,11328,11329)"} true;
L8:

    // return () at ./sources/obc_dao.move:371:5+1
    assume {:print "$at(4,11328,11329)"} true;
    $ret0 := $t0;
    $ret1 := $t6;
    return;

    // label L9 at ./sources/obc_dao.move:371:5+1
L9:

    // abort($t20) at ./sources/obc_dao.move:371:5+1
    assume {:print "$at(4,11328,11329)"} true;
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun obc_dao::queue_proposal_action [verification] at ./sources/obc_dao.move:644:5+531
procedure {:timeLimit 40} $0_obc_dao_queue_proposal_action$verify(_$t0: $0_obc_dao_manager_OBCDaoManageKey, _$t1: $Mutation ($0_obc_dao_Proposal), _$t2: $2_clock_Clock) returns ($ret0: $Mutation ($0_obc_dao_Proposal))
{
    // declare local variables
    var $t3: $2_clock_Clock;
    var $t4: $0_obc_dao_Proposal;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $0_obc_dao_ProposalInfo;
    var $t12: int;
    var $t13: int;
    var $t14: $Mutation ($0_obc_dao_ProposalInfo);
    var $t15: $Mutation (int);
    var $t16: Vec (int);
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $t2: $2_clock_Clock;
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:644:5+1
    assume {:print "$at(4,20069,20070)"} true;
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:644:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t1));

    // assume WellFormed($t2) at ./sources/obc_dao.move:644:5+1
    assume $IsValid'$2_clock_Clock'($t2);

    // trace_local[manager_key]($t0) at ./sources/obc_dao.move:644:5+1
    assume {:print "$track_local(26,14,0):", $t0} $t0 == $t0;

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:644:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,14,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[clock]($t2) at ./sources/obc_dao.move:644:5+1
    assume {:print "$track_local(26,14,2):", $t2} $t2 == $t2;

    // $t4 := read_ref($t1) at ./sources/obc_dao.move:654:27+17
    assume {:print "$at(4,20357,20374)"} true;
    $t4 := $Dereference($t1);

    // $t5 := obc_dao::proposal_state($t4, $t2) on_abort goto L4 with $t6 at ./sources/obc_dao.move:654:13+31
    call $t5 := $0_obc_dao_proposal_state($t4, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,20343,20374)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := 4 at ./sources/obc_dao.move:654:48+6
    $t7 := 4;
    assume $IsValid'u8'($t7);

    // $t8 := ==($t5, $t7) at ./sources/obc_dao.move:654:45+2
    $t8 := $IsEqual'u8'($t5, $t7);

    // if ($t8) goto L1 else goto L0 at ./sources/obc_dao.move:653:9+114
    assume {:print "$at(4,20322,20436)"} true;
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:653:9+114
L1:

    // goto L2 at ./sources/obc_dao.move:653:9+114
    assume {:print "$at(4,20322,20436)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:653:9+114
L0:

    // destroy($t1) at ./sources/obc_dao.move:653:9+114
    assume {:print "$at(4,20322,20436)"} true;

    // $t9 := 1403 at ./sources/obc_dao.move:655:13+28
    assume {:print "$at(4,20398,20426)"} true;
    $t9 := 1403;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao.move:653:9+114
    assume {:print "$at(4,20322,20436)"} true;
    assume {:print "$track_abort(26,14):", $t9} $t9 == $t9;

    // $t6 := move($t9) at ./sources/obc_dao.move:653:9+114
    $t6 := $t9;

    // goto L4 at ./sources/obc_dao.move:653:9+114
    goto L4;

    // label L2 at ./sources/obc_dao.move:657:54+5
    assume {:print "$at(4,20491,20496)"} true;
L2:

    // $t10 := clock::timestamp_ms($t2) on_abort goto L4 with $t6 at ./sources/obc_dao.move:657:34+26
    assume {:print "$at(4,20471,20497)"} true;
    call $t10 := $2_clock_timestamp_ms($t2);
    if ($abort_flag) {
        assume {:print "$at(4,20471,20497)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t11 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:657:64+17
    $t11 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t12 := get_field<obc_dao::ProposalInfo>.action_delay($t11) at ./sources/obc_dao.move:657:64+30
    $t12 := $action_delay#$0_obc_dao_ProposalInfo($t11);

    // $t13 := +($t10, $t12) on_abort goto L4 with $t6 at ./sources/obc_dao.move:657:62+1
    call $t13 := $AddU64($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(4,20499,20500)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t14 := borrow_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:657:9+17
    $t14 := $ChildMutation($t1, 1, $proposal#$0_obc_dao_Proposal($Dereference($t1)));

    // $t15 := borrow_field<obc_dao::ProposalInfo>.eta($t14) at ./sources/obc_dao.move:657:9+21
    $t15 := $ChildMutation($t14, 6, $eta#$0_obc_dao_ProposalInfo($Dereference($t14)));

    // write_ref($t15, $t13) at ./sources/obc_dao.move:657:9+85
    $t15 := $UpdateMutation($t15, $t13);

    // write_back[Reference($t14).eta (u64)]($t15) at ./sources/obc_dao.move:657:9+85
    $t14 := $UpdateMutation($t14, $Update'$0_obc_dao_ProposalInfo'_eta($Dereference($t14), $Dereference($t15)));

    // write_back[Reference($t1).proposal (obc_dao::ProposalInfo)]($t14) at ./sources/obc_dao.move:657:9+85
    $t1 := $UpdateMutation($t1, $Update'$0_obc_dao_Proposal'_proposal($Dereference($t1), $Dereference($t14)));

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:657:9+85
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,14,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // $t16 := [112, 114, 111, 112, 111, 115, 97, 108, 95, 113, 117, 101, 117, 101, 100] at ./sources/obc_dao.move:659:41+18
    assume {:print "$at(4,20574,20592)"} true;
    $t16 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(112, 114, 111, 112), MakeVec4(111, 115, 97, 108)), MakeVec4(95, 113, 117, 101)), MakeVec3(117, 101, 100));
    assume $IsValid'vec'u8''($t16);

    // obc_dao::send_obc_dao_event($t0, $t16) on_abort goto L4 with $t6 at ./sources/obc_dao.move:659:9+51
    call $0_obc_dao_send_obc_dao_event($t0, $t16);
    if ($abort_flag) {
        assume {:print "$at(4,20542,20593)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:659:60+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,14,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // label L3 at ./sources/obc_dao.move:660:5+1
    assume {:print "$at(4,20599,20600)"} true;
L3:

    // return () at ./sources/obc_dao.move:660:5+1
    assume {:print "$at(4,20599,20600)"} true;
    $ret0 := $t1;
    return;

    // label L4 at ./sources/obc_dao.move:660:5+1
L4:

    // abort($t6) at ./sources/obc_dao.move:660:5+1
    assume {:print "$at(4,20599,20600)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun obc_dao::quorum_votes [baseline] at ./sources/obc_dao.move:821:5+363
procedure {:inline 1} $0_obc_dao_quorum_votes(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dao]($t0) at ./sources/obc_dao.move:821:5+1
    assume {:print "$at(4,25235,25236)"} true;
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,23,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t2 := obc_dao::voting_quorum_rate($t0) on_abort goto L2 with $t3 at ./sources/obc_dao.move:827:20+23
    assume {:print "$at(4,25506,25529)"} true;
    call $t2,$t0 := $0_obc_dao_voting_quorum_rate($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25506,25529)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := (u64)($t2) on_abort goto L2 with $t3 at ./sources/obc_dao.move:828:20+13
    assume {:print "$at(4,25550,25563)"} true;
    call $t4 := $CastU64($t2);
    if ($abort_flag) {
        assume {:print "$at(4,25550,25563)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[rate#2#0]($t4) at ./sources/obc_dao.move:828:13+4
    assume {:print "$track_local(26,23,1):", $t4} $t4 == $t4;

    // $t5 := 10000000000 at ./sources/obc_dao.move:824:37+11
    assume {:print "$at(4,25434,25445)"} true;
    $t5 := 10000000000;
    assume $IsValid'u64'($t5);

    // $t6 := *($t5, $t4) on_abort goto L2 with $t3 at ./sources/obc_dao.move:829:16+1
    assume {:print "$at(4,25580,25581)"} true;
    call $t6 := $MulU64($t5, $t4);
    if ($abort_flag) {
        assume {:print "$at(4,25580,25581)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t7 := 100 at ./sources/obc_dao.move:829:25+3
    $t7 := 100;
    assume $IsValid'u64'($t7);

    // $t8 := /($t6, $t7) on_abort goto L2 with $t3 at ./sources/obc_dao.move:829:23+1
    call $t8 := $Div($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,25587,25588)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t8) at ./sources/obc_dao.move:829:9+19
    assume {:print "$track_return(26,23,0):", $t8} $t8 == $t8;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:829:9+19
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,23,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // pack_ref_deep($t0) at ./sources/obc_dao.move:829:9+19

    // label L1 at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
L1:

    // return $t8 at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:830:5+1
L2:

    // abort($t3) at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao::quorum_votes [verification] at ./sources/obc_dao.move:821:5+363
procedure {:timeLimit 40} $0_obc_dao_quorum_votes$verify(_$t0: $Mutation ($0_obc_dao_Dao)) returns ($ret0: int, $ret1: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:821:5+1
    assume {:print "$at(4,25235,25236)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:821:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,23,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t2 := obc_dao::voting_quorum_rate($t0) on_abort goto L2 with $t3 at ./sources/obc_dao.move:827:20+23
    assume {:print "$at(4,25506,25529)"} true;
    call $t2,$t0 := $0_obc_dao_voting_quorum_rate($t0);
    if ($abort_flag) {
        assume {:print "$at(4,25506,25529)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := (u64)($t2) on_abort goto L2 with $t3 at ./sources/obc_dao.move:828:20+13
    assume {:print "$at(4,25550,25563)"} true;
    call $t4 := $CastU64($t2);
    if ($abort_flag) {
        assume {:print "$at(4,25550,25563)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[rate#2#0]($t4) at ./sources/obc_dao.move:828:13+4
    assume {:print "$track_local(26,23,1):", $t4} $t4 == $t4;

    // $t5 := 10000000000 at ./sources/obc_dao.move:824:37+11
    assume {:print "$at(4,25434,25445)"} true;
    $t5 := 10000000000;
    assume $IsValid'u64'($t5);

    // $t6 := *($t5, $t4) on_abort goto L2 with $t3 at ./sources/obc_dao.move:829:16+1
    assume {:print "$at(4,25580,25581)"} true;
    call $t6 := $MulU64($t5, $t4);
    if ($abort_flag) {
        assume {:print "$at(4,25580,25581)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t7 := 100 at ./sources/obc_dao.move:829:25+3
    $t7 := 100;
    assume $IsValid'u64'($t7);

    // $t8 := /($t6, $t7) on_abort goto L2 with $t3 at ./sources/obc_dao.move:829:23+1
    call $t8 := $Div($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,25587,25588)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(26,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t8) at ./sources/obc_dao.move:829:9+19
    assume {:print "$track_return(26,23,0):", $t8} $t8 == $t8;

    // trace_local[dao]($t0) at ./sources/obc_dao.move:829:9+19
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,23,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L1 at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
L1:

    // return $t8 at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/obc_dao.move:830:5+1
L2:

    // abort($t3) at ./sources/obc_dao.move:830:5+1
    assume {:print "$at(4,25597,25598)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun obc_dao::revoke_vote [verification] at ./sources/obc_dao.move:493:5+1602
procedure {:timeLimit 40} $0_obc_dao_revoke_vote$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $0_obc_dao_Vote, _$t2: int, _$t3: $2_clock_Clock, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_clock_Clock;
    var $t6: int;
    var $t7: $0_voting_pool_VotingObc;
    var $t8: $0_obc_dao_Proposal;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $2_tx_context_TxContext;
    var $t15: int;
    var $t16: $0_obc_dao_Vote;
    var $t17: int;
    var $t18: $0_obc_dao_ProposalInfo;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: $0_obc_dao_Vote;
    var $t23: int;
    var $t24: $0_obc_dao_ProposalInfo;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: $Mutation ($0_obc_dao_Vote);
    var $t29: $0_obc_dao_ProposalInfo;
    var $t30: int;
    var $t31: $0_obc_dao_ProposalInfo;
    var $t32: int;
    var $t33: $0_obc_dao_Vote;
    var $t34: bool;
    var $t35: $0_obc_dao_Vote;
    var $t36: $0_voting_pool_VotingObc;
    var $t37: int;
    var $t38: $0_obc_dao_VoteChangedEvent;
    var $t39: $0_obc_dao_Vote;
    var $t40: $0_voting_pool_VotingObc;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: $0_obc_dao_Vote;
    var $t45: $2_object_UID;
    var $t46: int;
    var $t47: int;
    var $t48: $0_voting_pool_VotingObc;
    var $t49: bool;
    var $t50: $0_obc_dao_Vote;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $0_obc_dao_Vote;
    var $t2: int;
    var $t3: $2_clock_Clock;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:493:5+1
    assume {:print "$at(4,15216,15217)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:493:5+1
    assume $IsValid'$0_obc_dao_Vote'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:493:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:493:5+1
    assume $IsValid'$2_clock_Clock'($t3);

    // assume WellFormed($t4) at ./sources/obc_dao.move:493:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:493:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,9,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[my_vote]($t1) at ./sources/obc_dao.move:493:5+1
    assume {:print "$track_local(26,9,1):", $t1} $t1 == $t1;

    // trace_local[voting_power]($t2) at ./sources/obc_dao.move:493:5+1
    assume {:print "$track_local(26,9,2):", $t2} $t2 == $t2;

    // trace_local[clock]($t3) at ./sources/obc_dao.move:493:5+1
    assume {:print "$track_local(26,9,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:493:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,9,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := read_ref($t0) at ./sources/obc_dao.move:501:39+17
    assume {:print "$at(4,15438,15455)"} true;
    $t8 := $Dereference($t0);

    // $t9 := obc_dao::proposal_state($t8, $t3) on_abort goto L13 with $t10 at ./sources/obc_dao.move:501:25+31
    call $t9 := $0_obc_dao_proposal_state($t8, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,15424,15455)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t11 := 2 at ./sources/obc_dao.move:503:30+6
    assume {:print "$at(4,15553,15559)"} true;
    $t11 := 2;
    assume $IsValid'u8'($t11);

    // $t12 := ==($t9, $t11) at ./sources/obc_dao.move:503:27+2
    $t12 := $IsEqual'u8'($t9, $t11);

    // if ($t12) goto L1 else goto L0 at ./sources/obc_dao.move:503:13+54
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:503:13+54
L1:

    // goto L2 at ./sources/obc_dao.move:503:13+54
    assume {:print "$at(4,15536,15590)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:503:13+54
L0:

    // destroy($t0) at ./sources/obc_dao.move:503:13+54
    assume {:print "$at(4,15536,15590)"} true;

    // destroy($t4) at ./sources/obc_dao.move:503:13+54

    // $t13 := 1403 at ./sources/obc_dao.move:503:38+28
    $t13 := 1403;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/obc_dao.move:503:13+54
    assume {:print "$at(4,15536,15590)"} true;
    assume {:print "$track_abort(26,9):", $t13} $t13 == $t13;

    // $t10 := move($t13) at ./sources/obc_dao.move:503:13+54
    $t10 := $t13;

    // goto L13 at ./sources/obc_dao.move:503:13+54
    goto L13;

    // label L2 at ./sources/obc_dao.move:508:41+3
    assume {:print "$at(4,15688,15691)"} true;
L2:

    // $t14 := read_ref($t4) at ./sources/obc_dao.move:508:41+3
    assume {:print "$at(4,15688,15691)"} true;
    $t14 := $Dereference($t4);

    // $t15 := tx_context::sender($t14) on_abort goto L13 with $t10 at ./sources/obc_dao.move:508:22+23
    call $t15 := $2_tx_context_sender($t14);
    if ($abort_flag) {
        assume {:print "$at(4,15669,15692)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // trace_local[sender#1#0]($t15) at ./sources/obc_dao.move:508:13+6
    assume {:print "$track_local(26,9,6):", $t15} $t15 == $t15;

    // $t16 := copy($t1) at ./sources/obc_dao.move:510:21+7
    assume {:print "$at(4,15724,15731)"} true;
    $t16 := $t1;

    // $t17 := get_field<obc_dao::Vote>.proposer($t16) at ./sources/obc_dao.move:510:21+16
    $t17 := $proposer#$0_obc_dao_Vote($t16);

    // $t18 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:510:41+17
    $t18 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t19 := get_field<obc_dao::ProposalInfo>.proposer($t18) at ./sources/obc_dao.move:510:41+26
    $t19 := $proposer#$0_obc_dao_ProposalInfo($t18);

    // $t20 := ==($t17, $t19) at ./sources/obc_dao.move:510:38+2
    $t20 := $IsEqual'address'($t17, $t19);

    // if ($t20) goto L4 else goto L3 at ./sources/obc_dao.move:510:13+80
    if ($t20) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:510:13+80
L4:

    // goto L5 at ./sources/obc_dao.move:510:13+80
    assume {:print "$at(4,15716,15796)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:510:13+80
L3:

    // destroy($t0) at ./sources/obc_dao.move:510:13+80
    assume {:print "$at(4,15716,15796)"} true;

    // destroy($t4) at ./sources/obc_dao.move:510:13+80

    // $t21 := 1405 at ./sources/obc_dao.move:510:69+23
    $t21 := 1405;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at ./sources/obc_dao.move:510:13+80
    assume {:print "$at(4,15716,15796)"} true;
    assume {:print "$track_abort(26,9):", $t21} $t21 == $t21;

    // $t10 := move($t21) at ./sources/obc_dao.move:510:13+80
    $t10 := $t21;

    // goto L13 at ./sources/obc_dao.move:510:13+80
    goto L13;

    // label L5 at ./sources/obc_dao.move:511:21+7
    assume {:print "$at(4,15818,15825)"} true;
L5:

    // $t22 := copy($t1) at ./sources/obc_dao.move:511:21+7
    assume {:print "$at(4,15818,15825)"} true;
    $t22 := $t1;

    // $t23 := get_field<obc_dao::Vote>.vid($t22) at ./sources/obc_dao.move:511:21+11
    $t23 := $vid#$0_obc_dao_Vote($t22);

    // $t24 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:511:36+17
    $t24 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t25 := get_field<obc_dao::ProposalInfo>.pid($t24) at ./sources/obc_dao.move:511:36+21
    $t25 := $pid#$0_obc_dao_ProposalInfo($t24);

    // $t26 := ==($t23, $t25) at ./sources/obc_dao.move:511:33+2
    $t26 := $IsEqual'u64'($t23, $t25);

    // if ($t26) goto L7 else goto L6 at ./sources/obc_dao.move:511:13+73
    if ($t26) { goto L7; } else { goto L6; }

    // label L7 at ./sources/obc_dao.move:511:13+73
L7:

    // goto L8 at ./sources/obc_dao.move:511:13+73
    assume {:print "$at(4,15810,15883)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao.move:511:13+73
L6:

    // destroy($t0) at ./sources/obc_dao.move:511:13+73
    assume {:print "$at(4,15810,15883)"} true;

    // destroy($t4) at ./sources/obc_dao.move:511:13+73

    // $t27 := 1410 at ./sources/obc_dao.move:511:59+26
    $t27 := 1410;
    assume $IsValid'u64'($t27);

    // trace_abort($t27) at ./sources/obc_dao.move:511:13+73
    assume {:print "$at(4,15810,15883)"} true;
    assume {:print "$track_abort(26,9):", $t27} $t27 == $t27;

    // $t10 := move($t27) at ./sources/obc_dao.move:511:13+73
    $t10 := $t27;

    // goto L13 at ./sources/obc_dao.move:511:13+73
    goto L13;

    // label L8 at ./sources/obc_dao.move:514:24+8
    assume {:print "$at(4,15954,15962)"} true;
L8:

    // $t28 := borrow_local($t1) at ./sources/obc_dao.move:514:34+12
    assume {:print "$at(4,15964,15976)"} true;
    $t28 := $Mutation($Local(1), EmptyVec(), $t1);

    // obc_dao::do_revoke_vote($t0, $t28, $t2, $t4) on_abort goto L13 with $t10 at ./sources/obc_dao.move:514:9+56
    call $t0,$t28,$t4 := $0_obc_dao_do_revoke_vote($t0, $t28, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(4,15939,15995)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // write_back[LocalRoot($t1)@]($t28) at ./sources/obc_dao.move:514:9+56
    $t1 := $Dereference($t28);

    // trace_local[my_vote]($t1) at ./sources/obc_dao.move:514:9+56
    assume {:print "$track_local(26,9,1):", $t1} $t1 == $t1;

    // $t29 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:518:30+17
    assume {:print "$at(4,16112,16129)"} true;
    $t29 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t30 := get_field<obc_dao::ProposalInfo>.pid($t29) at ./sources/obc_dao.move:518:30+21
    $t30 := $pid#$0_obc_dao_ProposalInfo($t29);

    // $t31 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:520:27+17
    assume {:print "$at(4,16192,16209)"} true;
    $t31 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t32 := get_field<obc_dao::ProposalInfo>.proposer($t31) at ./sources/obc_dao.move:520:27+26
    $t32 := $proposer#$0_obc_dao_ProposalInfo($t31);

    // $t33 := copy($t1) at ./sources/obc_dao.move:521:24+7
    assume {:print "$at(4,16243,16250)"} true;
    $t33 := $t1;

    // $t34 := get_field<obc_dao::Vote>.agree($t33) at ./sources/obc_dao.move:521:24+13
    $t34 := $agree#$0_obc_dao_Vote($t33);

    // $t35 := copy($t1) at ./sources/obc_dao.move:522:42+7
    assume {:print "$at(4,16299,16306)"} true;
    $t35 := $t1;

    // $t36 := get_field<obc_dao::Vote>.vote($t35) at ./sources/obc_dao.move:522:41+13
    $t36 := $vote#$0_obc_dao_Vote($t35);

    // $t37 := voting_pool::voting_obc_amount($t36) on_abort goto L13 with $t10 at ./sources/obc_dao.move:522:23+32
    call $t37 := $0_voting_pool_voting_obc_amount($t36);
    if ($abort_flag) {
        assume {:print "$at(4,16280,16312)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t38 := pack obc_dao::VoteChangedEvent($t30, $t15, $t32, $t34, $t37) at ./sources/obc_dao.move:517:13+262
    assume {:print "$at(4,16065,16327)"} true;
    $t38 := $0_obc_dao_VoteChangedEvent($t30, $t15, $t32, $t34, $t37);

    // event::emit<obc_dao::VoteChangedEvent>($t38) on_abort goto L13 with $t10 at ./sources/obc_dao.move:516:9+297
    assume {:print "$at(4,16040,16337)"} true;
    call $2_event_emit'$0_obc_dao_VoteChangedEvent'($t38);
    if ($abort_flag) {
        assume {:print "$at(4,16040,16337)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t39 := copy($t1) at ./sources/obc_dao.move:526:32+7
    assume {:print "$at(4,16371,16378)"} true;
    $t39 := $t1;

    // $t40 := get_field<obc_dao::Vote>.vote($t39) at ./sources/obc_dao.move:526:31+13
    $t40 := $vote#$0_obc_dao_Vote($t39);

    // $t41 := voting_pool::voting_obc_amount($t40) on_abort goto L13 with $t10 at ./sources/obc_dao.move:526:13+32
    call $t41 := $0_voting_pool_voting_obc_amount($t40);
    if ($abort_flag) {
        assume {:print "$at(4,16352,16384)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t42 := 0 at ./sources/obc_dao.move:526:49+4
    $t42 := 0;
    assume $IsValid'u64'($t42);

    // $t43 := ==($t41, $t42) at ./sources/obc_dao.move:526:46+2
    $t43 := $IsEqual'u64'($t41, $t42);

    // if ($t43) goto L10 else goto L9 at ./sources/obc_dao.move:526:9+409
    if ($t43) { goto L10; } else { goto L9; }

    // label L10 at ./sources/obc_dao.move:532:29+7
    assume {:print "$at(4,16547,16554)"} true;
L10:

    // $t44 := move($t1) at ./sources/obc_dao.move:532:29+7
    assume {:print "$at(4,16547,16554)"} true;
    $t44 := $t1;

    // ($t45, $t46, $t47, $t48, $t49) := unpack obc_dao::Vote($t44) at ./sources/obc_dao.move:527:17+132
    assume {:print "$at(4,16412,16544)"} true;
    $t45 := $id#$0_obc_dao_Vote($t44);
    $t46 := $vid#$0_obc_dao_Vote($t44);
    $t47 := $proposer#$0_obc_dao_Vote($t44);
    $t48 := $vote#$0_obc_dao_Vote($t44);
    $t49 := $agree#$0_obc_dao_Vote($t44);

    // destroy($t49) at ./sources/obc_dao.move:532:24+1
    assume {:print "$at(4,16542,16543)"} true;

    // trace_local[vote#1#0]($t48) at ./sources/obc_dao.move:531:17+4
    assume {:print "$at(4,16513,16517)"} true;
    assume {:print "$track_local(26,9,7):", $t48} $t48 == $t48;

    // destroy($t47) at ./sources/obc_dao.move:528:27+1
    assume {:print "$at(4,16445,16446)"} true;

    // destroy($t46) at ./sources/obc_dao.move:530:22+1
    assume {:print "$at(4,16494,16495)"} true;

    // object::delete($t45) on_abort goto L13 with $t10 at ./sources/obc_dao.move:534:13+19
    assume {:print "$at(4,16569,16588)"} true;
    call $2_object_delete($t45);
    if ($abort_flag) {
        assume {:print "$at(4,16569,16588)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // transfer::public_transfer<voting_pool::VotingObc>($t48, $t15) on_abort goto L13 with $t10 at ./sources/obc_dao.move:535:13+39
    assume {:print "$at(4,16602,16641)"} true;
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t48, $t15);
    if ($abort_flag) {
        assume {:print "$at(4,16602,16641)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // goto L11 at ./sources/obc_dao.move:535:52+1
    goto L11;

    // label L9 at ./sources/obc_dao.move:537:29+7
    assume {:print "$at(4,16688,16695)"} true;
L9:

    // $t50 := move($t1) at ./sources/obc_dao.move:537:29+7
    assume {:print "$at(4,16688,16695)"} true;
    $t50 := $t1;

    // transfer::transfer<obc_dao::Vote>($t50, $t15) on_abort goto L13 with $t10 at ./sources/obc_dao.move:538:13+37
    assume {:print "$at(4,16709,16746)"} true;
    call $2_transfer_transfer'$0_obc_dao_Vote'($t50, $t15);
    if ($abort_flag) {
        assume {:print "$at(4,16709,16746)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,9):", $t10} $t10 == $t10;
        goto L13;
    }

    // label L11 at ./sources/obc_dao.move:539:10+1
    assume {:print "$at(4,16757,16758)"} true;
L11:

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:539:10+1
    assume {:print "$at(4,16757,16758)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,9,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t4) at ./sources/obc_dao.move:539:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(26,9,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L12 at ./sources/obc_dao.move:543:5+1
    assume {:print "$at(4,16817,16818)"} true;
L12:

    // return () at ./sources/obc_dao.move:543:5+1
    assume {:print "$at(4,16817,16818)"} true;
    $ret0 := $t0;
    $ret1 := $t4;
    return;

    // label L13 at ./sources/obc_dao.move:543:5+1
L13:

    // abort($t10) at ./sources/obc_dao.move:543:5+1
    assume {:print "$at(4,16817,16818)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun obc_dao::send_obc_dao_event [baseline] at ./sources/obc_dao.move:965:5+306
procedure {:inline 1} $0_obc_dao_send_obc_dao_event(_$t0: $0_obc_dao_manager_OBCDaoManageKey, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $0_obc_dao_DaoManagerEvent;
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $t1: Vec (int);
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[manager_key]($t0) at ./sources/obc_dao.move:965:5+1
    assume {:print "$at(4,29128,29129)"} true;
    assume {:print "$track_local(26,36,0):", $t0} $t0 == $t0;

    // trace_local[msg]($t1) at ./sources/obc_dao.move:965:5+1
    assume {:print "$track_local(26,36,1):", $t1} $t1 == $t1;

    // $t3 := obc_dao_manager::getKeyAddress($t0) on_abort goto L2 with $t4 at ./sources/obc_dao.move:966:27+43
    assume {:print "$at(4,29235,29278)"} true;
    call $t3 := $0_obc_dao_manager_getKeyAddress($t0);
    if ($abort_flag) {
        assume {:print "$at(4,29235,29278)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := string::utf8($t1) on_abort goto L2 with $t4 at ./sources/obc_dao.move:970:22+17
    assume {:print "$at(4,29385,29402)"} true;
    call $t5 := $1_string_utf8($t1);
    if ($abort_flag) {
        assume {:print "$at(4,29385,29402)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := pack obc_dao::DaoManagerEvent($t5, $t3) at ./sources/obc_dao.move:968:13+104
    assume {:print "$at(4,29313,29417)"} true;
    $t6 := $0_obc_dao_DaoManagerEvent($t5, $t3);

    // event::emit<obc_dao::DaoManagerEvent>($t6) on_abort goto L2 with $t4 at ./sources/obc_dao.move:967:9+139
    assume {:print "$at(4,29288,29427)"} true;
    call $2_event_emit'$0_obc_dao_DaoManagerEvent'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,29288,29427)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
L1:

    // return () at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
    return;

    // label L2 at ./sources/obc_dao.move:973:5+1
L2:

    // abort($t4) at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun obc_dao::send_obc_dao_event [verification] at ./sources/obc_dao.move:965:5+306
procedure {:timeLimit 40} $0_obc_dao_send_obc_dao_event$verify(_$t0: $0_obc_dao_manager_OBCDaoManageKey, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $0_obc_dao_DaoManagerEvent;
    var $t0: $0_obc_dao_manager_OBCDaoManageKey;
    var $t1: Vec (int);
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:965:5+1
    assume {:print "$at(4,29128,29129)"} true;
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:965:5+1
    assume $IsValid'vec'u8''($t1);

    // trace_local[manager_key]($t0) at ./sources/obc_dao.move:965:5+1
    assume {:print "$track_local(26,36,0):", $t0} $t0 == $t0;

    // trace_local[msg]($t1) at ./sources/obc_dao.move:965:5+1
    assume {:print "$track_local(26,36,1):", $t1} $t1 == $t1;

    // $t3 := obc_dao_manager::getKeyAddress($t0) on_abort goto L2 with $t4 at ./sources/obc_dao.move:966:27+43
    assume {:print "$at(4,29235,29278)"} true;
    call $t3 := $0_obc_dao_manager_getKeyAddress($t0);
    if ($abort_flag) {
        assume {:print "$at(4,29235,29278)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := string::utf8($t1) on_abort goto L2 with $t4 at ./sources/obc_dao.move:970:22+17
    assume {:print "$at(4,29385,29402)"} true;
    call $t5 := $1_string_utf8($t1);
    if ($abort_flag) {
        assume {:print "$at(4,29385,29402)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := pack obc_dao::DaoManagerEvent($t5, $t3) at ./sources/obc_dao.move:968:13+104
    assume {:print "$at(4,29313,29417)"} true;
    $t6 := $0_obc_dao_DaoManagerEvent($t5, $t3);

    // event::emit<obc_dao::DaoManagerEvent>($t6) on_abort goto L2 with $t4 at ./sources/obc_dao.move:967:9+139
    assume {:print "$at(4,29288,29427)"} true;
    call $2_event_emit'$0_obc_dao_DaoManagerEvent'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,29288,29427)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(26,36):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
L1:

    // return () at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
    return;

    // label L2 at ./sources/obc_dao.move:973:5+1
L2:

    // abort($t4) at ./sources/obc_dao.move:973:5+1
    assume {:print "$at(4,29433,29434)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_admins [baseline] at ./sources/obc_dao.move:943:5+293
procedure {:inline 1} $0_obc_dao_set_admins(_$t0: Vec (int), _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: $Mutation (Vec (int));
    var $t7: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:943:5+1
    assume {:print "$at(4,28656,28657)"} true;
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:943:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao.move:948:34+11
    assume {:print "$at(4,28811,28822)"} true;
L3:

    // $t0 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    assume {:print "$at(4,28811,28822)"} true;
    havoc $t0;

    // assume WellFormed($t0) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($t0);

    // $t2 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t2;

    // assume WellFormed($t2) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($t2);

    // $t3 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t3;

    // assume WellFormed($t3) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'bool'($t3);

    // $t4 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t4;

    // assume WellFormed($t4) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t5;

    // assume WellFormed($t5) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'address'($t5);

    // $t1 := havoc[mut]() at ./sources/obc_dao.move:948:34+11
    havoc $temp_0'$2_tx_context_TxContext';
    $t1 := $UpdateMutation($t1, $temp_0'$2_tx_context_TxContext');

    // assume WellFormed($t1) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // $t6 := havoc[mut_all]() at ./sources/obc_dao.move:948:34+11
    havoc $t6;

    // assume WellFormed($t6) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($Dereference($t6));

    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:948:34+11
    assume {:print "$info(): enter loop, variable(s) new_admins, ctx havocked and reassigned"} true;
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:948:34+11
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // assume Not(AbortFlag()) at ./sources/obc_dao.move:948:34+11
    assume !$abort_flag;

    // $t2 := copy($t0) at ./sources/obc_dao.move:948:34+11
    $t2 := $t0;

    // $t3 := vector::is_empty<address>($t2) on_abort goto L6 with $t7 at ./sources/obc_dao.move:948:17+29
    call $t3 := $1_vector_is_empty'address'($t2);
    if ($abort_flag) {
        assume {:print "$at(4,28794,28823)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t4 := !($t3) at ./sources/obc_dao.move:948:16+1
    call $t4 := $Not($t3);

    // if ($t4) goto L1 else goto L0 at ./sources/obc_dao.move:948:9+156
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:948:9+156
L1:

    // label L2 at ./sources/obc_dao.move:949:42+15
    assume {:print "$at(4,28868,28883)"} true;
L2:

    // $t6 := borrow_local($t0) at ./sources/obc_dao.move:949:42+15
    assume {:print "$at(4,28868,28883)"} true;
    $t6 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t5 := vector::pop_back<address>($t6) on_abort goto L6 with $t7 at ./sources/obc_dao.move:949:25+33
    call $t5,$t6 := $1_vector_pop_back'address'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,28851,28884)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // write_back[LocalRoot($t0)@]($t6) at ./sources/obc_dao.move:949:25+33
    $t0 := $Dereference($t6);

    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:949:25+33
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // obc_dao_manager::new($t5, $t1) on_abort goto L6 with $t7 at ./sources/obc_dao.move:950:13+32
    assume {:print "$at(4,28898,28930)"} true;
    call $t1 := $0_obc_dao_manager_new($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,28898,28930)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // goto L4 at ./sources/obc_dao.move:950:45+1
    goto L4;

    // label L0 at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;
L0:

    // destroy($t1) at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:948:9+156
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/obc_dao.move:948:9+156
    goto L5;

    // label L4 at ./sources/obc_dao.move:948:9+156
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;
    assume false;
    return;

    // label L5 at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
L5:

    // return () at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
    $ret0 := $t1;
    return;

    // label L6 at ./sources/obc_dao.move:954:5+1
L6:

    // abort($t7) at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_admins [verification] at ./sources/obc_dao.move:943:5+293
procedure {:timeLimit 40} $0_obc_dao_set_admins$verify(_$t0: Vec (int), _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: $Mutation (Vec (int));
    var $t7: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:943:5+1
    assume {:print "$at(4,28656,28657)"} true;
    assume $IsValid'vec'address''($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:943:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:943:5+1
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:943:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L3 at ./sources/obc_dao.move:948:34+11
    assume {:print "$at(4,28811,28822)"} true;
L3:

    // $t0 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    assume {:print "$at(4,28811,28822)"} true;
    havoc $t0;

    // assume WellFormed($t0) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($t0);

    // $t2 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t2;

    // assume WellFormed($t2) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($t2);

    // $t3 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t3;

    // assume WellFormed($t3) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'bool'($t3);

    // $t4 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t4;

    // assume WellFormed($t4) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at ./sources/obc_dao.move:948:34+11
    havoc $t5;

    // assume WellFormed($t5) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'address'($t5);

    // $t1 := havoc[mut]() at ./sources/obc_dao.move:948:34+11
    havoc $temp_0'$2_tx_context_TxContext';
    $t1 := $UpdateMutation($t1, $temp_0'$2_tx_context_TxContext');

    // assume WellFormed($t1) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // $t6 := havoc[mut_all]() at ./sources/obc_dao.move:948:34+11
    havoc $t6;

    // assume WellFormed($t6) at ./sources/obc_dao.move:948:34+11
    assume $IsValid'vec'address''($Dereference($t6));

    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:948:34+11
    assume {:print "$info(): enter loop, variable(s) new_admins, ctx havocked and reassigned"} true;
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:948:34+11
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // assume Not(AbortFlag()) at ./sources/obc_dao.move:948:34+11
    assume !$abort_flag;

    // $t2 := copy($t0) at ./sources/obc_dao.move:948:34+11
    $t2 := $t0;

    // $t3 := vector::is_empty<address>($t2) on_abort goto L6 with $t7 at ./sources/obc_dao.move:948:17+29
    call $t3 := $1_vector_is_empty'address'($t2);
    if ($abort_flag) {
        assume {:print "$at(4,28794,28823)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t4 := !($t3) at ./sources/obc_dao.move:948:16+1
    call $t4 := $Not($t3);

    // if ($t4) goto L1 else goto L0 at ./sources/obc_dao.move:948:9+156
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:948:9+156
L1:

    // label L2 at ./sources/obc_dao.move:949:42+15
    assume {:print "$at(4,28868,28883)"} true;
L2:

    // $t6 := borrow_local($t0) at ./sources/obc_dao.move:949:42+15
    assume {:print "$at(4,28868,28883)"} true;
    $t6 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t5 := vector::pop_back<address>($t6) on_abort goto L6 with $t7 at ./sources/obc_dao.move:949:25+33
    call $t5,$t6 := $1_vector_pop_back'address'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,28851,28884)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // write_back[LocalRoot($t0)@]($t6) at ./sources/obc_dao.move:949:25+33
    $t0 := $Dereference($t6);

    // trace_local[new_admins]($t0) at ./sources/obc_dao.move:949:25+33
    assume {:print "$track_local(26,34,0):", $t0} $t0 == $t0;

    // obc_dao_manager::new($t5, $t1) on_abort goto L6 with $t7 at ./sources/obc_dao.move:950:13+32
    assume {:print "$at(4,28898,28930)"} true;
    call $t1 := $0_obc_dao_manager_new($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,28898,28930)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,34):", $t7} $t7 == $t7;
        goto L6;
    }

    // goto L4 at ./sources/obc_dao.move:950:45+1
    goto L4;

    // label L0 at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;
L0:

    // destroy($t1) at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;

    // trace_local[ctx]($t1) at ./sources/obc_dao.move:948:9+156
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(26,34,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/obc_dao.move:948:9+156
    goto L5;

    // label L4 at ./sources/obc_dao.move:948:9+156
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/obc_dao.move:948:9+156
    assume {:print "$at(4,28786,28942)"} true;
    assume false;
    return;

    // label L5 at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
L5:

    // return () at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
    $ret0 := $t1;
    return;

    // label L6 at ./sources/obc_dao.move:954:5+1
L6:

    // abort($t7) at ./sources/obc_dao.move:954:5+1
    assume {:print "$at(4,28948,28949)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_min_action_delay [verification] at ./sources/obc_dao.move:930:5+335
procedure {:timeLimit 40} $0_obc_dao_set_min_action_delay$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: int) returns ($ret0: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t3: $Mutation ($0_obc_dao_DaoConfig);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_obc_dao_DaoConfig);
    var $t9: $Mutation (int);
    var $t10: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:930:5+1
    assume {:print "$at(4,28314,28315)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:930:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:930:5+1
    assume $IsValid'u64'($t2);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:930:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,33,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:930:5+1
    assume {:print "$track_local(26,33,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./sources/obc_dao.move:930:5+1
    assume {:print "$track_local(26,33,2):", $t2} $t2 == $t2;

    // $t4 := 0 at ./sources/obc_dao.move:935:25+1
    assume {:print "$at(4,28467,28468)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := >($t2, $t4) at ./sources/obc_dao.move:935:23+1
    call $t5 := $Gt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao.move:935:9+46
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:935:9+46
L1:

    // goto L2 at ./sources/obc_dao.move:935:9+46
    assume {:print "$at(4,28451,28497)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:935:9+46
L0:

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:935:9+46
    assume {:print "$at(4,28451,28497)"} true;

    // $t6 := 1407 at ./sources/obc_dao.move:935:28+26
    $t6 := 1407;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/obc_dao.move:935:9+46
    assume {:print "$at(4,28451,28497)"} true;
    assume {:print "$track_abort(26,33):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/obc_dao.move:935:9+46
    $t7 := $t6;

    // goto L4 at ./sources/obc_dao.move:935:9+46
    goto L4;

    // label L2 at ./sources/obc_dao.move:936:33+3
    assume {:print "$at(4,28531,28534)"} true;
L2:

    // $t8 := obc_dao::get_config($t0) on_abort goto L4 with $t7 at ./sources/obc_dao.move:936:22+15
    assume {:print "$at(4,28520,28535)"} true;
    call $t8,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,28520,28535)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,33):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[config#1#0]($t8) at ./sources/obc_dao.move:936:13+6
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t8);
    assume {:print "$track_local(26,33,3):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // $t9 := borrow_field<obc_dao::DaoConfig>.min_action_delay($t8) at ./sources/obc_dao.move:937:9+23
    assume {:print "$at(4,28545,28568)"} true;
    $t9 := $ChildMutation($t8, 3, $min_action_delay#$0_obc_dao_DaoConfig($Dereference($t8)));

    // write_ref($t9, $t2) at ./sources/obc_dao.move:937:9+31
    $t9 := $UpdateMutation($t9, $t2);

    // write_back[Reference($t8).min_action_delay (u64)]($t9) at ./sources/obc_dao.move:937:9+31
    $t8 := $UpdateMutation($t8, $Update'$0_obc_dao_DaoConfig'_min_action_delay($Dereference($t8), $Dereference($t9)));

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t8) at ./sources/obc_dao.move:937:9+31
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t8)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:937:9+31
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,33,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t10 := [115, 101, 116, 95, 109, 105, 110, 95, 97, 99, 116, 105, 111, 110, 95, 100, 101, 108, 97, 121] at ./sources/obc_dao.move:939:40+23
    assume {:print "$at(4,28618,28641)"} true;
    $t10 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(115, 101, 116, 95), MakeVec4(109, 105, 110, 95)), MakeVec4(97, 99, 116, 105)), MakeVec4(111, 110, 95, 100)), MakeVec4(101, 108, 97, 121));
    assume $IsValid'vec'u8''($t10);

    // obc_dao::send_obc_dao_event($t1, $t10) on_abort goto L4 with $t7 at ./sources/obc_dao.move:939:8+56
    call $0_obc_dao_send_obc_dao_event($t1, $t10);
    if ($abort_flag) {
        assume {:print "$at(4,28586,28642)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,33):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:939:64+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,33,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L3 at ./sources/obc_dao.move:940:5+1
    assume {:print "$at(4,28648,28649)"} true;
L3:

    // return () at ./sources/obc_dao.move:940:5+1
    assume {:print "$at(4,28648,28649)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./sources/obc_dao.move:940:5+1
L4:

    // abort($t7) at ./sources/obc_dao.move:940:5+1
    assume {:print "$at(4,28648,28649)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_voting_delay [verification] at ./sources/obc_dao.move:887:5+325
procedure {:timeLimit 40} $0_obc_dao_set_voting_delay$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: int) returns ($ret0: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t3: $Mutation ($0_obc_dao_DaoConfig);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_obc_dao_DaoConfig);
    var $t9: $Mutation (int);
    var $t10: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:887:5+1
    assume {:print "$at(4,27199,27200)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:887:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:887:5+1
    assume $IsValid'u64'($t2);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:887:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,30,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:887:5+1
    assume {:print "$track_local(26,30,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./sources/obc_dao.move:887:5+1
    assume {:print "$track_local(26,30,2):", $t2} $t2 == $t2;

    // $t4 := 0 at ./sources/obc_dao.move:893:25+1
    assume {:print "$at(4,27349,27350)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := >($t2, $t4) at ./sources/obc_dao.move:893:23+1
    call $t5 := $Gt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao.move:893:9+46
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:893:9+46
L1:

    // goto L2 at ./sources/obc_dao.move:893:9+46
    assume {:print "$at(4,27333,27379)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:893:9+46
L0:

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:893:9+46
    assume {:print "$at(4,27333,27379)"} true;

    // $t6 := 1407 at ./sources/obc_dao.move:893:28+26
    $t6 := 1407;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/obc_dao.move:893:9+46
    assume {:print "$at(4,27333,27379)"} true;
    assume {:print "$track_abort(26,30):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/obc_dao.move:893:9+46
    $t7 := $t6;

    // goto L4 at ./sources/obc_dao.move:893:9+46
    goto L4;

    // label L2 at ./sources/obc_dao.move:894:33+3
    assume {:print "$at(4,27413,27416)"} true;
L2:

    // $t8 := obc_dao::get_config($t0) on_abort goto L4 with $t7 at ./sources/obc_dao.move:894:22+15
    assume {:print "$at(4,27402,27417)"} true;
    call $t8,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,27402,27417)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,30):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[config#1#0]($t8) at ./sources/obc_dao.move:894:13+6
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t8);
    assume {:print "$track_local(26,30,3):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // $t9 := borrow_field<obc_dao::DaoConfig>.voting_delay($t8) at ./sources/obc_dao.move:895:9+19
    assume {:print "$at(4,27427,27446)"} true;
    $t9 := $ChildMutation($t8, 0, $voting_delay#$0_obc_dao_DaoConfig($Dereference($t8)));

    // write_ref($t9, $t2) at ./sources/obc_dao.move:895:9+27
    $t9 := $UpdateMutation($t9, $t2);

    // write_back[Reference($t8).voting_delay (u64)]($t9) at ./sources/obc_dao.move:895:9+27
    $t8 := $UpdateMutation($t8, $Update'$0_obc_dao_DaoConfig'_voting_delay($Dereference($t8), $Dereference($t9)));

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t8) at ./sources/obc_dao.move:895:9+27
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t8)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:895:9+27
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,30,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t10 := [115, 101, 116, 95, 118, 111, 116, 105, 110, 103, 95, 100, 101, 108, 97, 121] at ./sources/obc_dao.move:897:41+19
    assume {:print "$at(4,27497,27516)"} true;
    $t10 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(115, 101, 116, 95), MakeVec4(118, 111, 116, 105)), MakeVec4(110, 103, 95, 100)), MakeVec4(101, 108, 97, 121));
    assume $IsValid'vec'u8''($t10);

    // obc_dao::send_obc_dao_event($t1, $t10) on_abort goto L4 with $t7 at ./sources/obc_dao.move:897:9+52
    call $0_obc_dao_send_obc_dao_event($t1, $t10);
    if ($abort_flag) {
        assume {:print "$at(4,27465,27517)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,30):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:897:61+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,30,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L3 at ./sources/obc_dao.move:898:5+1
    assume {:print "$at(4,27523,27524)"} true;
L3:

    // return () at ./sources/obc_dao.move:898:5+1
    assume {:print "$at(4,27523,27524)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./sources/obc_dao.move:898:5+1
L4:

    // abort($t7) at ./sources/obc_dao.move:898:5+1
    assume {:print "$at(4,27523,27524)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_voting_period [verification] at ./sources/obc_dao.move:902:5+328
procedure {:timeLimit 40} $0_obc_dao_set_voting_period$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: int) returns ($ret0: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t3: $Mutation ($0_obc_dao_DaoConfig);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($0_obc_dao_DaoConfig);
    var $t9: $Mutation (int);
    var $t10: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:902:5+1
    assume {:print "$at(4,27557,27558)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:902:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:902:5+1
    assume $IsValid'u64'($t2);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:902:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,31,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:902:5+1
    assume {:print "$track_local(26,31,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./sources/obc_dao.move:902:5+1
    assume {:print "$track_local(26,31,2):", $t2} $t2 == $t2;

    // $t4 := 0 at ./sources/obc_dao.move:908:25+1
    assume {:print "$at(4,27708,27709)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := >($t2, $t4) at ./sources/obc_dao.move:908:23+1
    call $t5 := $Gt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/obc_dao.move:908:9+46
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:908:9+46
L1:

    // goto L2 at ./sources/obc_dao.move:908:9+46
    assume {:print "$at(4,27692,27738)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:908:9+46
L0:

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:908:9+46
    assume {:print "$at(4,27692,27738)"} true;

    // $t6 := 1407 at ./sources/obc_dao.move:908:28+26
    $t6 := 1407;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/obc_dao.move:908:9+46
    assume {:print "$at(4,27692,27738)"} true;
    assume {:print "$track_abort(26,31):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/obc_dao.move:908:9+46
    $t7 := $t6;

    // goto L4 at ./sources/obc_dao.move:908:9+46
    goto L4;

    // label L2 at ./sources/obc_dao.move:909:33+3
    assume {:print "$at(4,27772,27775)"} true;
L2:

    // $t8 := obc_dao::get_config($t0) on_abort goto L4 with $t7 at ./sources/obc_dao.move:909:22+15
    assume {:print "$at(4,27761,27776)"} true;
    call $t8,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,27761,27776)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,31):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[config#1#0]($t8) at ./sources/obc_dao.move:909:13+6
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t8);
    assume {:print "$track_local(26,31,3):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // $t9 := borrow_field<obc_dao::DaoConfig>.voting_period($t8) at ./sources/obc_dao.move:910:9+20
    assume {:print "$at(4,27786,27806)"} true;
    $t9 := $ChildMutation($t8, 1, $voting_period#$0_obc_dao_DaoConfig($Dereference($t8)));

    // write_ref($t9, $t2) at ./sources/obc_dao.move:910:9+28
    $t9 := $UpdateMutation($t9, $t2);

    // write_back[Reference($t8).voting_period (u64)]($t9) at ./sources/obc_dao.move:910:9+28
    $t8 := $UpdateMutation($t8, $Update'$0_obc_dao_DaoConfig'_voting_period($Dereference($t8), $Dereference($t9)));

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t8) at ./sources/obc_dao.move:910:9+28
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t8)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:910:9+28
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,31,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t10 := [115, 101, 116, 95, 118, 111, 116, 105, 110, 103, 95, 112, 101, 114, 105, 111, 100] at ./sources/obc_dao.move:912:41+20
    assume {:print "$at(4,27857,27877)"} true;
    $t10 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(115, 101, 116, 95), MakeVec4(118, 111, 116, 105)), MakeVec4(110, 103, 95, 112)), MakeVec4(101, 114, 105, 111)), MakeVec1(100));
    assume $IsValid'vec'u8''($t10);

    // obc_dao::send_obc_dao_event($t1, $t10) on_abort goto L4 with $t7 at ./sources/obc_dao.move:912:9+53
    call $0_obc_dao_send_obc_dao_event($t1, $t10);
    if ($abort_flag) {
        assume {:print "$at(4,27825,27878)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,31):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:912:62+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,31,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L3 at ./sources/obc_dao.move:913:5+1
    assume {:print "$at(4,27884,27885)"} true;
L3:

    // return () at ./sources/obc_dao.move:913:5+1
    assume {:print "$at(4,27884,27885)"} true;
    $ret0 := $t0;
    return;

    // label L4 at ./sources/obc_dao.move:913:5+1
L4:

    // abort($t7) at ./sources/obc_dao.move:913:5+1
    assume {:print "$at(4,27884,27885)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun obc_dao::set_voting_quorum_rate [verification] at ./sources/obc_dao.move:916:5+356
procedure {:timeLimit 40} $0_obc_dao_set_voting_quorum_rate$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_obc_dao_manager_OBCDaoManageKey, _$t2: int) returns ($ret0: $Mutation ($0_obc_dao_Dao))
{
    // declare local variables
    var $t3: bool;
    var $t4: $Mutation ($0_obc_dao_DaoConfig);
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation ($0_obc_dao_DaoConfig);
    var $t12: $Mutation (int);
    var $t13: Vec (int);
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_obc_dao_manager_OBCDaoManageKey;
    var $t2: int;
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_obc_dao_DaoConfig': $0_obc_dao_DaoConfig;
    var $temp_0'$0_obc_dao_manager_OBCDaoManageKey': $0_obc_dao_manager_OBCDaoManageKey;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:916:5+1
    assume {:print "$at(4,27922,27923)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:916:5+1
    assume $IsValid'$0_obc_dao_manager_OBCDaoManageKey'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:916:5+1
    assume $IsValid'u8'($t2);

    // trace_local[dao]($t0) at ./sources/obc_dao.move:916:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,32,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[manager_key]($t1) at ./sources/obc_dao.move:916:5+1
    assume {:print "$track_local(26,32,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./sources/obc_dao.move:916:5+1
    assume {:print "$track_local(26,32,2):", $t2} $t2 == $t2;

    // $t5 := 100 at ./sources/obc_dao.move:921:26+3
    assume {:print "$at(4,28077,28080)"} true;
    $t5 := 100;
    assume $IsValid'u8'($t5);

    // $t6 := <=($t2, $t5) at ./sources/obc_dao.move:921:23+2
    call $t6 := $Le($t2, $t5);

    // if ($t6) goto L1 else goto L0 at ./sources/obc_dao.move:921:17+25
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:921:33+5
L1:

    // $t7 := 0 at ./sources/obc_dao.move:921:41+1
    assume {:print "$at(4,28092,28093)"} true;
    $t7 := 0;
    assume $IsValid'u8'($t7);

    // $t3 := >($t2, $t7) at ./sources/obc_dao.move:921:39+1
    call $t3 := $Gt($t2, $t7);

    // goto L2 at ./sources/obc_dao.move:921:17+25
    goto L2;

    // label L0 at ./sources/obc_dao.move:921:17+25
L0:

    // $t8 := false at ./sources/obc_dao.move:921:17+25
    assume {:print "$at(4,28068,28093)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t3 := $t8 at ./sources/obc_dao.move:921:17+25
    $t3 := $t8;

    // label L2 at ./sources/obc_dao.move:921:17+25
L2:

    // if ($t3) goto L4 else goto L3 at ./sources/obc_dao.move:921:9+61
    assume {:print "$at(4,28060,28121)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:921:9+61
L4:

    // goto L5 at ./sources/obc_dao.move:921:9+61
    assume {:print "$at(4,28060,28121)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:921:9+61
L3:

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // destroy($t0) at ./sources/obc_dao.move:921:9+61
    assume {:print "$at(4,28060,28121)"} true;

    // $t9 := 1406 at ./sources/obc_dao.move:921:44+25
    $t9 := 1406;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/obc_dao.move:921:9+61
    assume {:print "$at(4,28060,28121)"} true;
    assume {:print "$track_abort(26,32):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ./sources/obc_dao.move:921:9+61
    $t10 := $t9;

    // goto L7 at ./sources/obc_dao.move:921:9+61
    goto L7;

    // label L5 at ./sources/obc_dao.move:922:33+3
    assume {:print "$at(4,28155,28158)"} true;
L5:

    // $t11 := obc_dao::get_config($t0) on_abort goto L7 with $t10 at ./sources/obc_dao.move:922:22+15
    assume {:print "$at(4,28144,28159)"} true;
    call $t11,$t0 := $0_obc_dao_get_config($t0);
    if ($abort_flag) {
        assume {:print "$at(4,28144,28159)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,32):", $t10} $t10 == $t10;
        goto L7;
    }

    // trace_local[config#1#0]($t11) at ./sources/obc_dao.move:922:13+6
    $temp_0'$0_obc_dao_DaoConfig' := $Dereference($t11);
    assume {:print "$track_local(26,32,4):", $temp_0'$0_obc_dao_DaoConfig'} $temp_0'$0_obc_dao_DaoConfig' == $temp_0'$0_obc_dao_DaoConfig';

    // $t12 := borrow_field<obc_dao::DaoConfig>.voting_quorum_rate($t11) at ./sources/obc_dao.move:923:9+25
    assume {:print "$at(4,28169,28194)"} true;
    $t12 := $ChildMutation($t11, 2, $voting_quorum_rate#$0_obc_dao_DaoConfig($Dereference($t11)));

    // write_ref($t12, $t2) at ./sources/obc_dao.move:923:9+33
    $t12 := $UpdateMutation($t12, $t2);

    // write_back[Reference($t11).voting_quorum_rate (u8)]($t12) at ./sources/obc_dao.move:923:9+33
    $t11 := $UpdateMutation($t11, $Update'$0_obc_dao_DaoConfig'_voting_quorum_rate($Dereference($t11), $Dereference($t12)));

    // write_back[Reference($t0).config (obc_dao::DaoConfig)]($t11) at ./sources/obc_dao.move:923:9+33
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_config($Dereference($t0), $Dereference($t11)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:923:9+33
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,32,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t13 := [115, 101, 116, 95, 118, 111, 116, 105, 110, 103, 95, 113, 117, 111, 114, 117, 109, 95, 114, 97, 116, 101] at ./sources/obc_dao.move:925:41+25
    assume {:print "$at(4,28245,28270)"} true;
    $t13 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(115, 101, 116, 95), MakeVec4(118, 111, 116, 105)), MakeVec4(110, 103, 95, 113)), MakeVec4(117, 111, 114, 117)), MakeVec4(109, 95, 114, 97)), MakeVec2(116, 101));
    assume $IsValid'vec'u8''($t13);

    // obc_dao::send_obc_dao_event($t1, $t13) on_abort goto L7 with $t10 at ./sources/obc_dao.move:925:9+58
    call $0_obc_dao_send_obc_dao_event($t1, $t13);
    if ($abort_flag) {
        assume {:print "$at(4,28213,28271)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,32):", $t10} $t10 == $t10;
        goto L7;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:925:67+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,32,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // label L6 at ./sources/obc_dao.move:926:5+1
    assume {:print "$at(4,28277,28278)"} true;
L6:

    // return () at ./sources/obc_dao.move:926:5+1
    assume {:print "$at(4,28277,28278)"} true;
    $ret0 := $t0;
    return;

    // label L7 at ./sources/obc_dao.move:926:5+1
L7:

    // abort($t10) at ./sources/obc_dao.move:926:5+1
    assume {:print "$at(4,28277,28278)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun obc_dao::unvote_votes [verification] at ./sources/obc_dao.move:574:5+933
procedure {:timeLimit 40} $0_obc_dao_unvote_votes$verify(_$t0: $Mutation ($0_obc_dao_Proposal), _$t1: $0_obc_dao_Vote, _$t2: $2_clock_Clock, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_clock_Clock;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $0_voting_pool_VotingObc;
    var $t9: $0_obc_dao_Proposal;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: $2_tx_context_TxContext;
    var $t16: int;
    var $t17: $2_object_UID;
    var $t18: int;
    var $t19: int;
    var $t20: $0_voting_pool_VotingObc;
    var $t21: bool;
    var $t22: $0_obc_dao_ProposalInfo;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: $0_obc_dao_ProposalInfo;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t0: $Mutation ($0_obc_dao_Proposal);
    var $t1: $0_obc_dao_Vote;
    var $t2: $2_clock_Clock;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_clock_Clock': $2_clock_Clock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:574:5+1
    assume {:print "$at(4,17720,17721)"} true;
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/obc_dao.move:574:5+1
    assume $IsValid'$0_obc_dao_Vote'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:574:5+1
    assume $IsValid'$2_clock_Clock'($t2);

    // assume WellFormed($t3) at ./sources/obc_dao.move:574:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:574:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,11,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[vote]($t1) at ./sources/obc_dao.move:574:5+1
    assume {:print "$track_local(26,11,1):", $t1} $t1 == $t1;

    // trace_local[clock]($t2) at ./sources/obc_dao.move:574:5+1
    assume {:print "$track_local(26,11,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:574:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,11,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t0) at ./sources/obc_dao.move:583:39+16
    assume {:print "$at(4,18054,18070)"} true;
    $t9 := $Dereference($t0);

    // $t10 := obc_dao::proposal_state($t9, $t2) on_abort goto L12 with $t11 at ./sources/obc_dao.move:583:25+30
    call $t10 := $0_obc_dao_proposal_state($t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,18040,18070)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,11):", $t11} $t11 == $t11;
        goto L12;
    }

    // $t12 := 2 at ./sources/obc_dao.move:585:29+6
    assume {:print "$at(4,18170,18176)"} true;
    $t12 := 2;
    assume $IsValid'u8'($t12);

    // $t13 := >($t10, $t12) at ./sources/obc_dao.move:585:27+1
    call $t13 := $Gt($t10, $t12);

    // if ($t13) goto L1 else goto L0 at ./sources/obc_dao.move:585:13+53
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:585:13+53
L1:

    // goto L2 at ./sources/obc_dao.move:585:13+53
    assume {:print "$at(4,18154,18207)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:585:13+53
L0:

    // destroy($t0) at ./sources/obc_dao.move:585:13+53
    assume {:print "$at(4,18154,18207)"} true;

    // destroy($t3) at ./sources/obc_dao.move:585:13+53

    // $t14 := 1403 at ./sources/obc_dao.move:585:37+28
    $t14 := 1403;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at ./sources/obc_dao.move:585:13+53
    assume {:print "$at(4,18154,18207)"} true;
    assume {:print "$track_abort(26,11):", $t14} $t14 == $t14;

    // $t11 := move($t14) at ./sources/obc_dao.move:585:13+53
    $t11 := $t14;

    // goto L12 at ./sources/obc_dao.move:585:13+53
    goto L12;

    // label L2 at ./sources/obc_dao.move:588:41+3
    assume {:print "$at(4,18261,18264)"} true;
L2:

    // $t15 := read_ref($t3) at ./sources/obc_dao.move:588:41+3
    assume {:print "$at(4,18261,18264)"} true;
    $t15 := $Dereference($t3);

    // $t16 := tx_context::sender($t15) on_abort goto L12 with $t11 at ./sources/obc_dao.move:588:22+23
    call $t16 := $2_tx_context_sender($t15);
    if ($abort_flag) {
        assume {:print "$at(4,18242,18265)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,11):", $t11} $t11 == $t11;
        goto L12;
    }

    // trace_local[sender#1#0]($t16) at ./sources/obc_dao.move:588:13+6
    assume {:print "$track_local(26,11,6):", $t16} $t16 == $t16;

    // ($t17, $t18, $t19, $t20, $t21) := unpack obc_dao::Vote($t1) at ./sources/obc_dao.move:590:13+41
    assume {:print "$at(4,18303,18344)"} true;
    $t17 := $id#$0_obc_dao_Vote($t1);
    $t18 := $vid#$0_obc_dao_Vote($t1);
    $t19 := $proposer#$0_obc_dao_Vote($t1);
    $t20 := $vote#$0_obc_dao_Vote($t1);
    $t21 := $agree#$0_obc_dao_Vote($t1);

    // destroy($t21) at ./sources/obc_dao.move:590:51+1

    // trace_local[vote#1#0]($t20) at ./sources/obc_dao.move:590:38+4
    assume {:print "$track_local(26,11,8):", $t20} $t20 == $t20;

    // trace_local[proposer#1#0]($t19) at ./sources/obc_dao.move:590:20+8
    assume {:print "$track_local(26,11,5):", $t19} $t19 == $t19;

    // trace_local[vid#1#0]($t18) at ./sources/obc_dao.move:590:33+3
    assume {:print "$track_local(26,11,7):", $t18} $t18 == $t18;

    // object::delete($t17) on_abort goto L12 with $t11 at ./sources/obc_dao.move:593:9+18
    assume {:print "$at(4,18363,18381)"} true;
    call $2_object_delete($t17);
    if ($abort_flag) {
        assume {:print "$at(4,18363,18381)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,11):", $t11} $t11 == $t11;
        goto L12;
    }

    // $t22 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:596:29+17
    assume {:print "$at(4,18456,18473)"} true;
    $t22 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t23 := get_field<obc_dao::ProposalInfo>.proposer($t22) at ./sources/obc_dao.move:596:29+26
    $t23 := $proposer#$0_obc_dao_ProposalInfo($t22);

    // $t24 := ==($t19, $t23) at ./sources/obc_dao.move:596:26+2
    $t24 := $IsEqual'address'($t19, $t23);

    // if ($t24) goto L4 else goto L9 at ./sources/obc_dao.move:596:9+72
    if ($t24) { goto L4; } else { goto L9; }

    // label L4 at ./sources/obc_dao.move:596:9+72
L4:

    // goto L5 at ./sources/obc_dao.move:596:9+72
    assume {:print "$at(4,18436,18508)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:596:9+72
L3:

    // destroy($t0) at ./sources/obc_dao.move:596:9+72
    assume {:print "$at(4,18436,18508)"} true;

    // $t25 := 1405 at ./sources/obc_dao.move:596:57+23
    $t25 := 1405;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at ./sources/obc_dao.move:596:9+72
    assume {:print "$at(4,18436,18508)"} true;
    assume {:print "$track_abort(26,11):", $t25} $t25 == $t25;

    // $t11 := move($t25) at ./sources/obc_dao.move:596:9+72
    $t11 := $t25;

    // goto L12 at ./sources/obc_dao.move:596:9+72
    goto L12;

    // label L5 at ./sources/obc_dao.move:597:17+3
    assume {:print "$at(4,18526,18529)"} true;
L5:

    // $t26 := get_field<obc_dao::Proposal>.proposal($t0) at ./sources/obc_dao.move:597:24+17
    assume {:print "$at(4,18533,18550)"} true;
    $t26 := $proposal#$0_obc_dao_Proposal($Dereference($t0));

    // $t27 := get_field<obc_dao::ProposalInfo>.pid($t26) at ./sources/obc_dao.move:597:24+21
    $t27 := $pid#$0_obc_dao_ProposalInfo($t26);

    // $t28 := ==($t18, $t27) at ./sources/obc_dao.move:597:21+2
    $t28 := $IsEqual'u64'($t18, $t27);

    // if ($t28) goto L7 else goto L10 at ./sources/obc_dao.move:597:9+78
    if ($t28) { goto L7; } else { goto L10; }

    // label L7 at ./sources/obc_dao.move:597:9+78
L7:

    // goto L8 at ./sources/obc_dao.move:597:9+78
    assume {:print "$at(4,18518,18596)"} true;
    goto L8;

    // label L6 at ./sources/obc_dao.move:597:47+39
L6:

    // $t29 := 1410 at ./sources/obc_dao.move:597:47+39
    assume {:print "$at(4,18556,18595)"} true;
    $t29 := 1410;
    assume $IsValid'u64'($t29);

    // trace_abort($t29) at ./sources/obc_dao.move:597:9+78
    assume {:print "$at(4,18518,18596)"} true;
    assume {:print "$track_abort(26,11):", $t29} $t29 == $t29;

    // $t11 := move($t29) at ./sources/obc_dao.move:597:9+78
    $t11 := $t29;

    // goto L12 at ./sources/obc_dao.move:597:9+78
    goto L12;

    // label L8 at ./sources/obc_dao.move:600:35+4
    assume {:print "$at(4,18633,18637)"} true;
L8:

    // transfer::public_transfer<voting_pool::VotingObc>($t20, $t16) on_abort goto L12 with $t11 at ./sources/obc_dao.move:600:9+39
    assume {:print "$at(4,18607,18646)"} true;
    call $2_transfer_public_transfer'$0_voting_pool_VotingObc'($t20, $t16);
    if ($abort_flag) {
        assume {:print "$at(4,18607,18646)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(26,11):", $t11} $t11 == $t11;
        goto L12;
    }

    // trace_local[proposal]($t0) at ./sources/obc_dao.move:600:48+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t0);
    assume {:print "$track_local(26,11,0):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t3) at ./sources/obc_dao.move:600:48+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(26,11,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L11 at ./sources/obc_dao.move:600:48+1
    goto L11;

    // label L9 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L9:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L10 at <internal>:1:1+10
L10:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // destroy($t3) at <internal>:1:1+10

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L11 at ./sources/obc_dao.move:601:5+1
    assume {:print "$at(4,18652,18653)"} true;
L11:

    // return () at ./sources/obc_dao.move:601:5+1
    assume {:print "$at(4,18652,18653)"} true;
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L12 at ./sources/obc_dao.move:601:5+1
L12:

    // abort($t11) at ./sources/obc_dao.move:601:5+1
    assume {:print "$at(4,18652,18653)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun obc_dao::vote_of [verification] at ./sources/obc_dao.move:610:5+669
procedure {:timeLimit 40} $0_obc_dao_vote_of$verify(_$t0: $0_obc_dao_Vote, _$t1: $Mutation ($0_obc_dao_Proposal), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Proposal), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $0_obc_dao_ProposalInfo;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $0_obc_dao_ProposalInfo;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $0_obc_dao_ProposalInfo;
    var $t15: int;
    var $t16: $2_tx_context_TxContext;
    var $t17: int;
    var $t18: $0_obc_dao_ProposalInfo;
    var $t19: int;
    var $t20: bool;
    var $t21: $0_voting_pool_VotingObc;
    var $t22: int;
    var $t23: $0_obc_dao_VoteInfoEvent;
    var $t0: $0_obc_dao_Vote;
    var $t1: $Mutation ($0_obc_dao_Proposal);
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Proposal': $0_obc_dao_Proposal;
    var $temp_0'$0_obc_dao_Vote': $0_obc_dao_Vote;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/obc_dao.move:610:5+1
    assume {:print "$at(4,18912,18913)"} true;
    assume $IsValid'$0_obc_dao_Vote'($t0);

    // assume WellFormed($t1) at ./sources/obc_dao.move:610:5+1
    assume $IsValid'$0_obc_dao_Proposal'($Dereference($t1));

    // assume WellFormed($t2) at ./sources/obc_dao.move:610:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[vote]($t0) at ./sources/obc_dao.move:610:5+1
    assume {:print "$track_local(26,12,0):", $t0} $t0 == $t0;

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:610:5+1
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,12,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:610:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,12,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := get_field<obc_dao::Vote>.proposer($t0) at ./sources/obc_dao.move:615:17+13
    assume {:print "$at(4,19044,19057)"} true;
    $t3 := $proposer#$0_obc_dao_Vote($t0);

    // $t4 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:615:34+17
    $t4 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t5 := get_field<obc_dao::ProposalInfo>.proposer($t4) at ./sources/obc_dao.move:615:34+26
    $t5 := $proposer#$0_obc_dao_ProposalInfo($t4);

    // $t6 := ==($t3, $t5) at ./sources/obc_dao.move:615:31+2
    $t6 := $IsEqual'address'($t3, $t5);

    // if ($t6) goto L1 else goto L0 at ./sources/obc_dao.move:615:9+77
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at ./sources/obc_dao.move:615:9+77
L1:

    // goto L2 at ./sources/obc_dao.move:615:9+77
    assume {:print "$at(4,19036,19113)"} true;
    goto L2;

    // label L0 at ./sources/obc_dao.move:615:9+77
L0:

    // destroy($t1) at ./sources/obc_dao.move:615:9+77
    assume {:print "$at(4,19036,19113)"} true;

    // destroy($t2) at ./sources/obc_dao.move:615:9+77

    // $t7 := 1405 at ./sources/obc_dao.move:615:62+23
    $t7 := 1405;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/obc_dao.move:615:9+77
    assume {:print "$at(4,19036,19113)"} true;
    assume {:print "$track_abort(26,12):", $t7} $t7 == $t7;

    // $t8 := move($t7) at ./sources/obc_dao.move:615:9+77
    $t8 := $t7;

    // goto L7 at ./sources/obc_dao.move:615:9+77
    goto L7;

    // label L2 at ./sources/obc_dao.move:616:17+4
    assume {:print "$at(4,19131,19135)"} true;
L2:

    // $t9 := get_field<obc_dao::Vote>.vid($t0) at ./sources/obc_dao.move:616:17+8
    assume {:print "$at(4,19131,19139)"} true;
    $t9 := $vid#$0_obc_dao_Vote($t0);

    // $t10 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:616:29+17
    $t10 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t11 := get_field<obc_dao::ProposalInfo>.pid($t10) at ./sources/obc_dao.move:616:29+21
    $t11 := $pid#$0_obc_dao_ProposalInfo($t10);

    // $t12 := ==($t9, $t11) at ./sources/obc_dao.move:616:26+2
    $t12 := $IsEqual'u64'($t9, $t11);

    // if ($t12) goto L4 else goto L3 at ./sources/obc_dao.move:616:9+70
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at ./sources/obc_dao.move:616:9+70
L4:

    // goto L5 at ./sources/obc_dao.move:616:9+70
    assume {:print "$at(4,19123,19193)"} true;
    goto L5;

    // label L3 at ./sources/obc_dao.move:616:9+70
L3:

    // destroy($t1) at ./sources/obc_dao.move:616:9+70
    assume {:print "$at(4,19123,19193)"} true;

    // destroy($t2) at ./sources/obc_dao.move:616:9+70

    // $t13 := 1410 at ./sources/obc_dao.move:616:52+26
    $t13 := 1410;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/obc_dao.move:616:9+70
    assume {:print "$at(4,19123,19193)"} true;
    assume {:print "$track_abort(26,12):", $t13} $t13 == $t13;

    // $t8 := move($t13) at ./sources/obc_dao.move:616:9+70
    $t8 := $t13;

    // goto L7 at ./sources/obc_dao.move:616:9+70
    goto L7;

    // label L5 at ./sources/obc_dao.move:620:30+8
    assume {:print "$at(4,19338,19346)"} true;
L5:

    // $t14 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:620:30+17
    assume {:print "$at(4,19338,19355)"} true;
    $t14 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t15 := get_field<obc_dao::ProposalInfo>.pid($t14) at ./sources/obc_dao.move:620:30+21
    $t15 := $pid#$0_obc_dao_ProposalInfo($t14);

    // $t16 := read_ref($t2) at ./sources/obc_dao.move:621:43+3
    assume {:print "$at(4,19403,19406)"} true;
    $t16 := $Dereference($t2);

    // $t17 := tx_context::sender($t16) on_abort goto L7 with $t8 at ./sources/obc_dao.move:621:24+23
    call $t17 := $2_tx_context_sender($t16);
    if ($abort_flag) {
        assume {:print "$at(4,19384,19407)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,12):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t18 := get_field<obc_dao::Proposal>.proposal($t1) at ./sources/obc_dao.move:622:27+17
    assume {:print "$at(4,19435,19452)"} true;
    $t18 := $proposal#$0_obc_dao_Proposal($Dereference($t1));

    // $t19 := get_field<obc_dao::ProposalInfo>.proposer($t18) at ./sources/obc_dao.move:622:27+26
    $t19 := $proposer#$0_obc_dao_ProposalInfo($t18);

    // $t20 := get_field<obc_dao::Vote>.agree($t0) at ./sources/obc_dao.move:623:24+10
    assume {:print "$at(4,19486,19496)"} true;
    $t20 := $agree#$0_obc_dao_Vote($t0);

    // $t21 := get_field<obc_dao::Vote>.vote($t0) at ./sources/obc_dao.move:624:41+10
    assume {:print "$at(4,19538,19548)"} true;
    $t21 := $vote#$0_obc_dao_Vote($t0);

    // $t22 := voting_pool::voting_obc_amount($t21) on_abort goto L7 with $t8 at ./sources/obc_dao.move:624:23+29
    call $t22 := $0_voting_pool_voting_obc_amount($t21);
    if ($abort_flag) {
        assume {:print "$at(4,19520,19549)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,12):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t23 := pack obc_dao::VoteInfoEvent($t15, $t17, $t19, $t20, $t22) at ./sources/obc_dao.move:619:13+270
    assume {:print "$at(4,19294,19564)"} true;
    $t23 := $0_obc_dao_VoteInfoEvent($t15, $t17, $t19, $t20, $t22);

    // event::emit<obc_dao::VoteInfoEvent>($t23) on_abort goto L7 with $t8 at ./sources/obc_dao.move:618:9+305
    assume {:print "$at(4,19269,19574)"} true;
    call $2_event_emit'$0_obc_dao_VoteInfoEvent'($t23);
    if ($abort_flag) {
        assume {:print "$at(4,19269,19574)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(26,12):", $t8} $t8 == $t8;
        goto L7;
    }

    // trace_local[proposal]($t1) at ./sources/obc_dao.move:626:10+1
    assume {:print "$at(4,19574,19575)"} true;
    $temp_0'$0_obc_dao_Proposal' := $Dereference($t1);
    assume {:print "$track_local(26,12,1):", $temp_0'$0_obc_dao_Proposal'} $temp_0'$0_obc_dao_Proposal' == $temp_0'$0_obc_dao_Proposal';

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:626:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,12,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/obc_dao.move:627:5+1
    assume {:print "$at(4,19580,19581)"} true;
L6:

    // return () at ./sources/obc_dao.move:627:5+1
    assume {:print "$at(4,19580,19581)"} true;
    $ret0 := $t1;
    $ret1 := $t2;
    return;

    // label L7 at ./sources/obc_dao.move:627:5+1
L7:

    // abort($t8) at ./sources/obc_dao.move:627:5+1
    assume {:print "$at(4,19580,19581)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun obc_dao::withdraw_voting [verification] at ./sources/obc_dao.move:1035:5+455
procedure {:timeLimit 40} $0_obc_dao_withdraw_voting$verify(_$t0: $Mutation ($0_obc_dao_Dao), _$t1: $0_voting_pool_VotingObc, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($0_obc_dao_Dao), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($0_voting_pool_VotingPool);
    var $t8: $2_balance_Balance'$2_obc_OBC';
    var $t9: $2_coin_Coin'$2_obc_OBC';
    var $t0: $Mutation ($0_obc_dao_Dao);
    var $t1: $0_voting_pool_VotingObc;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$0_obc_dao_Dao': $0_obc_dao_Dao;
    var $temp_0'$0_voting_pool_VotingObc': $0_voting_pool_VotingObc;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)), Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0)), Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0))) at ./sources/obc_dao.move:1035:5+1
    assume {:print "$at(4,32091,32092)"} true;
    assume ($IsValid'$0_obc_dao_Dao'($Dereference($t0)) && ((((($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100)) && ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)) && ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0)));

    // assume WellFormed($t1) at ./sources/obc_dao.move:1035:5+1
    assume $IsValid'$0_voting_pool_VotingObc'($t1);

    // assume WellFormed($t2) at ./sources/obc_dao.move:1035:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1035:5+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,39,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // trace_local[voting_obc]($t1) at ./sources/obc_dao.move:1035:5+1
    assume {:print "$track_local(26,39,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:1035:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,39,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := read_ref($t2) at ./sources/obc_dao.move:1039:41+3
    assume {:print "$at(4,32333,32336)"} true;
    $t4 := $Dereference($t2);

    // $t5 := tx_context::sender($t4) on_abort goto L2 with $t6 at ./sources/obc_dao.move:1039:22+23
    call $t5 := $2_tx_context_sender($t4);
    if ($abort_flag) {
        assume {:print "$at(4,32314,32337)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,39):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[sender#1#0]($t5) at ./sources/obc_dao.move:1039:13+6
    assume {:print "$track_local(26,39,3):", $t5} $t5 == $t5;

    // $t7 := borrow_field<obc_dao::Dao>.votingPool($t0) at ./sources/obc_dao.move:1040:63+19
    assume {:print "$at(4,32401,32420)"} true;
    $t7 := $ChildMutation($t0, 7, $votingPool#$0_obc_dao_Dao($Dereference($t0)));

    // $t8 := voting_pool::request_withdraw_voting($t7, $t1) on_abort goto L2 with $t6 at ./sources/obc_dao.move:1040:26+69
    call $t8,$t7 := $0_voting_pool_request_withdraw_voting($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,32364,32433)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,39):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).votingPool (voting_pool::VotingPool)]($t7) at ./sources/obc_dao.move:1040:26+69
    $t0 := $UpdateMutation($t0, $Update'$0_obc_dao_Dao'_votingPool($Dereference($t0), $Dereference($t7)));

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1040:26+69
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,39,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // $t9 := coin::from_balance<obc::OBC>($t8, $t2) on_abort goto L2 with $t6 at ./sources/obc_dao.move:1041:20+35
    assume {:print "$at(4,32454,32489)"} true;
    call $t9,$t2 := $2_coin_from_balance'$2_obc_OBC'($t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,32454,32489)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,39):", $t6} $t6 == $t6;
        goto L2;
    }

    // transfer::public_transfer<coin::Coin<obc::OBC>>($t9, $t5) on_abort goto L2 with $t6 at ./sources/obc_dao.move:1042:9+39
    assume {:print "$at(4,32499,32538)"} true;
    call $2_transfer_public_transfer'$2_coin_Coin'$2_obc_OBC''($t9, $t5);
    if ($abort_flag) {
        assume {:print "$at(4,32499,32538)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(26,39):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[dao]($t0) at ./sources/obc_dao.move:1042:48+1
    $temp_0'$0_obc_dao_Dao' := $Dereference($t0);
    assume {:print "$track_local(26,39,0):", $temp_0'$0_obc_dao_Dao'} $temp_0'$0_obc_dao_Dao' == $temp_0'$0_obc_dao_Dao';

    // assert And(Gt(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 0), Le(select obc_dao::DaoConfig.voting_quorum_rate(select obc_dao::Dao.config($t0)), 100)) at ./sources/obc_dao.move:130:9+62
    // data invariant at ./sources/obc_dao.move:130:9+62
    assume {:print "$at(4,4178,4240)"} true;
    assert {:msg "assert_failed(4,4178,4240): data invariant does not hold"}
      (($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0) && ($voting_quorum_rate#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) <= 100));

    // assert Gt(select obc_dao::DaoConfig.voting_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:131:9+27
    // data invariant at ./sources/obc_dao.move:131:9+27
    assume {:print "$at(4,4249,4276)"} true;
    assert {:msg "assert_failed(4,4249,4276): data invariant does not hold"}
      ($voting_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.voting_period(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:132:9+28
    // data invariant at ./sources/obc_dao.move:132:9+28
    assume {:print "$at(4,4285,4313)"} true;
    assert {:msg "assert_failed(4,4285,4313): data invariant does not hold"}
      ($voting_period#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // assert Gt(select obc_dao::DaoConfig.min_action_delay(select obc_dao::Dao.config($t0)), 0) at ./sources/obc_dao.move:133:9+31
    // data invariant at ./sources/obc_dao.move:133:9+31
    assume {:print "$at(4,4322,4353)"} true;
    assert {:msg "assert_failed(4,4322,4353): data invariant does not hold"}
      ($min_action_delay#$0_obc_dao_DaoConfig($config#$0_obc_dao_Dao($Dereference($t0))) > 0);

    // trace_local[ctx]($t2) at ./sources/obc_dao.move:1042:48+1
    assume {:print "$at(4,32538,32539)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(26,39,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/obc_dao.move:1044:5+1
    assume {:print "$at(4,32545,32546)"} true;
L1:

    // return () at ./sources/obc_dao.move:1044:5+1
    assume {:print "$at(4,32545,32546)"} true;
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/obc_dao.move:1044:5+1
L2:

    // abort($t6) at ./sources/obc_dao.move:1044:5+1
    assume {:print "$at(4,32545,32546)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}
